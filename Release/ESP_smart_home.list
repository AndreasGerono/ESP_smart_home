
ESP_smart_home.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000288c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002aa0  08002aa0  00012aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002aa8  08002aa8  00012aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002aac  08002aac  00012aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  08002ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000220  20000068  08002b18  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000288  08002b18  00020288  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fb12  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000028cd  00000000  00000000  0002fba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000808d  00000000  00000000  0003246f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000cb8  00000000  00000000  0003a4fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bf8  00000000  00000000  0003b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000163c4  00000000  00000000  0003bdac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000c4f2  00000000  00000000  00052170  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00083a8f  00000000  00000000  0005e662  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000e20f1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002178  00000000  00000000  000e216c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002934 	.word	0x08002934

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08002934 	.word	0x08002934

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	1c08      	adds	r0, r1, #0
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	464f      	mov	r7, r9
 8000274:	4646      	mov	r6, r8
 8000276:	46d6      	mov	lr, sl
 8000278:	b5c0      	push	{r6, r7, lr}
 800027a:	0004      	movs	r4, r0
 800027c:	b082      	sub	sp, #8
 800027e:	000d      	movs	r5, r1
 8000280:	4691      	mov	r9, r2
 8000282:	4698      	mov	r8, r3
 8000284:	428b      	cmp	r3, r1
 8000286:	d82f      	bhi.n	80002e8 <__udivmoddi4+0x78>
 8000288:	d02c      	beq.n	80002e4 <__udivmoddi4+0x74>
 800028a:	4641      	mov	r1, r8
 800028c:	4648      	mov	r0, r9
 800028e:	f000 f8b1 	bl	80003f4 <__clzdi2>
 8000292:	0029      	movs	r1, r5
 8000294:	0006      	movs	r6, r0
 8000296:	0020      	movs	r0, r4
 8000298:	f000 f8ac 	bl	80003f4 <__clzdi2>
 800029c:	1a33      	subs	r3, r6, r0
 800029e:	469c      	mov	ip, r3
 80002a0:	3b20      	subs	r3, #32
 80002a2:	469a      	mov	sl, r3
 80002a4:	d500      	bpl.n	80002a8 <__udivmoddi4+0x38>
 80002a6:	e076      	b.n	8000396 <__udivmoddi4+0x126>
 80002a8:	464b      	mov	r3, r9
 80002aa:	4652      	mov	r2, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	001f      	movs	r7, r3
 80002b0:	464b      	mov	r3, r9
 80002b2:	4662      	mov	r2, ip
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d828      	bhi.n	800030e <__udivmoddi4+0x9e>
 80002bc:	d025      	beq.n	800030a <__udivmoddi4+0x9a>
 80002be:	4653      	mov	r3, sl
 80002c0:	1ba4      	subs	r4, r4, r6
 80002c2:	41bd      	sbcs	r5, r7
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	da00      	bge.n	80002ca <__udivmoddi4+0x5a>
 80002c8:	e07b      	b.n	80003c2 <__udivmoddi4+0x152>
 80002ca:	2200      	movs	r2, #0
 80002cc:	2300      	movs	r3, #0
 80002ce:	9200      	str	r2, [sp, #0]
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	2301      	movs	r3, #1
 80002d4:	4652      	mov	r2, sl
 80002d6:	4093      	lsls	r3, r2
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2301      	movs	r3, #1
 80002dc:	4662      	mov	r2, ip
 80002de:	4093      	lsls	r3, r2
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	e018      	b.n	8000316 <__udivmoddi4+0xa6>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	d9d0      	bls.n	800028a <__udivmoddi4+0x1a>
 80002e8:	2200      	movs	r2, #0
 80002ea:	2300      	movs	r3, #0
 80002ec:	9200      	str	r2, [sp, #0]
 80002ee:	9301      	str	r3, [sp, #4]
 80002f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <__udivmoddi4+0x8a>
 80002f6:	601c      	str	r4, [r3, #0]
 80002f8:	605d      	str	r5, [r3, #4]
 80002fa:	9800      	ldr	r0, [sp, #0]
 80002fc:	9901      	ldr	r1, [sp, #4]
 80002fe:	b002      	add	sp, #8
 8000300:	bc1c      	pop	{r2, r3, r4}
 8000302:	4690      	mov	r8, r2
 8000304:	4699      	mov	r9, r3
 8000306:	46a2      	mov	sl, r4
 8000308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800030a:	42a3      	cmp	r3, r4
 800030c:	d9d7      	bls.n	80002be <__udivmoddi4+0x4e>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	4663      	mov	r3, ip
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0e9      	beq.n	80002f0 <__udivmoddi4+0x80>
 800031c:	07fb      	lsls	r3, r7, #31
 800031e:	4698      	mov	r8, r3
 8000320:	4641      	mov	r1, r8
 8000322:	0872      	lsrs	r2, r6, #1
 8000324:	430a      	orrs	r2, r1
 8000326:	087b      	lsrs	r3, r7, #1
 8000328:	4666      	mov	r6, ip
 800032a:	e00e      	b.n	800034a <__udivmoddi4+0xda>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d101      	bne.n	8000334 <__udivmoddi4+0xc4>
 8000330:	42a2      	cmp	r2, r4
 8000332:	d80c      	bhi.n	800034e <__udivmoddi4+0xde>
 8000334:	1aa4      	subs	r4, r4, r2
 8000336:	419d      	sbcs	r5, r3
 8000338:	2001      	movs	r0, #1
 800033a:	1924      	adds	r4, r4, r4
 800033c:	416d      	adcs	r5, r5
 800033e:	2100      	movs	r1, #0
 8000340:	3e01      	subs	r6, #1
 8000342:	1824      	adds	r4, r4, r0
 8000344:	414d      	adcs	r5, r1
 8000346:	2e00      	cmp	r6, #0
 8000348:	d006      	beq.n	8000358 <__udivmoddi4+0xe8>
 800034a:	42ab      	cmp	r3, r5
 800034c:	d9ee      	bls.n	800032c <__udivmoddi4+0xbc>
 800034e:	3e01      	subs	r6, #1
 8000350:	1924      	adds	r4, r4, r4
 8000352:	416d      	adcs	r5, r5
 8000354:	2e00      	cmp	r6, #0
 8000356:	d1f8      	bne.n	800034a <__udivmoddi4+0xda>
 8000358:	9800      	ldr	r0, [sp, #0]
 800035a:	9901      	ldr	r1, [sp, #4]
 800035c:	4653      	mov	r3, sl
 800035e:	1900      	adds	r0, r0, r4
 8000360:	4169      	adcs	r1, r5
 8000362:	2b00      	cmp	r3, #0
 8000364:	db23      	blt.n	80003ae <__udivmoddi4+0x13e>
 8000366:	002b      	movs	r3, r5
 8000368:	4652      	mov	r2, sl
 800036a:	40d3      	lsrs	r3, r2
 800036c:	002a      	movs	r2, r5
 800036e:	4664      	mov	r4, ip
 8000370:	40e2      	lsrs	r2, r4
 8000372:	001c      	movs	r4, r3
 8000374:	4653      	mov	r3, sl
 8000376:	0015      	movs	r5, r2
 8000378:	2b00      	cmp	r3, #0
 800037a:	db2d      	blt.n	80003d8 <__udivmoddi4+0x168>
 800037c:	0026      	movs	r6, r4
 800037e:	4657      	mov	r7, sl
 8000380:	40be      	lsls	r6, r7
 8000382:	0033      	movs	r3, r6
 8000384:	0026      	movs	r6, r4
 8000386:	4667      	mov	r7, ip
 8000388:	40be      	lsls	r6, r7
 800038a:	0032      	movs	r2, r6
 800038c:	1a80      	subs	r0, r0, r2
 800038e:	4199      	sbcs	r1, r3
 8000390:	9000      	str	r0, [sp, #0]
 8000392:	9101      	str	r1, [sp, #4]
 8000394:	e7ac      	b.n	80002f0 <__udivmoddi4+0x80>
 8000396:	4662      	mov	r2, ip
 8000398:	2320      	movs	r3, #32
 800039a:	1a9b      	subs	r3, r3, r2
 800039c:	464a      	mov	r2, r9
 800039e:	40da      	lsrs	r2, r3
 80003a0:	4661      	mov	r1, ip
 80003a2:	0013      	movs	r3, r2
 80003a4:	4642      	mov	r2, r8
 80003a6:	408a      	lsls	r2, r1
 80003a8:	0017      	movs	r7, r2
 80003aa:	431f      	orrs	r7, r3
 80003ac:	e780      	b.n	80002b0 <__udivmoddi4+0x40>
 80003ae:	4662      	mov	r2, ip
 80003b0:	2320      	movs	r3, #32
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	002a      	movs	r2, r5
 80003b6:	4666      	mov	r6, ip
 80003b8:	409a      	lsls	r2, r3
 80003ba:	0023      	movs	r3, r4
 80003bc:	40f3      	lsrs	r3, r6
 80003be:	4313      	orrs	r3, r2
 80003c0:	e7d4      	b.n	800036c <__udivmoddi4+0xfc>
 80003c2:	4662      	mov	r2, ip
 80003c4:	2320      	movs	r3, #32
 80003c6:	2100      	movs	r1, #0
 80003c8:	1a9b      	subs	r3, r3, r2
 80003ca:	2200      	movs	r2, #0
 80003cc:	9100      	str	r1, [sp, #0]
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	2201      	movs	r2, #1
 80003d2:	40da      	lsrs	r2, r3
 80003d4:	9201      	str	r2, [sp, #4]
 80003d6:	e780      	b.n	80002da <__udivmoddi4+0x6a>
 80003d8:	2320      	movs	r3, #32
 80003da:	4662      	mov	r2, ip
 80003dc:	0026      	movs	r6, r4
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	40de      	lsrs	r6, r3
 80003e2:	002f      	movs	r7, r5
 80003e4:	46b0      	mov	r8, r6
 80003e6:	4666      	mov	r6, ip
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	4646      	mov	r6, r8
 80003ec:	003b      	movs	r3, r7
 80003ee:	4333      	orrs	r3, r6
 80003f0:	e7c8      	b.n	8000384 <__udivmoddi4+0x114>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	1c08      	adds	r0, r1, #0
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000448:	b510      	push	{r4, lr}
 800044a:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <HAL_InitTick+0x2c>)
 800044e:	6818      	ldr	r0, [r3, #0]
 8000450:	21fa      	movs	r1, #250	; 0xfa
 8000452:	0089      	lsls	r1, r1, #2
 8000454:	f7ff fe60 	bl	8000118 <__udivsi3>
 8000458:	f000 f878 	bl	800054c <HAL_SYSTICK_Config>
 800045c:	2800      	cmp	r0, #0
 800045e:	d001      	beq.n	8000464 <HAL_InitTick+0x1c>
  {
    status = HAL_ERROR;
 8000460:	2001      	movs	r0, #1
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
  }

  /* Return function status */
  return status;
}
 8000462:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000464:	3001      	adds	r0, #1
 8000466:	2200      	movs	r2, #0
 8000468:	0021      	movs	r1, r4
 800046a:	4240      	negs	r0, r0
 800046c:	f000 f834 	bl	80004d8 <HAL_NVIC_SetPriority>
  HAL_StatusTypeDef  status = HAL_OK;
 8000470:	2000      	movs	r0, #0
 8000472:	e7f6      	b.n	8000462 <HAL_InitTick+0x1a>
 8000474:	20000000 	.word	0x20000000

08000478 <HAL_Init>:
{
 8000478:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800047a:	4a08      	ldr	r2, [pc, #32]	; (800049c <HAL_Init+0x24>)
 800047c:	6813      	ldr	r3, [r2, #0]
 800047e:	2140      	movs	r1, #64	; 0x40
 8000480:	430b      	orrs	r3, r1
 8000482:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ffdf 	bl	8000448 <HAL_InitTick>
 800048a:	1e04      	subs	r4, r0, #0
 800048c:	d002      	beq.n	8000494 <HAL_Init+0x1c>
    status = HAL_ERROR;
 800048e:	2401      	movs	r4, #1
}
 8000490:	0020      	movs	r0, r4
 8000492:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000494:	f001 ff8e 	bl	80023b4 <HAL_MspInit>
 8000498:	e7fa      	b.n	8000490 <HAL_Init+0x18>
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	40022000 	.word	0x40022000

080004a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80004a0:	4a02      	ldr	r2, [pc, #8]	; (80004ac <HAL_IncTick+0xc>)
 80004a2:	6813      	ldr	r3, [r2, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	6013      	str	r3, [r2, #0]
}
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	20000130 	.word	0x20000130

080004b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004b0:	4b01      	ldr	r3, [pc, #4]	; (80004b8 <HAL_GetTick+0x8>)
 80004b2:	6818      	ldr	r0, [r3, #0]
}
 80004b4:	4770      	bx	lr
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	20000130 	.word	0x20000130

080004bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80004c0:	f7ff fff6 	bl	80004b0 <HAL_GetTick>
 80004c4:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004c6:	1c63      	adds	r3, r4, #1
 80004c8:	d000      	beq.n	80004cc <HAL_Delay+0x10>
  {
    wait++;
 80004ca:	3401      	adds	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 80004cc:	f7ff fff0 	bl	80004b0 <HAL_GetTick>
 80004d0:	1b40      	subs	r0, r0, r5
 80004d2:	42a0      	cmp	r0, r4
 80004d4:	d3fa      	bcc.n	80004cc <HAL_Delay+0x10>
  {
  }
}
 80004d6:	bd70      	pop	{r4, r5, r6, pc}

080004d8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004d8:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004da:	2800      	cmp	r0, #0
 80004dc:	db11      	blt.n	8000502 <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004de:	0884      	lsrs	r4, r0, #2
 80004e0:	4d13      	ldr	r5, [pc, #76]	; (8000530 <HAL_NVIC_SetPriority+0x58>)
 80004e2:	34c0      	adds	r4, #192	; 0xc0
 80004e4:	00a4      	lsls	r4, r4, #2
 80004e6:	5962      	ldr	r2, [r4, r5]
 80004e8:	2303      	movs	r3, #3
 80004ea:	4018      	ands	r0, r3
 80004ec:	00c0      	lsls	r0, r0, #3
 80004ee:	33fc      	adds	r3, #252	; 0xfc
 80004f0:	001e      	movs	r6, r3
 80004f2:	4086      	lsls	r6, r0
 80004f4:	43b2      	bics	r2, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f6:	0189      	lsls	r1, r1, #6
 80004f8:	400b      	ands	r3, r1
 80004fa:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004fc:	4313      	orrs	r3, r2
 80004fe:	5163      	str	r3, [r4, r5]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000500:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000502:	b2c0      	uxtb	r0, r0
 8000504:	220f      	movs	r2, #15
 8000506:	4002      	ands	r2, r0
 8000508:	3a08      	subs	r2, #8
 800050a:	0892      	lsrs	r2, r2, #2
 800050c:	3206      	adds	r2, #6
 800050e:	0092      	lsls	r2, r2, #2
 8000510:	4b08      	ldr	r3, [pc, #32]	; (8000534 <HAL_NVIC_SetPriority+0x5c>)
 8000512:	18d3      	adds	r3, r2, r3
 8000514:	685d      	ldr	r5, [r3, #4]
 8000516:	2403      	movs	r4, #3
 8000518:	4020      	ands	r0, r4
 800051a:	00c0      	lsls	r0, r0, #3
 800051c:	22ff      	movs	r2, #255	; 0xff
 800051e:	0014      	movs	r4, r2
 8000520:	4084      	lsls	r4, r0
 8000522:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000524:	0189      	lsls	r1, r1, #6
 8000526:	400a      	ands	r2, r1
 8000528:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800052a:	432a      	orrs	r2, r5
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	e7e7      	b.n	8000500 <HAL_NVIC_SetPriority+0x28>
 8000530:	e000e100 	.word	0xe000e100
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000538:	231f      	movs	r3, #31
 800053a:	4018      	ands	r0, r3
 800053c:	3b1e      	subs	r3, #30
 800053e:	4083      	lsls	r3, r0
 8000540:	4a01      	ldr	r2, [pc, #4]	; (8000548 <HAL_NVIC_EnableIRQ+0x10>)
 8000542:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000544:	4770      	bx	lr
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	e000e100 	.word	0xe000e100

0800054c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800054c:	3801      	subs	r0, #1
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <HAL_SYSTICK_Config+0x2c>)
 8000550:	4298      	cmp	r0, r3
 8000552:	d80f      	bhi.n	8000574 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000554:	4a09      	ldr	r2, [pc, #36]	; (800057c <HAL_SYSTICK_Config+0x30>)
 8000556:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000558:	4809      	ldr	r0, [pc, #36]	; (8000580 <HAL_SYSTICK_Config+0x34>)
 800055a:	6a03      	ldr	r3, [r0, #32]
 800055c:	021b      	lsls	r3, r3, #8
 800055e:	0a1b      	lsrs	r3, r3, #8
 8000560:	21c0      	movs	r1, #192	; 0xc0
 8000562:	0609      	lsls	r1, r1, #24
 8000564:	430b      	orrs	r3, r1
 8000566:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000568:	2300      	movs	r3, #0
 800056a:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800056c:	3307      	adds	r3, #7
 800056e:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000570:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000572:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000574:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000576:	e7fc      	b.n	8000572 <HAL_SYSTICK_Config+0x26>
 8000578:	00ffffff 	.word	0x00ffffff
 800057c:	e000e010 	.word	0xe000e010
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000584:	b570      	push	{r4, r5, r6, lr}
 8000586:	1e04      	subs	r4, r0, #0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000588:	d03d      	beq.n	8000606 <HAL_DMA_Init+0x82>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800058a:	6805      	ldr	r5, [r0, #0]
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <HAL_DMA_Init+0x88>)
 800058e:	18e8      	adds	r0, r5, r3
 8000590:	2114      	movs	r1, #20
 8000592:	f7ff fdc1 	bl	8000118 <__udivsi3>
 8000596:	0080      	lsls	r0, r0, #2
 8000598:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800059a:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <HAL_DMA_Init+0x8c>)
 800059c:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800059e:	2325      	movs	r3, #37	; 0x25
 80005a0:	2202      	movs	r2, #2
 80005a2:	54e2      	strb	r2, [r4, r3]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80005a4:	682b      	ldr	r3, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80005a6:	4a1b      	ldr	r2, [pc, #108]	; (8000614 <HAL_DMA_Init+0x90>)
 80005a8:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80005aa:	68a3      	ldr	r3, [r4, #8]
 80005ac:	68e1      	ldr	r1, [r4, #12]
 80005ae:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80005b0:	6921      	ldr	r1, [r4, #16]
 80005b2:	430b      	orrs	r3, r1
 80005b4:	6961      	ldr	r1, [r4, #20]
 80005b6:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80005b8:	69a1      	ldr	r1, [r4, #24]
 80005ba:	430b      	orrs	r3, r1
 80005bc:	69e1      	ldr	r1, [r4, #28]
 80005be:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80005c0:	6a21      	ldr	r1, [r4, #32]
 80005c2:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80005c4:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80005c6:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	01db      	lsls	r3, r3, #7
 80005cc:	68a2      	ldr	r2, [r4, #8]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d010      	beq.n	80005f4 <HAL_DMA_Init+0x70>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <HAL_DMA_Init+0x94>)
 80005d4:	6819      	ldr	r1, [r3, #0]
 80005d6:	221c      	movs	r2, #28
 80005d8:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80005da:	4015      	ands	r5, r2
 80005dc:	200f      	movs	r0, #15
 80005de:	40a8      	lsls	r0, r5
 80005e0:	4381      	bics	r1, r0
 80005e2:	6019      	str	r1, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80005e4:	6819      	ldr	r1, [r3, #0]
 80005e6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80005e8:	4002      	ands	r2, r0
 80005ea:	6860      	ldr	r0, [r4, #4]
 80005ec:	4090      	lsls	r0, r2
 80005ee:	0002      	movs	r2, r0
 80005f0:	430a      	orrs	r2, r1
 80005f2:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	63e3      	str	r3, [r4, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80005f8:	2225      	movs	r2, #37	; 0x25
 80005fa:	2101      	movs	r1, #1
 80005fc:	54a1      	strb	r1, [r4, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80005fe:	3a01      	subs	r2, #1
 8000600:	54a3      	strb	r3, [r4, r2]

  return HAL_OK;
 8000602:	2000      	movs	r0, #0
}
 8000604:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000606:	2001      	movs	r0, #1
 8000608:	e7fc      	b.n	8000604 <HAL_DMA_Init+0x80>
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	bffdfff8 	.word	0xbffdfff8
 8000610:	40020000 	.word	0x40020000
 8000614:	ffff800f 	.word	0xffff800f
 8000618:	400200a8 	.word	0x400200a8

0800061c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800061c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800061e:	2325      	movs	r3, #37	; 0x25
 8000620:	5cc3      	ldrb	r3, [r0, r3]
 8000622:	2b02      	cmp	r3, #2
 8000624:	d006      	beq.n	8000634 <HAL_DMA_Abort+0x18>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000626:	2304      	movs	r3, #4
 8000628:	63c3      	str	r3, [r0, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800062a:	3320      	adds	r3, #32
 800062c:	2200      	movs	r2, #0
 800062e:	54c2      	strb	r2, [r0, r3]

    return HAL_ERROR;
 8000630:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    return status;
  }
}
 8000632:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000634:	6802      	ldr	r2, [r0, #0]
 8000636:	6813      	ldr	r3, [r2, #0]
 8000638:	210e      	movs	r1, #14
 800063a:	438b      	bics	r3, r1
 800063c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800063e:	6801      	ldr	r1, [r0, #0]
 8000640:	680a      	ldr	r2, [r1, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	439a      	bics	r2, r3
 8000646:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000648:	221c      	movs	r2, #28
 800064a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800064c:	400a      	ands	r2, r1
 800064e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000650:	001c      	movs	r4, r3
 8000652:	4094      	lsls	r4, r2
 8000654:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000656:	2225      	movs	r2, #37	; 0x25
 8000658:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800065a:	3323      	adds	r3, #35	; 0x23
 800065c:	2200      	movs	r2, #0
 800065e:	54c2      	strb	r2, [r0, r3]
    return status;
 8000660:	2000      	movs	r0, #0
 8000662:	e7e6      	b.n	8000632 <HAL_DMA_Abort+0x16>

08000664 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000664:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000666:	2325      	movs	r3, #37	; 0x25
 8000668:	5cc3      	ldrb	r3, [r0, r3]
 800066a:	2b02      	cmp	r3, #2
 800066c:	d003      	beq.n	8000676 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800066e:	2304      	movs	r3, #4
 8000670:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000672:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8000674:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000676:	6802      	ldr	r2, [r0, #0]
 8000678:	6813      	ldr	r3, [r2, #0]
 800067a:	210e      	movs	r1, #14
 800067c:	438b      	bics	r3, r1
 800067e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000680:	6801      	ldr	r1, [r0, #0]
 8000682:	680a      	ldr	r2, [r1, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	439a      	bics	r2, r3
 8000688:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800068a:	221c      	movs	r2, #28
 800068c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800068e:	400a      	ands	r2, r1
 8000690:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000692:	001c      	movs	r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000698:	2225      	movs	r2, #37	; 0x25
 800069a:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800069c:	3323      	adds	r3, #35	; 0x23
 800069e:	2200      	movs	r2, #0
 80006a0:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 80006a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <HAL_DMA_Abort_IT+0x4a>
      hdma->XferAbortCallback(hdma);
 80006a8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80006aa:	2000      	movs	r0, #0
 80006ac:	e7e2      	b.n	8000674 <HAL_DMA_Abort_IT+0x10>
 80006ae:	2000      	movs	r0, #0
 80006b0:	e7e0      	b.n	8000674 <HAL_DMA_Abort_IT+0x10>

080006b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80006b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80006b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80006b6:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80006b8:	6804      	ldr	r4, [r0, #0]
 80006ba:	6825      	ldr	r5, [r4, #0]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80006bc:	231c      	movs	r3, #28
 80006be:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80006c0:	4013      	ands	r3, r2
 80006c2:	2204      	movs	r2, #4
 80006c4:	409a      	lsls	r2, r3
 80006c6:	4211      	tst	r1, r2
 80006c8:	d014      	beq.n	80006f4 <HAL_DMA_IRQHandler+0x42>
 80006ca:	076a      	lsls	r2, r5, #29
 80006cc:	d512      	bpl.n	80006f4 <HAL_DMA_IRQHandler+0x42>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	069b      	lsls	r3, r3, #26
 80006d2:	d403      	bmi.n	80006dc <HAL_DMA_IRQHandler+0x2a>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80006d4:	6823      	ldr	r3, [r4, #0]
 80006d6:	2204      	movs	r2, #4
 80006d8:	4393      	bics	r3, r2
 80006da:	6023      	str	r3, [r4, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80006dc:	221c      	movs	r2, #28
 80006de:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80006e0:	401a      	ands	r2, r3
 80006e2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80006e4:	2304      	movs	r3, #4
 80006e6:	4093      	lsls	r3, r2
 80006e8:	604b      	str	r3, [r1, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80006ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d000      	beq.n	80006f2 <HAL_DMA_IRQHandler+0x40>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80006f0:	4798      	blx	r3
  else
  {
    /* Nothing To Do */
  }
  return;
}
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80006f4:	2202      	movs	r2, #2
 80006f6:	409a      	lsls	r2, r3
 80006f8:	4211      	tst	r1, r2
 80006fa:	d01a      	beq.n	8000732 <HAL_DMA_IRQHandler+0x80>
 80006fc:	07aa      	lsls	r2, r5, #30
 80006fe:	d518      	bpl.n	8000732 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000700:	6823      	ldr	r3, [r4, #0]
 8000702:	069b      	lsls	r3, r3, #26
 8000704:	d406      	bmi.n	8000714 <HAL_DMA_IRQHandler+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000706:	6823      	ldr	r3, [r4, #0]
 8000708:	220a      	movs	r2, #10
 800070a:	4393      	bics	r3, r2
 800070c:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800070e:	2325      	movs	r3, #37	; 0x25
 8000710:	3a09      	subs	r2, #9
 8000712:	54c2      	strb	r2, [r0, r3]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000714:	221c      	movs	r2, #28
 8000716:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000718:	401a      	ands	r2, r3
 800071a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800071c:	2302      	movs	r3, #2
 800071e:	4093      	lsls	r3, r2
 8000720:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000722:	2324      	movs	r3, #36	; 0x24
 8000724:	2200      	movs	r2, #0
 8000726:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 8000728:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800072a:	2b00      	cmp	r3, #0
 800072c:	d0e1      	beq.n	80006f2 <HAL_DMA_IRQHandler+0x40>
      hdma->XferCpltCallback(hdma);
 800072e:	4798      	blx	r3
 8000730:	e7df      	b.n	80006f2 <HAL_DMA_IRQHandler+0x40>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000732:	2208      	movs	r2, #8
 8000734:	409a      	lsls	r2, r3
 8000736:	4211      	tst	r1, r2
 8000738:	d0db      	beq.n	80006f2 <HAL_DMA_IRQHandler+0x40>
 800073a:	072b      	lsls	r3, r5, #28
 800073c:	d5d9      	bpl.n	80006f2 <HAL_DMA_IRQHandler+0x40>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800073e:	6823      	ldr	r3, [r4, #0]
 8000740:	220e      	movs	r2, #14
 8000742:	4393      	bics	r3, r2
 8000744:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000746:	320e      	adds	r2, #14
 8000748:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800074a:	401a      	ands	r2, r3
 800074c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800074e:	2301      	movs	r3, #1
 8000750:	001c      	movs	r4, r3
 8000752:	4094      	lsls	r4, r2
 8000754:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000756:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000758:	2225      	movs	r2, #37	; 0x25
 800075a:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800075c:	3323      	adds	r3, #35	; 0x23
 800075e:	2200      	movs	r2, #0
 8000760:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8000762:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000764:	2b00      	cmp	r3, #0
 8000766:	d0c4      	beq.n	80006f2 <HAL_DMA_IRQHandler+0x40>
      hdma->XferErrorCallback(hdma);
 8000768:	4798      	blx	r3
  return;
 800076a:	e7c2      	b.n	80006f2 <HAL_DMA_IRQHandler+0x40>

0800076c <HAL_DMA_GetError>:
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
  return hdma->ErrorCode;
 800076c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 800076e:	4770      	bx	lr

08000770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000772:	46c6      	mov	lr, r8
 8000774:	b500      	push	{lr}
  uint32_t position = 0x00U;
 8000776:	2300      	movs	r3, #0
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000778:	e038      	b.n	80007ec <HAL_GPIO_Init+0x7c>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800077a:	2605      	movs	r6, #5
 800077c:	e000      	b.n	8000780 <HAL_GPIO_Init+0x10>
 800077e:	2600      	movs	r6, #0
 8000780:	40ae      	lsls	r6, r5
 8000782:	0035      	movs	r5, r6
 8000784:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000786:	3402      	adds	r4, #2
 8000788:	00a4      	lsls	r4, r4, #2
 800078a:	4e58      	ldr	r6, [pc, #352]	; (80008ec <HAL_GPIO_Init+0x17c>)
 800078c:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800078e:	4c58      	ldr	r4, [pc, #352]	; (80008f0 <HAL_GPIO_Init+0x180>)
 8000790:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000792:	4642      	mov	r2, r8
 8000794:	43d4      	mvns	r4, r2
 8000796:	002e      	movs	r6, r5
 8000798:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800079a:	684a      	ldr	r2, [r1, #4]
 800079c:	03d2      	lsls	r2, r2, #15
 800079e:	d502      	bpl.n	80007a6 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 80007a0:	4642      	mov	r2, r8
 80007a2:	4315      	orrs	r5, r2
 80007a4:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 80007a6:	4d52      	ldr	r5, [pc, #328]	; (80008f0 <HAL_GPIO_Init+0x180>)
 80007a8:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 80007aa:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 80007ac:	002e      	movs	r6, r5
 80007ae:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007b0:	684a      	ldr	r2, [r1, #4]
 80007b2:	0392      	lsls	r2, r2, #14
 80007b4:	d502      	bpl.n	80007bc <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 80007b6:	4642      	mov	r2, r8
 80007b8:	4315      	orrs	r5, r2
 80007ba:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 80007bc:	4d4c      	ldr	r5, [pc, #304]	; (80008f0 <HAL_GPIO_Init+0x180>)
 80007be:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007c0:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 80007c2:	002e      	movs	r6, r5
 80007c4:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007c6:	684a      	ldr	r2, [r1, #4]
 80007c8:	02d2      	lsls	r2, r2, #11
 80007ca:	d502      	bpl.n	80007d2 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 80007cc:	4642      	mov	r2, r8
 80007ce:	4315      	orrs	r5, r2
 80007d0:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 80007d2:	4d47      	ldr	r5, [pc, #284]	; (80008f0 <HAL_GPIO_Init+0x180>)
 80007d4:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80007d6:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 80007d8:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007da:	684a      	ldr	r2, [r1, #4]
 80007dc:	0292      	lsls	r2, r2, #10
 80007de:	d502      	bpl.n	80007e6 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 80007e0:	4642      	mov	r2, r8
 80007e2:	432a      	orrs	r2, r5
 80007e4:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 80007e6:	4a42      	ldr	r2, [pc, #264]	; (80008f0 <HAL_GPIO_Init+0x180>)
 80007e8:	60d4      	str	r4, [r2, #12]
      }
    }
    position++;
 80007ea:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 80007ec:	680a      	ldr	r2, [r1, #0]
 80007ee:	0014      	movs	r4, r2
 80007f0:	40dc      	lsrs	r4, r3
 80007f2:	d077      	beq.n	80008e4 <HAL_GPIO_Init+0x174>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80007f4:	2401      	movs	r4, #1
 80007f6:	409c      	lsls	r4, r3
 80007f8:	4022      	ands	r2, r4
 80007fa:	4690      	mov	r8, r2
    if(iocurrent)
 80007fc:	d0f5      	beq.n	80007ea <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80007fe:	684d      	ldr	r5, [r1, #4]
 8000800:	2d02      	cmp	r5, #2
 8000802:	d001      	beq.n	8000808 <HAL_GPIO_Init+0x98>
 8000804:	2d12      	cmp	r5, #18
 8000806:	d10e      	bne.n	8000826 <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 8000808:	08dd      	lsrs	r5, r3, #3
 800080a:	3508      	adds	r5, #8
 800080c:	00ad      	lsls	r5, r5, #2
 800080e:	582f      	ldr	r7, [r5, r0]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000810:	2607      	movs	r6, #7
 8000812:	401e      	ands	r6, r3
 8000814:	00b6      	lsls	r6, r6, #2
 8000816:	220f      	movs	r2, #15
 8000818:	40b2      	lsls	r2, r6
 800081a:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 800081c:	690a      	ldr	r2, [r1, #16]
 800081e:	40b2      	lsls	r2, r6
 8000820:	0016      	movs	r6, r2
 8000822:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000824:	502e      	str	r6, [r5, r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000826:	684d      	ldr	r5, [r1, #4]
 8000828:	1e6e      	subs	r6, r5, #1
 800082a:	2e01      	cmp	r6, #1
 800082c:	d903      	bls.n	8000836 <HAL_GPIO_Init+0xc6>
 800082e:	2d11      	cmp	r5, #17
 8000830:	d001      	beq.n	8000836 <HAL_GPIO_Init+0xc6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000832:	2d12      	cmp	r5, #18
 8000834:	d112      	bne.n	800085c <HAL_GPIO_Init+0xec>
        temp = GPIOx->OSPEEDR;
 8000836:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000838:	005f      	lsls	r7, r3, #1
 800083a:	2603      	movs	r6, #3
 800083c:	40be      	lsls	r6, r7
 800083e:	43b5      	bics	r5, r6
 8000840:	002e      	movs	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000842:	68cd      	ldr	r5, [r1, #12]
 8000844:	40bd      	lsls	r5, r7
 8000846:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000848:	6085      	str	r5, [r0, #8]
        temp= GPIOx->OTYPER;
 800084a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800084c:	43a5      	bics	r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800084e:	684a      	ldr	r2, [r1, #4]
 8000850:	0916      	lsrs	r6, r2, #4
 8000852:	2401      	movs	r4, #1
 8000854:	4034      	ands	r4, r6
 8000856:	409c      	lsls	r4, r3
 8000858:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 800085a:	6044      	str	r4, [r0, #4]
      temp = GPIOx->MODER;
 800085c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800085e:	005e      	lsls	r6, r3, #1
 8000860:	2403      	movs	r4, #3
 8000862:	0025      	movs	r5, r4
 8000864:	40b5      	lsls	r5, r6
 8000866:	43ed      	mvns	r5, r5
 8000868:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800086a:	684a      	ldr	r2, [r1, #4]
 800086c:	4014      	ands	r4, r2
 800086e:	40b4      	lsls	r4, r6
 8000870:	433c      	orrs	r4, r7
      GPIOx->MODER = temp;
 8000872:	6004      	str	r4, [r0, #0]
      temp = GPIOx->PUPDR;
 8000874:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000876:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000878:	688c      	ldr	r4, [r1, #8]
 800087a:	40b4      	lsls	r4, r6
 800087c:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800087e:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000880:	684a      	ldr	r2, [r1, #4]
 8000882:	00d2      	lsls	r2, r2, #3
 8000884:	d5b1      	bpl.n	80007ea <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	4d1b      	ldr	r5, [pc, #108]	; (80008f4 <HAL_GPIO_Init+0x184>)
 8000888:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 800088a:	2601      	movs	r6, #1
 800088c:	4334      	orrs	r4, r6
 800088e:	636c      	str	r4, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8000890:	089c      	lsrs	r4, r3, #2
 8000892:	1ca5      	adds	r5, r4, #2
 8000894:	00ad      	lsls	r5, r5, #2
 8000896:	4e15      	ldr	r6, [pc, #84]	; (80008ec <HAL_GPIO_Init+0x17c>)
 8000898:	59af      	ldr	r7, [r5, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800089a:	2603      	movs	r6, #3
 800089c:	401e      	ands	r6, r3
 800089e:	00b5      	lsls	r5, r6, #2
 80008a0:	260f      	movs	r6, #15
 80008a2:	40ae      	lsls	r6, r5
 80008a4:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80008a6:	26a0      	movs	r6, #160	; 0xa0
 80008a8:	05f6      	lsls	r6, r6, #23
 80008aa:	42b0      	cmp	r0, r6
 80008ac:	d100      	bne.n	80008b0 <HAL_GPIO_Init+0x140>
 80008ae:	e766      	b.n	800077e <HAL_GPIO_Init+0xe>
 80008b0:	4e11      	ldr	r6, [pc, #68]	; (80008f8 <HAL_GPIO_Init+0x188>)
 80008b2:	42b0      	cmp	r0, r6
 80008b4:	d00e      	beq.n	80008d4 <HAL_GPIO_Init+0x164>
 80008b6:	4e11      	ldr	r6, [pc, #68]	; (80008fc <HAL_GPIO_Init+0x18c>)
 80008b8:	42b0      	cmp	r0, r6
 80008ba:	d00d      	beq.n	80008d8 <HAL_GPIO_Init+0x168>
 80008bc:	4e10      	ldr	r6, [pc, #64]	; (8000900 <HAL_GPIO_Init+0x190>)
 80008be:	42b0      	cmp	r0, r6
 80008c0:	d00c      	beq.n	80008dc <HAL_GPIO_Init+0x16c>
 80008c2:	4e10      	ldr	r6, [pc, #64]	; (8000904 <HAL_GPIO_Init+0x194>)
 80008c4:	42b0      	cmp	r0, r6
 80008c6:	d00b      	beq.n	80008e0 <HAL_GPIO_Init+0x170>
 80008c8:	4e0f      	ldr	r6, [pc, #60]	; (8000908 <HAL_GPIO_Init+0x198>)
 80008ca:	42b0      	cmp	r0, r6
 80008cc:	d100      	bne.n	80008d0 <HAL_GPIO_Init+0x160>
 80008ce:	e754      	b.n	800077a <HAL_GPIO_Init+0xa>
 80008d0:	2606      	movs	r6, #6
 80008d2:	e755      	b.n	8000780 <HAL_GPIO_Init+0x10>
 80008d4:	2601      	movs	r6, #1
 80008d6:	e753      	b.n	8000780 <HAL_GPIO_Init+0x10>
 80008d8:	2602      	movs	r6, #2
 80008da:	e751      	b.n	8000780 <HAL_GPIO_Init+0x10>
 80008dc:	2603      	movs	r6, #3
 80008de:	e74f      	b.n	8000780 <HAL_GPIO_Init+0x10>
 80008e0:	2604      	movs	r6, #4
 80008e2:	e74d      	b.n	8000780 <HAL_GPIO_Init+0x10>
  }
}
 80008e4:	bc04      	pop	{r2}
 80008e6:	4690      	mov	r8, r2
 80008e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	40010000 	.word	0x40010000
 80008f0:	40010400 	.word	0x40010400
 80008f4:	40021000 	.word	0x40021000
 80008f8:	50000400 	.word	0x50000400
 80008fc:	50000800 	.word	0x50000800
 8000900:	50000c00 	.word	0x50000c00
 8000904:	50001000 	.word	0x50001000
 8000908:	50001c00 	.word	0x50001c00

0800090c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800090c:	6903      	ldr	r3, [r0, #16]
 800090e:	420b      	tst	r3, r1
 8000910:	d101      	bne.n	8000916 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000912:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000914:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000916:	2001      	movs	r0, #1
 8000918:	e7fc      	b.n	8000914 <HAL_GPIO_ReadPin+0x8>

0800091a <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 800091a:	2a00      	cmp	r2, #0
 800091c:	d101      	bne.n	8000922 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 800091e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000920:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000922:	6181      	str	r1, [r0, #24]
 8000924:	e7fc      	b.n	8000920 <HAL_GPIO_WritePin+0x6>
	...

08000928 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000928:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800092a:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800092c:	68d9      	ldr	r1, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800092e:	230c      	movs	r3, #12
 8000930:	400b      	ands	r3, r1
 8000932:	2b08      	cmp	r3, #8
 8000934:	d042      	beq.n	80009bc <HAL_RCC_GetSysClockFreq+0x94>
 8000936:	2b0c      	cmp	r3, #12
 8000938:	d011      	beq.n	800095e <HAL_RCC_GetSysClockFreq+0x36>
 800093a:	2b04      	cmp	r3, #4
 800093c:	d009      	beq.n	8000952 <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000940:	685a      	ldr	r2, [r3, #4]
 8000942:	0b52      	lsrs	r2, r2, #13
 8000944:	2307      	movs	r3, #7
 8000946:	4013      	ands	r3, r2
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000948:	3301      	adds	r3, #1
 800094a:	2080      	movs	r0, #128	; 0x80
 800094c:	0200      	lsls	r0, r0, #8
 800094e:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8000950:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	06db      	lsls	r3, r3, #27
 8000958:	d532      	bpl.n	80009c0 <HAL_RCC_GetSysClockFreq+0x98>
        sysclockfreq =  (HSI_VALUE >> 2);
 800095a:	481b      	ldr	r0, [pc, #108]	; (80009c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800095c:	e7f8      	b.n	8000950 <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800095e:	0c8a      	lsrs	r2, r1, #18
 8000960:	230f      	movs	r3, #15
 8000962:	4013      	ands	r3, r2
 8000964:	4a19      	ldr	r2, [pc, #100]	; (80009cc <HAL_RCC_GetSysClockFreq+0xa4>)
 8000966:	5cd0      	ldrb	r0, [r2, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000968:	0d89      	lsrs	r1, r1, #22
 800096a:	2203      	movs	r2, #3
 800096c:	4011      	ands	r1, r2
 800096e:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	03db      	lsls	r3, r3, #15
 8000976:	d40d      	bmi.n	8000994 <HAL_RCC_GetSysClockFreq+0x6c>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	06db      	lsls	r3, r3, #27
 800097e:	d513      	bpl.n	80009a8 <HAL_RCC_GetSysClockFreq+0x80>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000980:	0142      	lsls	r2, r0, #5
 8000982:	1a12      	subs	r2, r2, r0
 8000984:	0193      	lsls	r3, r2, #6
 8000986:	1a9b      	subs	r3, r3, r2
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	181b      	adds	r3, r3, r0
 800098c:	0218      	lsls	r0, r3, #8
 800098e:	f7ff fbc3 	bl	8000118 <__udivsi3>
 8000992:	e7dd      	b.n	8000950 <HAL_RCC_GetSysClockFreq+0x28>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000994:	0142      	lsls	r2, r0, #5
 8000996:	1a12      	subs	r2, r2, r0
 8000998:	0193      	lsls	r3, r2, #6
 800099a:	1a9b      	subs	r3, r3, r2
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	181b      	adds	r3, r3, r0
 80009a0:	0258      	lsls	r0, r3, #9
 80009a2:	f7ff fbb9 	bl	8000118 <__udivsi3>
 80009a6:	e7d3      	b.n	8000950 <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (HSI_VALUE * pllm) / plld;
 80009a8:	0142      	lsls	r2, r0, #5
 80009aa:	1a12      	subs	r2, r2, r0
 80009ac:	0193      	lsls	r3, r2, #6
 80009ae:	1a9b      	subs	r3, r3, r2
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	181b      	adds	r3, r3, r0
 80009b4:	0298      	lsls	r0, r3, #10
 80009b6:	f7ff fbaf 	bl	8000118 <__udivsi3>
 80009ba:	e7c9      	b.n	8000950 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <HAL_RCC_GetSysClockFreq+0xa8>)
 80009be:	e7c7      	b.n	8000950 <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <HAL_RCC_GetSysClockFreq+0xac>)
  return sysclockfreq;
 80009c2:	e7c5      	b.n	8000950 <HAL_RCC_GetSysClockFreq+0x28>
 80009c4:	40021000 	.word	0x40021000
 80009c8:	003d0900 	.word	0x003d0900
 80009cc:	08002994 	.word	0x08002994
 80009d0:	007a1200 	.word	0x007a1200
 80009d4:	00f42400 	.word	0x00f42400

080009d8 <HAL_RCC_OscConfig>:
{
 80009d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009da:	b083      	sub	sp, #12
 80009dc:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 80009de:	d100      	bne.n	80009e2 <HAL_RCC_OscConfig+0xa>
 80009e0:	e29f      	b.n	8000f22 <HAL_RCC_OscConfig+0x54a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009e2:	4bc4      	ldr	r3, [pc, #784]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 80009e4:	68da      	ldr	r2, [r3, #12]
 80009e6:	250c      	movs	r5, #12
 80009e8:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80009ea:	68da      	ldr	r2, [r3, #12]
 80009ec:	2680      	movs	r6, #128	; 0x80
 80009ee:	0276      	lsls	r6, r6, #9
 80009f0:	4016      	ands	r6, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009f2:	6803      	ldr	r3, [r0, #0]
 80009f4:	07db      	lsls	r3, r3, #31
 80009f6:	d536      	bpl.n	8000a66 <HAL_RCC_OscConfig+0x8e>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80009f8:	2d08      	cmp	r5, #8
 80009fa:	d02c      	beq.n	8000a56 <HAL_RCC_OscConfig+0x7e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80009fc:	2d0c      	cmp	r5, #12
 80009fe:	d028      	beq.n	8000a52 <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a00:	6863      	ldr	r3, [r4, #4]
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	0252      	lsls	r2, r2, #9
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d055      	beq.n	8000ab6 <HAL_RCC_OscConfig+0xde>
 8000a0a:	22a0      	movs	r2, #160	; 0xa0
 8000a0c:	02d2      	lsls	r2, r2, #11
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d058      	beq.n	8000ac4 <HAL_RCC_OscConfig+0xec>
 8000a12:	4bb8      	ldr	r3, [pc, #736]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	49b8      	ldr	r1, [pc, #736]	; (8000cf8 <HAL_RCC_OscConfig+0x320>)
 8000a18:	400a      	ands	r2, r1
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	0249      	lsls	r1, r1, #9
 8000a22:	400a      	ands	r2, r1
 8000a24:	9201      	str	r2, [sp, #4]
 8000a26:	9a01      	ldr	r2, [sp, #4]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	49b4      	ldr	r1, [pc, #720]	; (8000cfc <HAL_RCC_OscConfig+0x324>)
 8000a2c:	400a      	ands	r2, r1
 8000a2e:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a30:	6863      	ldr	r3, [r4, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d052      	beq.n	8000adc <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8000a36:	f7ff fd3b 	bl	80004b0 <HAL_GetTick>
 8000a3a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000a3c:	4bad      	ldr	r3, [pc, #692]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	039b      	lsls	r3, r3, #14
 8000a42:	d410      	bmi.n	8000a66 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a44:	f7ff fd34 	bl	80004b0 <HAL_GetTick>
 8000a48:	1bc0      	subs	r0, r0, r7
 8000a4a:	2864      	cmp	r0, #100	; 0x64
 8000a4c:	d9f6      	bls.n	8000a3c <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
 8000a4e:	2003      	movs	r0, #3
 8000a50:	e268      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000a52:	2e00      	cmp	r6, #0
 8000a54:	d0d4      	beq.n	8000a00 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a56:	4ba7      	ldr	r3, [pc, #668]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	039b      	lsls	r3, r3, #14
 8000a5c:	d503      	bpl.n	8000a66 <HAL_RCC_OscConfig+0x8e>
 8000a5e:	6863      	ldr	r3, [r4, #4]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d100      	bne.n	8000a66 <HAL_RCC_OscConfig+0x8e>
 8000a64:	e260      	b.n	8000f28 <HAL_RCC_OscConfig+0x550>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a66:	6823      	ldr	r3, [r4, #0]
 8000a68:	079b      	lsls	r3, r3, #30
 8000a6a:	d56c      	bpl.n	8000b46 <HAL_RCC_OscConfig+0x16e>
    hsi_state = RCC_OscInitStruct->HSIState;
 8000a6c:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000a6e:	069a      	lsls	r2, r3, #26
 8000a70:	d505      	bpl.n	8000a7e <HAL_RCC_OscConfig+0xa6>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000a72:	48a0      	ldr	r0, [pc, #640]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000a74:	6802      	ldr	r2, [r0, #0]
 8000a76:	2120      	movs	r1, #32
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000a7c:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000a7e:	2d04      	cmp	r5, #4
 8000a80:	d03c      	beq.n	8000afc <HAL_RCC_OscConfig+0x124>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000a82:	2d0c      	cmp	r5, #12
 8000a84:	d038      	beq.n	8000af8 <HAL_RCC_OscConfig+0x120>
      if(hsi_state != RCC_HSI_OFF)
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d100      	bne.n	8000a8c <HAL_RCC_OscConfig+0xb4>
 8000a8a:	e0ae      	b.n	8000bea <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000a8c:	4999      	ldr	r1, [pc, #612]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000a8e:	680a      	ldr	r2, [r1, #0]
 8000a90:	2009      	movs	r0, #9
 8000a92:	4382      	bics	r2, r0
 8000a94:	4313      	orrs	r3, r2
 8000a96:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8000a98:	f7ff fd0a 	bl	80004b0 <HAL_GetTick>
 8000a9c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000a9e:	4b95      	ldr	r3, [pc, #596]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	075b      	lsls	r3, r3, #29
 8000aa4:	d500      	bpl.n	8000aa8 <HAL_RCC_OscConfig+0xd0>
 8000aa6:	e097      	b.n	8000bd8 <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aa8:	f7ff fd02 	bl	80004b0 <HAL_GetTick>
 8000aac:	1b80      	subs	r0, r0, r6
 8000aae:	2802      	cmp	r0, #2
 8000ab0:	d9f5      	bls.n	8000a9e <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8000ab2:	2003      	movs	r0, #3
 8000ab4:	e236      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ab6:	4a8f      	ldr	r2, [pc, #572]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000ab8:	6811      	ldr	r1, [r2, #0]
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	025b      	lsls	r3, r3, #9
 8000abe:	430b      	orrs	r3, r1
 8000ac0:	6013      	str	r3, [r2, #0]
 8000ac2:	e7b5      	b.n	8000a30 <HAL_RCC_OscConfig+0x58>
 8000ac4:	4b8b      	ldr	r3, [pc, #556]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000ac6:	6819      	ldr	r1, [r3, #0]
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	02d2      	lsls	r2, r2, #11
 8000acc:	430a      	orrs	r2, r1
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	6819      	ldr	r1, [r3, #0]
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	0252      	lsls	r2, r2, #9
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	e7a9      	b.n	8000a30 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8000adc:	f7ff fce8 	bl	80004b0 <HAL_GetTick>
 8000ae0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000ae2:	4b84      	ldr	r3, [pc, #528]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	039b      	lsls	r3, r3, #14
 8000ae8:	d5bd      	bpl.n	8000a66 <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aea:	f7ff fce1 	bl	80004b0 <HAL_GetTick>
 8000aee:	1bc0      	subs	r0, r0, r7
 8000af0:	2864      	cmp	r0, #100	; 0x64
 8000af2:	d9f6      	bls.n	8000ae2 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8000af4:	2003      	movs	r0, #3
 8000af6:	e215      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000af8:	2e00      	cmp	r6, #0
 8000afa:	d1c4      	bne.n	8000a86 <HAL_RCC_OscConfig+0xae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000afc:	4a7d      	ldr	r2, [pc, #500]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000afe:	6812      	ldr	r2, [r2, #0]
 8000b00:	0752      	lsls	r2, r2, #29
 8000b02:	d502      	bpl.n	8000b0a <HAL_RCC_OscConfig+0x132>
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d100      	bne.n	8000b0a <HAL_RCC_OscConfig+0x132>
 8000b08:	e210      	b.n	8000f2c <HAL_RCC_OscConfig+0x554>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b0a:	4e7a      	ldr	r6, [pc, #488]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000b0c:	6872      	ldr	r2, [r6, #4]
 8000b0e:	497c      	ldr	r1, [pc, #496]	; (8000d00 <HAL_RCC_OscConfig+0x328>)
 8000b10:	400a      	ands	r2, r1
 8000b12:	6921      	ldr	r1, [r4, #16]
 8000b14:	0209      	lsls	r1, r1, #8
 8000b16:	430a      	orrs	r2, r1
 8000b18:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000b1a:	6832      	ldr	r2, [r6, #0]
 8000b1c:	2109      	movs	r1, #9
 8000b1e:	438a      	bics	r2, r1
 8000b20:	4313      	orrs	r3, r2
 8000b22:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b24:	f7ff ff00 	bl	8000928 <HAL_RCC_GetSysClockFreq>
 8000b28:	68f2      	ldr	r2, [r6, #12]
 8000b2a:	0912      	lsrs	r2, r2, #4
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	4013      	ands	r3, r2
 8000b30:	4a74      	ldr	r2, [pc, #464]	; (8000d04 <HAL_RCC_OscConfig+0x32c>)
 8000b32:	5cd3      	ldrb	r3, [r2, r3]
 8000b34:	40d8      	lsrs	r0, r3
 8000b36:	4b74      	ldr	r3, [pc, #464]	; (8000d08 <HAL_RCC_OscConfig+0x330>)
 8000b38:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fc84 	bl	8000448 <HAL_InitTick>
      if(status != HAL_OK)
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d000      	beq.n	8000b46 <HAL_RCC_OscConfig+0x16e>
 8000b44:	e1ee      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000b46:	6823      	ldr	r3, [r4, #0]
 8000b48:	06db      	lsls	r3, r3, #27
 8000b4a:	d52c      	bpl.n	8000ba6 <HAL_RCC_OscConfig+0x1ce>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000b4c:	2d00      	cmp	r5, #0
 8000b4e:	d15f      	bne.n	8000c10 <HAL_RCC_OscConfig+0x238>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b50:	4b68      	ldr	r3, [pc, #416]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	059b      	lsls	r3, r3, #22
 8000b56:	d503      	bpl.n	8000b60 <HAL_RCC_OscConfig+0x188>
 8000b58:	69e3      	ldr	r3, [r4, #28]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d100      	bne.n	8000b60 <HAL_RCC_OscConfig+0x188>
 8000b5e:	e1e7      	b.n	8000f30 <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b60:	4a64      	ldr	r2, [pc, #400]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000b62:	6853      	ldr	r3, [r2, #4]
 8000b64:	4969      	ldr	r1, [pc, #420]	; (8000d0c <HAL_RCC_OscConfig+0x334>)
 8000b66:	400b      	ands	r3, r1
 8000b68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000b6a:	430b      	orrs	r3, r1
 8000b6c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b6e:	6853      	ldr	r3, [r2, #4]
 8000b70:	021b      	lsls	r3, r3, #8
 8000b72:	0a1b      	lsrs	r3, r3, #8
 8000b74:	6a21      	ldr	r1, [r4, #32]
 8000b76:	0609      	lsls	r1, r1, #24
 8000b78:	430b      	orrs	r3, r1
 8000b7a:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000b7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b7e:	0b59      	lsrs	r1, r3, #13
 8000b80:	3101      	adds	r1, #1
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	021b      	lsls	r3, r3, #8
 8000b86:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000b88:	68d1      	ldr	r1, [r2, #12]
 8000b8a:	0909      	lsrs	r1, r1, #4
 8000b8c:	220f      	movs	r2, #15
 8000b8e:	400a      	ands	r2, r1
 8000b90:	495c      	ldr	r1, [pc, #368]	; (8000d04 <HAL_RCC_OscConfig+0x32c>)
 8000b92:	5c8a      	ldrb	r2, [r1, r2]
 8000b94:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000b96:	4a5c      	ldr	r2, [pc, #368]	; (8000d08 <HAL_RCC_OscConfig+0x330>)
 8000b98:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff fc54 	bl	8000448 <HAL_InitTick>
        if(status != HAL_OK)
 8000ba0:	2800      	cmp	r0, #0
 8000ba2:	d000      	beq.n	8000ba6 <HAL_RCC_OscConfig+0x1ce>
 8000ba4:	e1be      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ba6:	6823      	ldr	r3, [r4, #0]
 8000ba8:	071b      	lsls	r3, r3, #28
 8000baa:	d57d      	bpl.n	8000ca8 <HAL_RCC_OscConfig+0x2d0>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bac:	6963      	ldr	r3, [r4, #20]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d067      	beq.n	8000c82 <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_LSI_ENABLE();
 8000bb2:	4a50      	ldr	r2, [pc, #320]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000bb4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	430b      	orrs	r3, r1
 8000bba:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000bbc:	f7ff fc78 	bl	80004b0 <HAL_GetTick>
 8000bc0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000bc2:	4b4c      	ldr	r3, [pc, #304]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000bc6:	079b      	lsls	r3, r3, #30
 8000bc8:	d46e      	bmi.n	8000ca8 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bca:	f7ff fc71 	bl	80004b0 <HAL_GetTick>
 8000bce:	1b80      	subs	r0, r0, r6
 8000bd0:	2802      	cmp	r0, #2
 8000bd2:	d9f6      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x1ea>
          return HAL_TIMEOUT;
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	e1a5      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bd8:	4946      	ldr	r1, [pc, #280]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000bda:	684b      	ldr	r3, [r1, #4]
 8000bdc:	4a48      	ldr	r2, [pc, #288]	; (8000d00 <HAL_RCC_OscConfig+0x328>)
 8000bde:	4013      	ands	r3, r2
 8000be0:	6922      	ldr	r2, [r4, #16]
 8000be2:	0212      	lsls	r2, r2, #8
 8000be4:	4313      	orrs	r3, r2
 8000be6:	604b      	str	r3, [r1, #4]
 8000be8:	e7ad      	b.n	8000b46 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8000bea:	4a42      	ldr	r2, [pc, #264]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000bec:	6813      	ldr	r3, [r2, #0]
 8000bee:	2101      	movs	r1, #1
 8000bf0:	438b      	bics	r3, r1
 8000bf2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000bf4:	f7ff fc5c 	bl	80004b0 <HAL_GetTick>
 8000bf8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000bfa:	4b3e      	ldr	r3, [pc, #248]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	075b      	lsls	r3, r3, #29
 8000c00:	d5a1      	bpl.n	8000b46 <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c02:	f7ff fc55 	bl	80004b0 <HAL_GetTick>
 8000c06:	1b80      	subs	r0, r0, r6
 8000c08:	2802      	cmp	r0, #2
 8000c0a:	d9f6      	bls.n	8000bfa <HAL_RCC_OscConfig+0x222>
            return HAL_TIMEOUT;
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	e189      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000c10:	69e3      	ldr	r3, [r4, #28]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d022      	beq.n	8000c5c <HAL_RCC_OscConfig+0x284>
        __HAL_RCC_MSI_ENABLE();
 8000c16:	4a37      	ldr	r2, [pc, #220]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000c18:	6811      	ldr	r1, [r2, #0]
 8000c1a:	2380      	movs	r3, #128	; 0x80
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	430b      	orrs	r3, r1
 8000c20:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000c22:	f7ff fc45 	bl	80004b0 <HAL_GetTick>
 8000c26:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000c28:	4b32      	ldr	r3, [pc, #200]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	059b      	lsls	r3, r3, #22
 8000c2e:	d406      	bmi.n	8000c3e <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c30:	f7ff fc3e 	bl	80004b0 <HAL_GetTick>
 8000c34:	1b80      	subs	r0, r0, r6
 8000c36:	2802      	cmp	r0, #2
 8000c38:	d9f6      	bls.n	8000c28 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8000c3a:	2003      	movs	r0, #3
 8000c3c:	e172      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000c3e:	4a2d      	ldr	r2, [pc, #180]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000c40:	6853      	ldr	r3, [r2, #4]
 8000c42:	4932      	ldr	r1, [pc, #200]	; (8000d0c <HAL_RCC_OscConfig+0x334>)
 8000c44:	400b      	ands	r3, r1
 8000c46:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000c48:	430b      	orrs	r3, r1
 8000c4a:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000c4c:	6853      	ldr	r3, [r2, #4]
 8000c4e:	021b      	lsls	r3, r3, #8
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	6a21      	ldr	r1, [r4, #32]
 8000c54:	0609      	lsls	r1, r1, #24
 8000c56:	430b      	orrs	r3, r1
 8000c58:	6053      	str	r3, [r2, #4]
 8000c5a:	e7a4      	b.n	8000ba6 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_MSI_DISABLE();
 8000c5c:	4a25      	ldr	r2, [pc, #148]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000c5e:	6813      	ldr	r3, [r2, #0]
 8000c60:	492b      	ldr	r1, [pc, #172]	; (8000d10 <HAL_RCC_OscConfig+0x338>)
 8000c62:	400b      	ands	r3, r1
 8000c64:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000c66:	f7ff fc23 	bl	80004b0 <HAL_GetTick>
 8000c6a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000c6c:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	059b      	lsls	r3, r3, #22
 8000c72:	d598      	bpl.n	8000ba6 <HAL_RCC_OscConfig+0x1ce>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c74:	f7ff fc1c 	bl	80004b0 <HAL_GetTick>
 8000c78:	1b80      	subs	r0, r0, r6
 8000c7a:	2802      	cmp	r0, #2
 8000c7c:	d9f6      	bls.n	8000c6c <HAL_RCC_OscConfig+0x294>
            return HAL_TIMEOUT;
 8000c7e:	2003      	movs	r0, #3
 8000c80:	e150      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_LSI_DISABLE();
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000c84:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8000c86:	2101      	movs	r1, #1
 8000c88:	438b      	bics	r3, r1
 8000c8a:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000c8c:	f7ff fc10 	bl	80004b0 <HAL_GetTick>
 8000c90:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000c96:	079b      	lsls	r3, r3, #30
 8000c98:	d506      	bpl.n	8000ca8 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c9a:	f7ff fc09 	bl	80004b0 <HAL_GetTick>
 8000c9e:	1b80      	subs	r0, r0, r6
 8000ca0:	2802      	cmp	r0, #2
 8000ca2:	d9f6      	bls.n	8000c92 <HAL_RCC_OscConfig+0x2ba>
          return HAL_TIMEOUT;
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	e13d      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ca8:	6823      	ldr	r3, [r4, #0]
 8000caa:	075b      	lsls	r3, r3, #29
 8000cac:	d400      	bmi.n	8000cb0 <HAL_RCC_OscConfig+0x2d8>
 8000cae:	e08c      	b.n	8000dca <HAL_RCC_OscConfig+0x3f2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cb0:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	d41b      	bmi.n	8000cf0 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000cba:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000cbc:	2380      	movs	r3, #128	; 0x80
 8000cbe:	055b      	lsls	r3, r3, #21
 8000cc0:	430b      	orrs	r3, r1
 8000cc2:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8000cc4:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <HAL_RCC_OscConfig+0x33c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	05db      	lsls	r3, r3, #23
 8000ccc:	d526      	bpl.n	8000d1c <HAL_RCC_OscConfig+0x344>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cce:	68a3      	ldr	r3, [r4, #8]
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	0052      	lsls	r2, r2, #1
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d035      	beq.n	8000d44 <HAL_RCC_OscConfig+0x36c>
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d14b      	bne.n	8000d74 <HAL_RCC_OscConfig+0x39c>
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_RCC_OscConfig+0x31c>)
 8000cde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ce0:	490b      	ldr	r1, [pc, #44]	; (8000d10 <HAL_RCC_OscConfig+0x338>)
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	651a      	str	r2, [r3, #80]	; 0x50
 8000ce6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ce8:	490b      	ldr	r1, [pc, #44]	; (8000d18 <HAL_RCC_OscConfig+0x340>)
 8000cea:	400a      	ands	r2, r1
 8000cec:	651a      	str	r2, [r3, #80]	; 0x50
 8000cee:	e02f      	b.n	8000d50 <HAL_RCC_OscConfig+0x378>
    FlagStatus       pwrclkchanged = RESET;
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	e7e8      	b.n	8000cc6 <HAL_RCC_OscConfig+0x2ee>
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	fffeffff 	.word	0xfffeffff
 8000cfc:	fffbffff 	.word	0xfffbffff
 8000d00:	ffffe0ff 	.word	0xffffe0ff
 8000d04:	080029a0 	.word	0x080029a0
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	ffff1fff 	.word	0xffff1fff
 8000d10:	fffffeff 	.word	0xfffffeff
 8000d14:	40007000 	.word	0x40007000
 8000d18:	fffffbff 	.word	0xfffffbff
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d1c:	4a88      	ldr	r2, [pc, #544]	; (8000f40 <HAL_RCC_OscConfig+0x568>)
 8000d1e:	6811      	ldr	r1, [r2, #0]
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	430b      	orrs	r3, r1
 8000d26:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000d28:	f7ff fbc2 	bl	80004b0 <HAL_GetTick>
 8000d2c:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d2e:	4b84      	ldr	r3, [pc, #528]	; (8000f40 <HAL_RCC_OscConfig+0x568>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	05db      	lsls	r3, r3, #23
 8000d34:	d4cb      	bmi.n	8000cce <HAL_RCC_OscConfig+0x2f6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d36:	f7ff fbbb 	bl	80004b0 <HAL_GetTick>
 8000d3a:	1bc0      	subs	r0, r0, r7
 8000d3c:	2864      	cmp	r0, #100	; 0x64
 8000d3e:	d9f6      	bls.n	8000d2e <HAL_RCC_OscConfig+0x356>
          return HAL_TIMEOUT;
 8000d40:	2003      	movs	r0, #3
 8000d42:	e0ef      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d44:	4a7f      	ldr	r2, [pc, #508]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000d46:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	005b      	lsls	r3, r3, #1
 8000d4c:	430b      	orrs	r3, r1
 8000d4e:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d50:	68a3      	ldr	r3, [r4, #8]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d028      	beq.n	8000da8 <HAL_RCC_OscConfig+0x3d0>
      tickstart = HAL_GetTick();
 8000d56:	f7ff fbab 	bl	80004b0 <HAL_GetTick>
 8000d5a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000d5c:	4b79      	ldr	r3, [pc, #484]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000d60:	059b      	lsls	r3, r3, #22
 8000d62:	d430      	bmi.n	8000dc6 <HAL_RCC_OscConfig+0x3ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d64:	f7ff fba4 	bl	80004b0 <HAL_GetTick>
 8000d68:	1bc0      	subs	r0, r0, r7
 8000d6a:	4b77      	ldr	r3, [pc, #476]	; (8000f48 <HAL_RCC_OscConfig+0x570>)
 8000d6c:	4298      	cmp	r0, r3
 8000d6e:	d9f5      	bls.n	8000d5c <HAL_RCC_OscConfig+0x384>
          return HAL_TIMEOUT;
 8000d70:	2003      	movs	r0, #3
 8000d72:	e0d7      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d74:	22a0      	movs	r2, #160	; 0xa0
 8000d76:	00d2      	lsls	r2, r2, #3
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d009      	beq.n	8000d90 <HAL_RCC_OscConfig+0x3b8>
 8000d7c:	4b71      	ldr	r3, [pc, #452]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000d7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d80:	4972      	ldr	r1, [pc, #456]	; (8000f4c <HAL_RCC_OscConfig+0x574>)
 8000d82:	400a      	ands	r2, r1
 8000d84:	651a      	str	r2, [r3, #80]	; 0x50
 8000d86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d88:	4971      	ldr	r1, [pc, #452]	; (8000f50 <HAL_RCC_OscConfig+0x578>)
 8000d8a:	400a      	ands	r2, r1
 8000d8c:	651a      	str	r2, [r3, #80]	; 0x50
 8000d8e:	e7df      	b.n	8000d50 <HAL_RCC_OscConfig+0x378>
 8000d90:	4b6c      	ldr	r3, [pc, #432]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000d92:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8000d94:	3a01      	subs	r2, #1
 8000d96:	3aff      	subs	r2, #255	; 0xff
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	651a      	str	r2, [r3, #80]	; 0x50
 8000d9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8000d9e:	2280      	movs	r2, #128	; 0x80
 8000da0:	0052      	lsls	r2, r2, #1
 8000da2:	430a      	orrs	r2, r1
 8000da4:	651a      	str	r2, [r3, #80]	; 0x50
 8000da6:	e7d3      	b.n	8000d50 <HAL_RCC_OscConfig+0x378>
      tickstart = HAL_GetTick();
 8000da8:	f7ff fb82 	bl	80004b0 <HAL_GetTick>
 8000dac:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000dae:	4b65      	ldr	r3, [pc, #404]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000db2:	059b      	lsls	r3, r3, #22
 8000db4:	d507      	bpl.n	8000dc6 <HAL_RCC_OscConfig+0x3ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000db6:	f7ff fb7b 	bl	80004b0 <HAL_GetTick>
 8000dba:	1bc0      	subs	r0, r0, r7
 8000dbc:	4b62      	ldr	r3, [pc, #392]	; (8000f48 <HAL_RCC_OscConfig+0x570>)
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d9f5      	bls.n	8000dae <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 8000dc2:	2003      	movs	r0, #3
 8000dc4:	e0ae      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
    if(pwrclkchanged == SET)
 8000dc6:	2e01      	cmp	r6, #1
 8000dc8:	d021      	beq.n	8000e0e <HAL_RCC_OscConfig+0x436>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000dca:	6823      	ldr	r3, [r4, #0]
 8000dcc:	069b      	lsls	r3, r3, #26
 8000dce:	d53c      	bpl.n	8000e4a <HAL_RCC_OscConfig+0x472>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000dd0:	69a3      	ldr	r3, [r4, #24]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d021      	beq.n	8000e1a <HAL_RCC_OscConfig+0x442>
        __HAL_RCC_HSI48_ENABLE();
 8000dd6:	4b5b      	ldr	r3, [pc, #364]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000dd8:	6899      	ldr	r1, [r3, #8]
 8000dda:	2001      	movs	r0, #1
 8000ddc:	4301      	orrs	r1, r0
 8000dde:	6099      	str	r1, [r3, #8]
 8000de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000de2:	4302      	orrs	r2, r0
 8000de4:	635a      	str	r2, [r3, #52]	; 0x34
 8000de6:	4a5b      	ldr	r2, [pc, #364]	; (8000f54 <HAL_RCC_OscConfig+0x57c>)
 8000de8:	6a11      	ldr	r1, [r2, #32]
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	019b      	lsls	r3, r3, #6
 8000dee:	430b      	orrs	r3, r1
 8000df0:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000df2:	f7ff fb5d 	bl	80004b0 <HAL_GetTick>
 8000df6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000df8:	4b52      	ldr	r3, [pc, #328]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	079b      	lsls	r3, r3, #30
 8000dfe:	d424      	bmi.n	8000e4a <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e00:	f7ff fb56 	bl	80004b0 <HAL_GetTick>
 8000e04:	1b80      	subs	r0, r0, r6
 8000e06:	2802      	cmp	r0, #2
 8000e08:	d9f6      	bls.n	8000df8 <HAL_RCC_OscConfig+0x420>
            return HAL_TIMEOUT;
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	e08a      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e0e:	4a4d      	ldr	r2, [pc, #308]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000e10:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000e12:	4951      	ldr	r1, [pc, #324]	; (8000f58 <HAL_RCC_OscConfig+0x580>)
 8000e14:	400b      	ands	r3, r1
 8000e16:	6393      	str	r3, [r2, #56]	; 0x38
 8000e18:	e7d7      	b.n	8000dca <HAL_RCC_OscConfig+0x3f2>
        __HAL_RCC_HSI48_DISABLE();
 8000e1a:	4a4a      	ldr	r2, [pc, #296]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000e1c:	6893      	ldr	r3, [r2, #8]
 8000e1e:	2101      	movs	r1, #1
 8000e20:	438b      	bics	r3, r1
 8000e22:	6093      	str	r3, [r2, #8]
 8000e24:	4a4b      	ldr	r2, [pc, #300]	; (8000f54 <HAL_RCC_OscConfig+0x57c>)
 8000e26:	6a13      	ldr	r3, [r2, #32]
 8000e28:	494c      	ldr	r1, [pc, #304]	; (8000f5c <HAL_RCC_OscConfig+0x584>)
 8000e2a:	400b      	ands	r3, r1
 8000e2c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8000e2e:	f7ff fb3f 	bl	80004b0 <HAL_GetTick>
 8000e32:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000e34:	4b43      	ldr	r3, [pc, #268]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	079b      	lsls	r3, r3, #30
 8000e3a:	d506      	bpl.n	8000e4a <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e3c:	f7ff fb38 	bl	80004b0 <HAL_GetTick>
 8000e40:	1b80      	subs	r0, r0, r6
 8000e42:	2802      	cmp	r0, #2
 8000e44:	d9f6      	bls.n	8000e34 <HAL_RCC_OscConfig+0x45c>
            return HAL_TIMEOUT;
 8000e46:	2003      	movs	r0, #3
 8000e48:	e06c      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d100      	bne.n	8000e52 <HAL_RCC_OscConfig+0x47a>
 8000e50:	e070      	b.n	8000f34 <HAL_RCC_OscConfig+0x55c>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e52:	2d0c      	cmp	r5, #12
 8000e54:	d049      	beq.n	8000eea <HAL_RCC_OscConfig+0x512>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d012      	beq.n	8000e80 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_DISABLE();
 8000e5a:	4a3a      	ldr	r2, [pc, #232]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000e5c:	6813      	ldr	r3, [r2, #0]
 8000e5e:	4940      	ldr	r1, [pc, #256]	; (8000f60 <HAL_RCC_OscConfig+0x588>)
 8000e60:	400b      	ands	r3, r1
 8000e62:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e64:	f7ff fb24 	bl	80004b0 <HAL_GetTick>
 8000e68:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000e6a:	4b36      	ldr	r3, [pc, #216]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	019b      	lsls	r3, r3, #6
 8000e70:	d539      	bpl.n	8000ee6 <HAL_RCC_OscConfig+0x50e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e72:	f7ff fb1d 	bl	80004b0 <HAL_GetTick>
 8000e76:	1b00      	subs	r0, r0, r4
 8000e78:	2802      	cmp	r0, #2
 8000e7a:	d9f6      	bls.n	8000e6a <HAL_RCC_OscConfig+0x492>
            return HAL_TIMEOUT;
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	e051      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_DISABLE();
 8000e80:	4a30      	ldr	r2, [pc, #192]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000e82:	6813      	ldr	r3, [r2, #0]
 8000e84:	4936      	ldr	r1, [pc, #216]	; (8000f60 <HAL_RCC_OscConfig+0x588>)
 8000e86:	400b      	ands	r3, r1
 8000e88:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e8a:	f7ff fb11 	bl	80004b0 <HAL_GetTick>
 8000e8e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000e90:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	019b      	lsls	r3, r3, #6
 8000e96:	d506      	bpl.n	8000ea6 <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e98:	f7ff fb0a 	bl	80004b0 <HAL_GetTick>
 8000e9c:	1b40      	subs	r0, r0, r5
 8000e9e:	2802      	cmp	r0, #2
 8000ea0:	d9f6      	bls.n	8000e90 <HAL_RCC_OscConfig+0x4b8>
            return HAL_TIMEOUT;
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	e03e      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ea6:	4927      	ldr	r1, [pc, #156]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000ea8:	68cb      	ldr	r3, [r1, #12]
 8000eaa:	4a2e      	ldr	r2, [pc, #184]	; (8000f64 <HAL_RCC_OscConfig+0x58c>)
 8000eac:	4013      	ands	r3, r2
 8000eae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000eb0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000eb2:	4302      	orrs	r2, r0
 8000eb4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000eb6:	4302      	orrs	r2, r0
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 8000ebc:	680a      	ldr	r2, [r1, #0]
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	045b      	lsls	r3, r3, #17
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8000ec6:	f7ff faf3 	bl	80004b0 <HAL_GetTick>
 8000eca:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000ecc:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	019b      	lsls	r3, r3, #6
 8000ed2:	d406      	bmi.n	8000ee2 <HAL_RCC_OscConfig+0x50a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed4:	f7ff faec 	bl	80004b0 <HAL_GetTick>
 8000ed8:	1b00      	subs	r0, r0, r4
 8000eda:	2802      	cmp	r0, #2
 8000edc:	d9f6      	bls.n	8000ecc <HAL_RCC_OscConfig+0x4f4>
            return HAL_TIMEOUT;
 8000ede:	2003      	movs	r0, #3
 8000ee0:	e020      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	e01e      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	e01c      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d024      	beq.n	8000f38 <HAL_RCC_OscConfig+0x560>
        pll_config = RCC->CFGR;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_RCC_OscConfig+0x56c>)
 8000ef0:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	025b      	lsls	r3, r3, #9
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d001      	beq.n	8000f02 <HAL_RCC_OscConfig+0x52a>
          return HAL_ERROR;
 8000efe:	2001      	movs	r0, #1
 8000f00:	e010      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000f02:	23f0      	movs	r3, #240	; 0xf0
 8000f04:	039b      	lsls	r3, r3, #14
 8000f06:	4013      	ands	r3, r2
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f08:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d001      	beq.n	8000f12 <HAL_RCC_OscConfig+0x53a>
          return HAL_ERROR;
 8000f0e:	2001      	movs	r0, #1
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000f12:	23c0      	movs	r3, #192	; 0xc0
 8000f14:	041b      	lsls	r3, r3, #16
 8000f16:	401a      	ands	r2, r3
 8000f18:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d00e      	beq.n	8000f3c <HAL_RCC_OscConfig+0x564>
          return HAL_ERROR;
 8000f1e:	2001      	movs	r0, #1
 8000f20:	e000      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
    return HAL_ERROR;
 8000f22:	2001      	movs	r0, #1
}
 8000f24:	b003      	add	sp, #12
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8000f28:	2001      	movs	r0, #1
 8000f2a:	e7fb      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	e7f9      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8000f30:	2001      	movs	r0, #1
 8000f32:	e7f7      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 8000f34:	2000      	movs	r0, #0
 8000f36:	e7f5      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8000f38:	2001      	movs	r0, #1
 8000f3a:	e7f3      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	e7f1      	b.n	8000f24 <HAL_RCC_OscConfig+0x54c>
 8000f40:	40007000 	.word	0x40007000
 8000f44:	40021000 	.word	0x40021000
 8000f48:	00001388 	.word	0x00001388
 8000f4c:	fffffeff 	.word	0xfffffeff
 8000f50:	fffffbff 	.word	0xfffffbff
 8000f54:	40010000 	.word	0x40010000
 8000f58:	efffffff 	.word	0xefffffff
 8000f5c:	ffffdfff 	.word	0xffffdfff
 8000f60:	feffffff 	.word	0xfeffffff
 8000f64:	ff02ffff 	.word	0xff02ffff

08000f68 <HAL_RCC_ClockConfig>:
{
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	0004      	movs	r4, r0
 8000f6c:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	d100      	bne.n	8000f74 <HAL_RCC_ClockConfig+0xc>
 8000f72:	e0ba      	b.n	80010ea <HAL_RCC_ClockConfig+0x182>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f74:	4b5f      	ldr	r3, [pc, #380]	; (80010f4 <HAL_RCC_ClockConfig+0x18c>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	428b      	cmp	r3, r1
 8000f7e:	d20b      	bcs.n	8000f98 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f80:	495c      	ldr	r1, [pc, #368]	; (80010f4 <HAL_RCC_ClockConfig+0x18c>)
 8000f82:	680b      	ldr	r3, [r1, #0]
 8000f84:	2201      	movs	r2, #1
 8000f86:	4393      	bics	r3, r2
 8000f88:	432b      	orrs	r3, r5
 8000f8a:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f8c:	680b      	ldr	r3, [r1, #0]
 8000f8e:	401a      	ands	r2, r3
 8000f90:	42aa      	cmp	r2, r5
 8000f92:	d001      	beq.n	8000f98 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8000f94:	2001      	movs	r0, #1
 8000f96:	e0a9      	b.n	80010ec <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	079b      	lsls	r3, r3, #30
 8000f9c:	d506      	bpl.n	8000fac <HAL_RCC_ClockConfig+0x44>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f9e:	4a56      	ldr	r2, [pc, #344]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 8000fa0:	68d3      	ldr	r3, [r2, #12]
 8000fa2:	21f0      	movs	r1, #240	; 0xf0
 8000fa4:	438b      	bics	r3, r1
 8000fa6:	68a1      	ldr	r1, [r4, #8]
 8000fa8:	430b      	orrs	r3, r1
 8000faa:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	07db      	lsls	r3, r3, #31
 8000fb0:	d564      	bpl.n	800107c <HAL_RCC_ClockConfig+0x114>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb2:	6863      	ldr	r3, [r4, #4]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d009      	beq.n	8000fcc <HAL_RCC_ClockConfig+0x64>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d029      	beq.n	8001010 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d02d      	beq.n	800101c <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000fc0:	4a4d      	ldr	r2, [pc, #308]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	0592      	lsls	r2, r2, #22
 8000fc6:	d406      	bmi.n	8000fd6 <HAL_RCC_ClockConfig+0x6e>
        return HAL_ERROR;
 8000fc8:	2001      	movs	r0, #1
 8000fca:	e08f      	b.n	80010ec <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fcc:	4a4a      	ldr	r2, [pc, #296]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	0392      	lsls	r2, r2, #14
 8000fd2:	d400      	bmi.n	8000fd6 <HAL_RCC_ClockConfig+0x6e>
 8000fd4:	e08b      	b.n	80010ee <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fd6:	4948      	ldr	r1, [pc, #288]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 8000fd8:	68ca      	ldr	r2, [r1, #12]
 8000fda:	2003      	movs	r0, #3
 8000fdc:	4382      	bics	r2, r0
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 8000fe2:	f7ff fa65 	bl	80004b0 <HAL_GetTick>
 8000fe6:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fe8:	6863      	ldr	r3, [r4, #4]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d01c      	beq.n	8001028 <HAL_RCC_ClockConfig+0xc0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d028      	beq.n	8001044 <HAL_RCC_ClockConfig+0xdc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d034      	beq.n	8001060 <HAL_RCC_ClockConfig+0xf8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000ff6:	4b40      	ldr	r3, [pc, #256]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	421a      	tst	r2, r3
 8000ffe:	d03d      	beq.n	800107c <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001000:	f7ff fa56 	bl	80004b0 <HAL_GetTick>
 8001004:	1b80      	subs	r0, r0, r6
 8001006:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <HAL_RCC_ClockConfig+0x194>)
 8001008:	4298      	cmp	r0, r3
 800100a:	d9f4      	bls.n	8000ff6 <HAL_RCC_ClockConfig+0x8e>
          return HAL_TIMEOUT;
 800100c:	2003      	movs	r0, #3
 800100e:	e06d      	b.n	80010ec <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001010:	4a39      	ldr	r2, [pc, #228]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	0192      	lsls	r2, r2, #6
 8001016:	d4de      	bmi.n	8000fd6 <HAL_RCC_ClockConfig+0x6e>
        return HAL_ERROR;
 8001018:	2001      	movs	r0, #1
 800101a:	e067      	b.n	80010ec <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800101c:	4a36      	ldr	r2, [pc, #216]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	0752      	lsls	r2, r2, #29
 8001022:	d4d8      	bmi.n	8000fd6 <HAL_RCC_ClockConfig+0x6e>
        return HAL_ERROR;
 8001024:	2001      	movs	r0, #1
 8001026:	e061      	b.n	80010ec <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001028:	4b33      	ldr	r3, [pc, #204]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	230c      	movs	r3, #12
 800102e:	4013      	ands	r3, r2
 8001030:	2b08      	cmp	r3, #8
 8001032:	d023      	beq.n	800107c <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001034:	f7ff fa3c 	bl	80004b0 <HAL_GetTick>
 8001038:	1b80      	subs	r0, r0, r6
 800103a:	4b30      	ldr	r3, [pc, #192]	; (80010fc <HAL_RCC_ClockConfig+0x194>)
 800103c:	4298      	cmp	r0, r3
 800103e:	d9f3      	bls.n	8001028 <HAL_RCC_ClockConfig+0xc0>
          return HAL_TIMEOUT;
 8001040:	2003      	movs	r0, #3
 8001042:	e053      	b.n	80010ec <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001044:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 8001046:	68da      	ldr	r2, [r3, #12]
 8001048:	230c      	movs	r3, #12
 800104a:	4013      	ands	r3, r2
 800104c:	2b0c      	cmp	r3, #12
 800104e:	d015      	beq.n	800107c <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001050:	f7ff fa2e 	bl	80004b0 <HAL_GetTick>
 8001054:	1b80      	subs	r0, r0, r6
 8001056:	4b29      	ldr	r3, [pc, #164]	; (80010fc <HAL_RCC_ClockConfig+0x194>)
 8001058:	4298      	cmp	r0, r3
 800105a:	d9f3      	bls.n	8001044 <HAL_RCC_ClockConfig+0xdc>
          return HAL_TIMEOUT;
 800105c:	2003      	movs	r0, #3
 800105e:	e045      	b.n	80010ec <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001060:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 8001062:	68da      	ldr	r2, [r3, #12]
 8001064:	230c      	movs	r3, #12
 8001066:	4013      	ands	r3, r2
 8001068:	2b04      	cmp	r3, #4
 800106a:	d007      	beq.n	800107c <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800106c:	f7ff fa20 	bl	80004b0 <HAL_GetTick>
 8001070:	1b80      	subs	r0, r0, r6
 8001072:	4b22      	ldr	r3, [pc, #136]	; (80010fc <HAL_RCC_ClockConfig+0x194>)
 8001074:	4298      	cmp	r0, r3
 8001076:	d9f3      	bls.n	8001060 <HAL_RCC_ClockConfig+0xf8>
          return HAL_TIMEOUT;
 8001078:	2003      	movs	r0, #3
 800107a:	e037      	b.n	80010ec <HAL_RCC_ClockConfig+0x184>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HAL_RCC_ClockConfig+0x18c>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	4013      	ands	r3, r2
 8001084:	42ab      	cmp	r3, r5
 8001086:	d90b      	bls.n	80010a0 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001088:	491a      	ldr	r1, [pc, #104]	; (80010f4 <HAL_RCC_ClockConfig+0x18c>)
 800108a:	680b      	ldr	r3, [r1, #0]
 800108c:	2201      	movs	r2, #1
 800108e:	4393      	bics	r3, r2
 8001090:	432b      	orrs	r3, r5
 8001092:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001094:	680b      	ldr	r3, [r1, #0]
 8001096:	401a      	ands	r2, r3
 8001098:	42aa      	cmp	r2, r5
 800109a:	d001      	beq.n	80010a0 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 800109c:	2001      	movs	r0, #1
 800109e:	e025      	b.n	80010ec <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	075b      	lsls	r3, r3, #29
 80010a4:	d506      	bpl.n	80010b4 <HAL_RCC_ClockConfig+0x14c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010a6:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 80010a8:	68d3      	ldr	r3, [r2, #12]
 80010aa:	4915      	ldr	r1, [pc, #84]	; (8001100 <HAL_RCC_ClockConfig+0x198>)
 80010ac:	400b      	ands	r3, r1
 80010ae:	68e1      	ldr	r1, [r4, #12]
 80010b0:	430b      	orrs	r3, r1
 80010b2:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b4:	6823      	ldr	r3, [r4, #0]
 80010b6:	071b      	lsls	r3, r3, #28
 80010b8:	d507      	bpl.n	80010ca <HAL_RCC_ClockConfig+0x162>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010ba:	490f      	ldr	r1, [pc, #60]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 80010bc:	68cb      	ldr	r3, [r1, #12]
 80010be:	4a11      	ldr	r2, [pc, #68]	; (8001104 <HAL_RCC_ClockConfig+0x19c>)
 80010c0:	4013      	ands	r3, r2
 80010c2:	6922      	ldr	r2, [r4, #16]
 80010c4:	00d2      	lsls	r2, r2, #3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010ca:	f7ff fc2d 	bl	8000928 <HAL_RCC_GetSysClockFreq>
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	0912      	lsrs	r2, r2, #4
 80010d4:	230f      	movs	r3, #15
 80010d6:	4013      	ands	r3, r2
 80010d8:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <HAL_RCC_ClockConfig+0x1a0>)
 80010da:	5cd3      	ldrb	r3, [r2, r3]
 80010dc:	40d8      	lsrs	r0, r3
 80010de:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_RCC_ClockConfig+0x1a4>)
 80010e0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f7ff f9b0 	bl	8000448 <HAL_InitTick>
 80010e8:	e000      	b.n	80010ec <HAL_RCC_ClockConfig+0x184>
    return HAL_ERROR;
 80010ea:	2001      	movs	r0, #1
}
 80010ec:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80010ee:	2001      	movs	r0, #1
 80010f0:	e7fc      	b.n	80010ec <HAL_RCC_ClockConfig+0x184>
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	40022000 	.word	0x40022000
 80010f8:	40021000 	.word	0x40021000
 80010fc:	00001388 	.word	0x00001388
 8001100:	fffff8ff 	.word	0xfffff8ff
 8001104:	ffffc7ff 	.word	0xffffc7ff
 8001108:	080029a0 	.word	0x080029a0
 800110c:	20000000 	.word	0x20000000

08001110 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001110:	4b01      	ldr	r3, [pc, #4]	; (8001118 <HAL_RCC_GetHCLKFreq+0x8>)
 8001112:	6818      	ldr	r0, [r3, #0]
}
 8001114:	4770      	bx	lr
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	20000000 	.word	0x20000000

0800111c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800111c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800111e:	f7ff fff7 	bl	8001110 <HAL_RCC_GetHCLKFreq>
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	0a12      	lsrs	r2, r2, #8
 8001128:	2307      	movs	r3, #7
 800112a:	4013      	ands	r3, r2
 800112c:	4a02      	ldr	r2, [pc, #8]	; (8001138 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800112e:	5cd3      	ldrb	r3, [r2, r3]
 8001130:	40d8      	lsrs	r0, r3
}
 8001132:	bd10      	pop	{r4, pc}
 8001134:	40021000 	.word	0x40021000
 8001138:	080029b0 	.word	0x080029b0

0800113c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800113c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800113e:	f7ff ffe7 	bl	8001110 <HAL_RCC_GetHCLKFreq>
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	0ad2      	lsrs	r2, r2, #11
 8001148:	2307      	movs	r3, #7
 800114a:	4013      	ands	r3, r2
 800114c:	4a02      	ldr	r2, [pc, #8]	; (8001158 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800114e:	5cd3      	ldrb	r3, [r2, r3]
 8001150:	40d8      	lsrs	r0, r3
}
 8001152:	bd10      	pop	{r4, pc}
 8001154:	40021000 	.word	0x40021000
 8001158:	080029b0 	.word	0x080029b0

0800115c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800115c:	b570      	push	{r4, r5, r6, lr}
 800115e:	0004      	movs	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001160:	2382      	movs	r3, #130	; 0x82
 8001162:	011b      	lsls	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001164:	6802      	ldr	r2, [r0, #0]
 8001166:	421a      	tst	r2, r3
 8001168:	d05a      	beq.n	8001220 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800116a:	4b75      	ldr	r3, [pc, #468]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800116c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	d500      	bpl.n	8001174 <HAL_RCCEx_PeriphCLKConfig+0x18>
 8001172:	e09d      	b.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001174:	4a72      	ldr	r2, [pc, #456]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001176:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001178:	2380      	movs	r3, #128	; 0x80
 800117a:	055b      	lsls	r3, r3, #21
 800117c:	430b      	orrs	r3, r1
 800117e:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8001180:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001182:	4b70      	ldr	r3, [pc, #448]	; (8001344 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	05db      	lsls	r3, r3, #23
 8001188:	d400      	bmi.n	800118c <HAL_RCCEx_PeriphCLKConfig+0x30>
 800118a:	e093      	b.n	80012b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800118c:	4b6c      	ldr	r3, [pc, #432]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	23c0      	movs	r3, #192	; 0xc0
 8001192:	039b      	lsls	r3, r3, #14
 8001194:	401a      	ands	r2, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001196:	6861      	ldr	r1, [r4, #4]
 8001198:	400b      	ands	r3, r1
 800119a:	4293      	cmp	r3, r2
 800119c:	d100      	bne.n	80011a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800119e:	e09e      	b.n	80012de <HAL_RCCEx_PeriphCLKConfig+0x182>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80011a0:	23c0      	movs	r3, #192	; 0xc0
 80011a2:	029b      	lsls	r3, r3, #10
 80011a4:	000a      	movs	r2, r1
 80011a6:	401a      	ands	r2, r3
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d100      	bne.n	80011ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 80011ac:	e09f      	b.n	80012ee <HAL_RCCEx_PeriphCLKConfig+0x192>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80011ae:	4b64      	ldr	r3, [pc, #400]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80011b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011b2:	22c0      	movs	r2, #192	; 0xc0
 80011b4:	0292      	lsls	r2, r2, #10
 80011b6:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80011b8:	d01f      	beq.n	80011fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80011ba:	4011      	ands	r1, r2
 80011bc:	4299      	cmp	r1, r3
 80011be:	d002      	beq.n	80011c6 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80011c0:	6822      	ldr	r2, [r4, #0]
 80011c2:	0692      	lsls	r2, r2, #26
 80011c4:	d408      	bmi.n	80011d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80011c6:	22c0      	movs	r2, #192	; 0xc0
 80011c8:	0292      	lsls	r2, r2, #10
 80011ca:	68a1      	ldr	r1, [r4, #8]
 80011cc:	400a      	ands	r2, r1
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d013      	beq.n	80011fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	051b      	lsls	r3, r3, #20
 80011d6:	d510      	bpl.n	80011fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80011d8:	4b59      	ldr	r3, [pc, #356]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80011da:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80011dc:	4a5a      	ldr	r2, [pc, #360]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80011de:	4002      	ands	r2, r0

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80011e0:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 80011e2:	2180      	movs	r1, #128	; 0x80
 80011e4:	0309      	lsls	r1, r1, #12
 80011e6:	4331      	orrs	r1, r6
 80011e8:	6519      	str	r1, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011ea:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80011ec:	4e57      	ldr	r6, [pc, #348]	; (800134c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80011ee:	4031      	ands	r1, r6
 80011f0:	6519      	str	r1, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80011f2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80011f4:	05c3      	lsls	r3, r0, #23
 80011f6:	d500      	bpl.n	80011fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80011f8:	e080      	b.n	80012fc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80011fa:	6863      	ldr	r3, [r4, #4]
 80011fc:	22c0      	movs	r2, #192	; 0xc0
 80011fe:	0292      	lsls	r2, r2, #10
 8001200:	0019      	movs	r1, r3
 8001202:	4011      	ands	r1, r2
 8001204:	4291      	cmp	r1, r2
 8001206:	d100      	bne.n	800120a <HAL_RCCEx_PeriphCLKConfig+0xae>
 8001208:	e088      	b.n	800131c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800120a:	494d      	ldr	r1, [pc, #308]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800120c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 800120e:	22c0      	movs	r2, #192	; 0xc0
 8001210:	0292      	lsls	r2, r2, #10
 8001212:	6860      	ldr	r0, [r4, #4]
 8001214:	4002      	ands	r2, r0
 8001216:	4313      	orrs	r3, r2
 8001218:	650b      	str	r3, [r1, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800121a:	2d01      	cmp	r5, #1
 800121c:	d100      	bne.n	8001220 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800121e:	e087      	b.n	8001330 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001220:	6823      	ldr	r3, [r4, #0]
 8001222:	07db      	lsls	r3, r3, #31
 8001224:	d506      	bpl.n	8001234 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001226:	4a46      	ldr	r2, [pc, #280]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001228:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800122a:	2103      	movs	r1, #3
 800122c:	438b      	bics	r3, r1
 800122e:	68e1      	ldr	r1, [r4, #12]
 8001230:	430b      	orrs	r3, r1
 8001232:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	079b      	lsls	r3, r3, #30
 8001238:	d506      	bpl.n	8001248 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800123a:	4a41      	ldr	r2, [pc, #260]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800123c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800123e:	210c      	movs	r1, #12
 8001240:	438b      	bics	r3, r1
 8001242:	6921      	ldr	r1, [r4, #16]
 8001244:	430b      	orrs	r3, r1
 8001246:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	075b      	lsls	r3, r3, #29
 800124c:	d506      	bpl.n	800125c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800124e:	4a3c      	ldr	r2, [pc, #240]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001250:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001252:	493f      	ldr	r1, [pc, #252]	; (8001350 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001254:	400b      	ands	r3, r1
 8001256:	6961      	ldr	r1, [r4, #20]
 8001258:	430b      	orrs	r3, r1
 800125a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	071b      	lsls	r3, r3, #28
 8001260:	d506      	bpl.n	8001270 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001262:	4a37      	ldr	r2, [pc, #220]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001264:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001266:	493b      	ldr	r1, [pc, #236]	; (8001354 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001268:	400b      	ands	r3, r1
 800126a:	69a1      	ldr	r1, [r4, #24]
 800126c:	430b      	orrs	r3, r1
 800126e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	05db      	lsls	r3, r3, #23
 8001274:	d506      	bpl.n	8001284 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001276:	4a32      	ldr	r2, [pc, #200]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001278:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800127a:	4933      	ldr	r1, [pc, #204]	; (8001348 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800127c:	400b      	ands	r3, r1
 800127e:	69e1      	ldr	r1, [r4, #28]
 8001280:	430b      	orrs	r3, r1
 8001282:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	065b      	lsls	r3, r3, #25
 8001288:	d506      	bpl.n	8001298 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800128a:	4a2d      	ldr	r2, [pc, #180]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800128c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800128e:	4932      	ldr	r1, [pc, #200]	; (8001358 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001290:	400b      	ands	r3, r1
 8001292:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001294:	430b      	orrs	r3, r1
 8001296:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001298:	6823      	ldr	r3, [r4, #0]
 800129a:	061b      	lsls	r3, r3, #24
 800129c:	d54e      	bpl.n	800133c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800129e:	4a28      	ldr	r2, [pc, #160]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012a0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80012a2:	492e      	ldr	r1, [pc, #184]	; (800135c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80012a4:	400b      	ands	r3, r1
 80012a6:	6a21      	ldr	r1, [r4, #32]
 80012a8:	430b      	orrs	r3, r1
 80012aa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 80012ac:	2000      	movs	r0, #0
}
 80012ae:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 80012b0:	2500      	movs	r5, #0
 80012b2:	e766      	b.n	8001182 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012b4:	4a23      	ldr	r2, [pc, #140]	; (8001344 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80012b6:	6811      	ldr	r1, [r2, #0]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	430b      	orrs	r3, r1
 80012be:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80012c0:	f7ff f8f6 	bl	80004b0 <HAL_GetTick>
 80012c4:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	05db      	lsls	r3, r3, #23
 80012cc:	d500      	bpl.n	80012d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80012ce:	e75d      	b.n	800118c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d0:	f7ff f8ee 	bl	80004b0 <HAL_GetTick>
 80012d4:	1b80      	subs	r0, r0, r6
 80012d6:	2864      	cmp	r0, #100	; 0x64
 80012d8:	d9f5      	bls.n	80012c6 <HAL_RCCEx_PeriphCLKConfig+0x16a>
          return HAL_TIMEOUT;
 80012da:	2003      	movs	r0, #3
 80012dc:	e7e7      	b.n	80012ae <HAL_RCCEx_PeriphCLKConfig+0x152>
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80012de:	23c0      	movs	r3, #192	; 0xc0
 80012e0:	039b      	lsls	r3, r3, #14
 80012e2:	68a0      	ldr	r0, [r4, #8]
 80012e4:	4003      	ands	r3, r0
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d000      	beq.n	80012ec <HAL_RCCEx_PeriphCLKConfig+0x190>
 80012ea:	e759      	b.n	80011a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80012ec:	e75f      	b.n	80011ae <HAL_RCCEx_PeriphCLKConfig+0x52>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	039b      	lsls	r3, r3, #14
 80012f4:	d400      	bmi.n	80012f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80012f6:	e75a      	b.n	80011ae <HAL_RCCEx_PeriphCLKConfig+0x52>
          return HAL_ERROR;
 80012f8:	2001      	movs	r0, #1
 80012fa:	e7d8      	b.n	80012ae <HAL_RCCEx_PeriphCLKConfig+0x152>
        tickstart = HAL_GetTick();
 80012fc:	f7ff f8d8 	bl	80004b0 <HAL_GetTick>
 8001300:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001306:	059b      	lsls	r3, r3, #22
 8001308:	d500      	bpl.n	800130c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 800130a:	e776      	b.n	80011fa <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800130c:	f7ff f8d0 	bl	80004b0 <HAL_GetTick>
 8001310:	1b80      	subs	r0, r0, r6
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8001314:	4298      	cmp	r0, r3
 8001316:	d9f4      	bls.n	8001302 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
            return HAL_TIMEOUT;
 8001318:	2003      	movs	r0, #3
 800131a:	e7c8      	b.n	80012ae <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800131c:	4908      	ldr	r1, [pc, #32]	; (8001340 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800131e:	680a      	ldr	r2, [r1, #0]
 8001320:	4810      	ldr	r0, [pc, #64]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8001322:	4002      	ands	r2, r0
 8001324:	20c0      	movs	r0, #192	; 0xc0
 8001326:	0380      	lsls	r0, r0, #14
 8001328:	4003      	ands	r3, r0
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
 800132e:	e76c      	b.n	800120a <HAL_RCCEx_PeriphCLKConfig+0xae>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001330:	000a      	movs	r2, r1
 8001332:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8001334:	490c      	ldr	r1, [pc, #48]	; (8001368 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8001336:	400b      	ands	r3, r1
 8001338:	6393      	str	r3, [r2, #56]	; 0x38
 800133a:	e771      	b.n	8001220 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  return HAL_OK;
 800133c:	2000      	movs	r0, #0
 800133e:	e7b6      	b.n	80012ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001340:	40021000 	.word	0x40021000
 8001344:	40007000 	.word	0x40007000
 8001348:	fffcffff 	.word	0xfffcffff
 800134c:	fff7ffff 	.word	0xfff7ffff
 8001350:	fffff3ff 	.word	0xfffff3ff
 8001354:	ffffcfff 	.word	0xffffcfff
 8001358:	fbffffff 	.word	0xfbffffff
 800135c:	fff3ffff 	.word	0xfff3ffff
 8001360:	00001388 	.word	0x00001388
 8001364:	ffcfffff 	.word	0xffcfffff
 8001368:	efffffff 	.word	0xefffffff

0800136c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800136c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800136e:	2280      	movs	r2, #128	; 0x80
 8001370:	05d2      	lsls	r2, r2, #23
 8001372:	4290      	cmp	r0, r2
 8001374:	d008      	beq.n	8001388 <TIM_Base_SetConfig+0x1c>
 8001376:	4a15      	ldr	r2, [pc, #84]	; (80013cc <TIM_Base_SetConfig+0x60>)
 8001378:	4290      	cmp	r0, r2
 800137a:	d005      	beq.n	8001388 <TIM_Base_SetConfig+0x1c>
 800137c:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <TIM_Base_SetConfig+0x64>)
 800137e:	4290      	cmp	r0, r2
 8001380:	d002      	beq.n	8001388 <TIM_Base_SetConfig+0x1c>
 8001382:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <TIM_Base_SetConfig+0x68>)
 8001384:	4290      	cmp	r0, r2
 8001386:	d103      	bne.n	8001390 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001388:	2270      	movs	r2, #112	; 0x70
 800138a:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 800138c:	684a      	ldr	r2, [r1, #4]
 800138e:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001390:	2280      	movs	r2, #128	; 0x80
 8001392:	05d2      	lsls	r2, r2, #23
 8001394:	4290      	cmp	r0, r2
 8001396:	d008      	beq.n	80013aa <TIM_Base_SetConfig+0x3e>
 8001398:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <TIM_Base_SetConfig+0x60>)
 800139a:	4290      	cmp	r0, r2
 800139c:	d005      	beq.n	80013aa <TIM_Base_SetConfig+0x3e>
 800139e:	4a0c      	ldr	r2, [pc, #48]	; (80013d0 <TIM_Base_SetConfig+0x64>)
 80013a0:	4290      	cmp	r0, r2
 80013a2:	d002      	beq.n	80013aa <TIM_Base_SetConfig+0x3e>
 80013a4:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <TIM_Base_SetConfig+0x68>)
 80013a6:	4290      	cmp	r0, r2
 80013a8:	d103      	bne.n	80013b2 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <TIM_Base_SetConfig+0x6c>)
 80013ac:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013ae:	68ca      	ldr	r2, [r1, #12]
 80013b0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	4393      	bics	r3, r2
 80013b6:	690a      	ldr	r2, [r1, #16]
 80013b8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80013ba:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013bc:	688b      	ldr	r3, [r1, #8]
 80013be:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80013c0:	680b      	ldr	r3, [r1, #0]
 80013c2:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80013c4:	2301      	movs	r3, #1
 80013c6:	6143      	str	r3, [r0, #20]
}
 80013c8:	4770      	bx	lr
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	40000400 	.word	0x40000400
 80013d0:	40010800 	.word	0x40010800
 80013d4:	40011400 	.word	0x40011400
 80013d8:	fffffcff 	.word	0xfffffcff

080013dc <HAL_TIM_Base_Init>:
{
 80013dc:	b570      	push	{r4, r5, r6, lr}
 80013de:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80013e0:	d014      	beq.n	800140c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80013e2:	2339      	movs	r3, #57	; 0x39
 80013e4:	5cc3      	ldrb	r3, [r0, r3]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00a      	beq.n	8001400 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80013ea:	2539      	movs	r5, #57	; 0x39
 80013ec:	2302      	movs	r3, #2
 80013ee:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013f0:	1d21      	adds	r1, r4, #4
 80013f2:	6820      	ldr	r0, [r4, #0]
 80013f4:	f7ff ffba 	bl	800136c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80013f8:	2301      	movs	r3, #1
 80013fa:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80013fc:	2000      	movs	r0, #0
}
 80013fe:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001400:	3338      	adds	r3, #56	; 0x38
 8001402:	2200      	movs	r2, #0
 8001404:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001406:	f001 f8a5 	bl	8002554 <HAL_TIM_Base_MspInit>
 800140a:	e7ee      	b.n	80013ea <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 800140c:	2001      	movs	r0, #1
 800140e:	e7f6      	b.n	80013fe <HAL_TIM_Base_Init+0x22>

08001410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001410:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001412:	2338      	movs	r3, #56	; 0x38
 8001414:	5cc3      	ldrb	r3, [r0, r3]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d01b      	beq.n	8001452 <HAL_TIMEx_MasterConfigSynchronization+0x42>
 800141a:	2638      	movs	r6, #56	; 0x38
 800141c:	2301      	movs	r3, #1
 800141e:	469c      	mov	ip, r3
 8001420:	5583      	strb	r3, [r0, r6]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001422:	2739      	movs	r7, #57	; 0x39
 8001424:	3301      	adds	r3, #1
 8001426:	55c3      	strb	r3, [r0, r7]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001428:	6802      	ldr	r2, [r0, #0]
 800142a:	6854      	ldr	r4, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800142c:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800142e:	2570      	movs	r5, #112	; 0x70
 8001430:	43ac      	bics	r4, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001432:	680d      	ldr	r5, [r1, #0]
 8001434:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001436:	2580      	movs	r5, #128	; 0x80
 8001438:	43ab      	bics	r3, r5
 800143a:	001d      	movs	r5, r3
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800143c:	684b      	ldr	r3, [r1, #4]
 800143e:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001440:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001442:	6802      	ldr	r2, [r0, #0]
 8001444:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001446:	4663      	mov	r3, ip
 8001448:	55c3      	strb	r3, [r0, r7]

  __HAL_UNLOCK(htim);
 800144a:	2300      	movs	r3, #0
 800144c:	5583      	strb	r3, [r0, r6]

  return HAL_OK;
 800144e:	2000      	movs	r0, #0
}
 8001450:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8001452:	2002      	movs	r0, #2
 8001454:	e7fc      	b.n	8001450 <HAL_TIMEx_MasterConfigSynchronization+0x40>
	...

08001458 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001458:	6802      	ldr	r2, [r0, #0]
 800145a:	6813      	ldr	r3, [r2, #0]
 800145c:	4906      	ldr	r1, [pc, #24]	; (8001478 <UART_EndRxTransfer+0x20>)
 800145e:	400b      	ands	r3, r1
 8001460:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001462:	6802      	ldr	r2, [r0, #0]
 8001464:	6893      	ldr	r3, [r2, #8]
 8001466:	3123      	adds	r1, #35	; 0x23
 8001468:	31ff      	adds	r1, #255	; 0xff
 800146a:	438b      	bics	r3, r1
 800146c:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800146e:	2320      	movs	r3, #32
 8001470:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001472:	2300      	movs	r3, #0
 8001474:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001476:	4770      	bx	lr
 8001478:	fffffedf 	.word	0xfffffedf

0800147c <HAL_UART_Receive_IT>:
{
 800147c:	b530      	push	{r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800147e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001480:	2b20      	cmp	r3, #32
 8001482:	d16d      	bne.n	8001560 <HAL_UART_Receive_IT+0xe4>
    if ((pData == NULL) || (Size == 0U))
 8001484:	2900      	cmp	r1, #0
 8001486:	d100      	bne.n	800148a <HAL_UART_Receive_IT+0xe>
 8001488:	e06c      	b.n	8001564 <HAL_UART_Receive_IT+0xe8>
 800148a:	2a00      	cmp	r2, #0
 800148c:	d100      	bne.n	8001490 <HAL_UART_Receive_IT+0x14>
 800148e:	e06b      	b.n	8001568 <HAL_UART_Receive_IT+0xec>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001490:	6883      	ldr	r3, [r0, #8]
 8001492:	2480      	movs	r4, #128	; 0x80
 8001494:	0164      	lsls	r4, r4, #5
 8001496:	42a3      	cmp	r3, r4
 8001498:	d01a      	beq.n	80014d0 <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 800149a:	2470      	movs	r4, #112	; 0x70
 800149c:	5d04      	ldrb	r4, [r0, r4]
 800149e:	2c01      	cmp	r4, #1
 80014a0:	d064      	beq.n	800156c <HAL_UART_Receive_IT+0xf0>
 80014a2:	2470      	movs	r4, #112	; 0x70
 80014a4:	2501      	movs	r5, #1
 80014a6:	5505      	strb	r5, [r0, r4]
    huart->pRxBuffPtr  = pData;
 80014a8:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 80014aa:	2158      	movs	r1, #88	; 0x58
 80014ac:	5242      	strh	r2, [r0, r1]
    huart->RxXferCount = Size;
 80014ae:	3102      	adds	r1, #2
 80014b0:	5242      	strh	r2, [r0, r1]
    huart->RxISR       = NULL;
 80014b2:	2200      	movs	r2, #0
 80014b4:	6602      	str	r2, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	0152      	lsls	r2, r2, #5
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d00f      	beq.n	80014de <HAL_UART_Receive_IT+0x62>
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d11c      	bne.n	80014fc <HAL_UART_Receive_IT+0x80>
 80014c2:	6903      	ldr	r3, [r0, #16]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d115      	bne.n	80014f4 <HAL_UART_Receive_IT+0x78>
 80014c8:	335c      	adds	r3, #92	; 0x5c
 80014ca:	22ff      	movs	r2, #255	; 0xff
 80014cc:	52c2      	strh	r2, [r0, r3]
 80014ce:	e01c      	b.n	800150a <HAL_UART_Receive_IT+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014d0:	6904      	ldr	r4, [r0, #16]
 80014d2:	2c00      	cmp	r4, #0
 80014d4:	d1e1      	bne.n	800149a <HAL_UART_Receive_IT+0x1e>
      if ((((uint32_t)pData) & 1) != 0)
 80014d6:	07cc      	lsls	r4, r1, #31
 80014d8:	d5df      	bpl.n	800149a <HAL_UART_Receive_IT+0x1e>
        return  HAL_ERROR;
 80014da:	2001      	movs	r0, #1
 80014dc:	e041      	b.n	8001562 <HAL_UART_Receive_IT+0xe6>
    UART_MASK_COMPUTATION(huart);
 80014de:	6903      	ldr	r3, [r0, #16]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d103      	bne.n	80014ec <HAL_UART_Receive_IT+0x70>
 80014e4:	335c      	adds	r3, #92	; 0x5c
 80014e6:	4a22      	ldr	r2, [pc, #136]	; (8001570 <HAL_UART_Receive_IT+0xf4>)
 80014e8:	52c2      	strh	r2, [r0, r3]
 80014ea:	e00e      	b.n	800150a <HAL_UART_Receive_IT+0x8e>
 80014ec:	235c      	movs	r3, #92	; 0x5c
 80014ee:	22ff      	movs	r2, #255	; 0xff
 80014f0:	52c2      	strh	r2, [r0, r3]
 80014f2:	e00a      	b.n	800150a <HAL_UART_Receive_IT+0x8e>
 80014f4:	235c      	movs	r3, #92	; 0x5c
 80014f6:	227f      	movs	r2, #127	; 0x7f
 80014f8:	52c2      	strh	r2, [r0, r3]
 80014fa:	e006      	b.n	800150a <HAL_UART_Receive_IT+0x8e>
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	0552      	lsls	r2, r2, #21
 8001500:	4293      	cmp	r3, r2
 8001502:	d01c      	beq.n	800153e <HAL_UART_Receive_IT+0xc2>
 8001504:	235c      	movs	r3, #92	; 0x5c
 8001506:	2200      	movs	r2, #0
 8001508:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800150a:	2300      	movs	r3, #0
 800150c:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800150e:	3322      	adds	r3, #34	; 0x22
 8001510:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001512:	6802      	ldr	r2, [r0, #0]
 8001514:	6893      	ldr	r3, [r2, #8]
 8001516:	2101      	movs	r1, #1
 8001518:	430b      	orrs	r3, r1
 800151a:	6093      	str	r3, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	015b      	lsls	r3, r3, #5
 8001520:	6882      	ldr	r2, [r0, #8]
 8001522:	429a      	cmp	r2, r3
 8001524:	d016      	beq.n	8001554 <HAL_UART_Receive_IT+0xd8>
      huart->RxISR = UART_RxISR_8BIT;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <HAL_UART_Receive_IT+0xf8>)
 8001528:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_UNLOCK(huart);
 800152a:	2370      	movs	r3, #112	; 0x70
 800152c:	2200      	movs	r2, #0
 800152e:	54c2      	strb	r2, [r0, r3]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001530:	6802      	ldr	r2, [r0, #0]
 8001532:	6811      	ldr	r1, [r2, #0]
 8001534:	33b0      	adds	r3, #176	; 0xb0
 8001536:	430b      	orrs	r3, r1
 8001538:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 800153a:	2000      	movs	r0, #0
 800153c:	e011      	b.n	8001562 <HAL_UART_Receive_IT+0xe6>
    UART_MASK_COMPUTATION(huart);
 800153e:	6903      	ldr	r3, [r0, #16]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d103      	bne.n	800154c <HAL_UART_Receive_IT+0xd0>
 8001544:	335c      	adds	r3, #92	; 0x5c
 8001546:	227f      	movs	r2, #127	; 0x7f
 8001548:	52c2      	strh	r2, [r0, r3]
 800154a:	e7de      	b.n	800150a <HAL_UART_Receive_IT+0x8e>
 800154c:	235c      	movs	r3, #92	; 0x5c
 800154e:	223f      	movs	r2, #63	; 0x3f
 8001550:	52c2      	strh	r2, [r0, r3]
 8001552:	e7da      	b.n	800150a <HAL_UART_Receive_IT+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001554:	6903      	ldr	r3, [r0, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1e5      	bne.n	8001526 <HAL_UART_Receive_IT+0xaa>
      huart->RxISR = UART_RxISR_16BIT;
 800155a:	4b07      	ldr	r3, [pc, #28]	; (8001578 <HAL_UART_Receive_IT+0xfc>)
 800155c:	6603      	str	r3, [r0, #96]	; 0x60
 800155e:	e7e4      	b.n	800152a <HAL_UART_Receive_IT+0xae>
    return HAL_BUSY;
 8001560:	2002      	movs	r0, #2
}
 8001562:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8001564:	2001      	movs	r0, #1
 8001566:	e7fc      	b.n	8001562 <HAL_UART_Receive_IT+0xe6>
 8001568:	2001      	movs	r0, #1
 800156a:	e7fa      	b.n	8001562 <HAL_UART_Receive_IT+0xe6>
    __HAL_LOCK(huart);
 800156c:	2002      	movs	r0, #2
 800156e:	e7f8      	b.n	8001562 <HAL_UART_Receive_IT+0xe6>
 8001570:	000001ff 	.word	0x000001ff
 8001574:	08001649 	.word	0x08001649
 8001578:	080016ad 	.word	0x080016ad

0800157c <HAL_UART_Abort>:
{
 800157c:	b510      	push	{r4, lr}
 800157e:	0004      	movs	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8001580:	6802      	ldr	r2, [r0, #0]
 8001582:	6813      	ldr	r3, [r2, #0]
 8001584:	4928      	ldr	r1, [pc, #160]	; (8001628 <HAL_UART_Abort+0xac>)
 8001586:	400b      	ands	r3, r1
 8001588:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800158a:	6802      	ldr	r2, [r0, #0]
 800158c:	6893      	ldr	r3, [r2, #8]
 800158e:	31e3      	adds	r1, #227	; 0xe3
 8001590:	31ff      	adds	r1, #255	; 0xff
 8001592:	438b      	bics	r3, r1
 8001594:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8001596:	6803      	ldr	r3, [r0, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	0612      	lsls	r2, r2, #24
 800159c:	d50d      	bpl.n	80015ba <HAL_UART_Abort+0x3e>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	317f      	adds	r1, #127	; 0x7f
 80015a2:	438a      	bics	r2, r1
 80015a4:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 80015a6:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <HAL_UART_Abort+0x3e>
      huart->hdmatx->XferAbortCallback = NULL;
 80015ac:	2200      	movs	r2, #0
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80015b0:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80015b2:	f7ff f833 	bl	800061c <HAL_DMA_Abort>
 80015b6:	2800      	cmp	r0, #0
 80015b8:	d124      	bne.n	8001604 <HAL_UART_Abort+0x88>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80015ba:	6823      	ldr	r3, [r4, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	0652      	lsls	r2, r2, #25
 80015c0:	d50d      	bpl.n	80015de <HAL_UART_Abort+0x62>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	2140      	movs	r1, #64	; 0x40
 80015c6:	438a      	bics	r2, r1
 80015c8:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 80015ca:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <HAL_UART_Abort+0x62>
      huart->hdmarx->XferAbortCallback = NULL;
 80015d0:	2200      	movs	r2, #0
 80015d2:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80015d4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80015d6:	f7ff f821 	bl	800061c <HAL_DMA_Abort>
 80015da:	2800      	cmp	r0, #0
 80015dc:	d11b      	bne.n	8001616 <HAL_UART_Abort+0x9a>
  huart->TxXferCount = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	2252      	movs	r2, #82	; 0x52
 80015e2:	52a3      	strh	r3, [r4, r2]
  huart->RxXferCount = 0U;
 80015e4:	3208      	adds	r2, #8
 80015e6:	52a3      	strh	r3, [r4, r2]
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80015e8:	6822      	ldr	r2, [r4, #0]
 80015ea:	210f      	movs	r1, #15
 80015ec:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80015ee:	6821      	ldr	r1, [r4, #0]
 80015f0:	698a      	ldr	r2, [r1, #24]
 80015f2:	2008      	movs	r0, #8
 80015f4:	4302      	orrs	r2, r0
 80015f6:	618a      	str	r2, [r1, #24]
  huart->gState  = HAL_UART_STATE_READY;
 80015f8:	2220      	movs	r2, #32
 80015fa:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80015fc:	67a2      	str	r2, [r4, #120]	; 0x78
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015fe:	67e3      	str	r3, [r4, #124]	; 0x7c
  return HAL_OK;
 8001600:	2000      	movs	r0, #0
}
 8001602:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8001604:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001606:	f7ff f8b1 	bl	800076c <HAL_DMA_GetError>
 800160a:	2820      	cmp	r0, #32
 800160c:	d1d5      	bne.n	80015ba <HAL_UART_Abort+0x3e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800160e:	2310      	movs	r3, #16
 8001610:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8001612:	381d      	subs	r0, #29
 8001614:	e7f5      	b.n	8001602 <HAL_UART_Abort+0x86>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8001616:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001618:	f7ff f8a8 	bl	800076c <HAL_DMA_GetError>
 800161c:	2820      	cmp	r0, #32
 800161e:	d1de      	bne.n	80015de <HAL_UART_Abort+0x62>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001620:	2310      	movs	r3, #16
 8001622:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8001624:	381d      	subs	r0, #29
 8001626:	e7ec      	b.n	8001602 <HAL_UART_Abort+0x86>
 8001628:	fffffe1f 	.word	0xfffffe1f

0800162c <HAL_UART_TxCpltCallback>:
}
 800162c:	4770      	bx	lr

0800162e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800162e:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001630:	6802      	ldr	r2, [r0, #0]
 8001632:	6813      	ldr	r3, [r2, #0]
 8001634:	2140      	movs	r1, #64	; 0x40
 8001636:	438b      	bics	r3, r1
 8001638:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800163a:	2320      	movs	r3, #32
 800163c:	6743      	str	r3, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800163e:	2300      	movs	r3, #0
 8001640:	6643      	str	r3, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001642:	f7ff fff3 	bl	800162c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001646:	bd10      	pop	{r4, pc}

08001648 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8001648:	b510      	push	{r4, lr}
  uint16_t uhMask = huart->Mask;
 800164a:	235c      	movs	r3, #92	; 0x5c
 800164c:	5ac3      	ldrh	r3, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800164e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8001650:	2a22      	cmp	r2, #34	; 0x22
 8001652:	d005      	beq.n	8001660 <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001654:	6802      	ldr	r2, [r0, #0]
 8001656:	6993      	ldr	r3, [r2, #24]
 8001658:	2108      	movs	r1, #8
 800165a:	430b      	orrs	r3, r1
 800165c:	6193      	str	r3, [r2, #24]
  }
}
 800165e:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001660:	6802      	ldr	r2, [r0, #0]
 8001662:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001664:	b2db      	uxtb	r3, r3
 8001666:	4013      	ands	r3, r2
 8001668:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800166a:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800166c:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800166e:	3301      	adds	r3, #1
 8001670:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001672:	225a      	movs	r2, #90	; 0x5a
 8001674:	5a83      	ldrh	r3, [r0, r2]
 8001676:	3b01      	subs	r3, #1
 8001678:	b29b      	uxth	r3, r3
 800167a:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 800167c:	5a83      	ldrh	r3, [r0, r2]
 800167e:	b29b      	uxth	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1ec      	bne.n	800165e <UART_RxISR_8BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001684:	6802      	ldr	r2, [r0, #0]
 8001686:	6813      	ldr	r3, [r2, #0]
 8001688:	4907      	ldr	r1, [pc, #28]	; (80016a8 <UART_RxISR_8BIT+0x60>)
 800168a:	400b      	ands	r3, r1
 800168c:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800168e:	6802      	ldr	r2, [r0, #0]
 8001690:	6893      	ldr	r3, [r2, #8]
 8001692:	3123      	adds	r1, #35	; 0x23
 8001694:	31ff      	adds	r1, #255	; 0xff
 8001696:	438b      	bics	r3, r1
 8001698:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800169a:	2320      	movs	r3, #32
 800169c:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 80016a2:	f000 fe0f 	bl	80022c4 <HAL_UART_RxCpltCallback>
 80016a6:	e7da      	b.n	800165e <UART_RxISR_8BIT+0x16>
 80016a8:	fffffedf 	.word	0xfffffedf

080016ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80016ac:	b510      	push	{r4, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80016ae:	235c      	movs	r3, #92	; 0x5c
 80016b0:	5ac2      	ldrh	r2, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80016b2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80016b4:	2b22      	cmp	r3, #34	; 0x22
 80016b6:	d005      	beq.n	80016c4 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80016b8:	6802      	ldr	r2, [r0, #0]
 80016ba:	6993      	ldr	r3, [r2, #24]
 80016bc:	2108      	movs	r1, #8
 80016be:	430b      	orrs	r3, r1
 80016c0:	6193      	str	r3, [r2, #24]
  }
}
 80016c2:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80016c4:	6803      	ldr	r3, [r0, #0]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80016c8:	4013      	ands	r3, r2
 80016ca:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80016cc:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 80016ce:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80016d0:	3302      	adds	r3, #2
 80016d2:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 80016d4:	225a      	movs	r2, #90	; 0x5a
 80016d6:	5a83      	ldrh	r3, [r0, r2]
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29b      	uxth	r3, r3
 80016dc:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 80016de:	5a83      	ldrh	r3, [r0, r2]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ed      	bne.n	80016c2 <UART_RxISR_16BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80016e6:	6802      	ldr	r2, [r0, #0]
 80016e8:	6813      	ldr	r3, [r2, #0]
 80016ea:	4908      	ldr	r1, [pc, #32]	; (800170c <UART_RxISR_16BIT+0x60>)
 80016ec:	400b      	ands	r3, r1
 80016ee:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016f0:	6802      	ldr	r2, [r0, #0]
 80016f2:	6893      	ldr	r3, [r2, #8]
 80016f4:	3123      	adds	r1, #35	; 0x23
 80016f6:	31ff      	adds	r1, #255	; 0xff
 80016f8:	438b      	bics	r3, r1
 80016fa:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 80016fc:	2320      	movs	r3, #32
 80016fe:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 8001700:	2300      	movs	r3, #0
 8001702:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8001704:	f000 fdde 	bl	80022c4 <HAL_UART_RxCpltCallback>
 8001708:	e7db      	b.n	80016c2 <UART_RxISR_16BIT+0x16>
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	fffffedf 	.word	0xfffffedf

08001710 <HAL_UART_ErrorCallback>:
}
 8001710:	4770      	bx	lr
	...

08001714 <HAL_UART_IRQHandler>:
{
 8001714:	b570      	push	{r4, r5, r6, lr}
 8001716:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001718:	6801      	ldr	r1, [r0, #0]
 800171a:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800171c:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800171e:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8001720:	220f      	movs	r2, #15
 8001722:	401a      	ands	r2, r3
  if (errorflags == 0U)
 8001724:	d10a      	bne.n	800173c <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001726:	069e      	lsls	r6, r3, #26
 8001728:	d508      	bpl.n	800173c <HAL_UART_IRQHandler+0x28>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800172a:	0686      	lsls	r6, r0, #26
 800172c:	d506      	bpl.n	800173c <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 800172e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001730:	2b00      	cmp	r3, #0
 8001732:	d100      	bne.n	8001736 <HAL_UART_IRQHandler+0x22>
 8001734:	e089      	b.n	800184a <HAL_UART_IRQHandler+0x136>
        huart->RxISR(huart);
 8001736:	0020      	movs	r0, r4
 8001738:	4798      	blx	r3
 800173a:	e086      	b.n	800184a <HAL_UART_IRQHandler+0x136>
  if ((errorflags != 0U)
 800173c:	2a00      	cmp	r2, #0
 800173e:	d06b      	beq.n	8001818 <HAL_UART_IRQHandler+0x104>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001740:	2201      	movs	r2, #1
 8001742:	402a      	ands	r2, r5
 8001744:	d103      	bne.n	800174e <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001746:	2690      	movs	r6, #144	; 0x90
 8001748:	0076      	lsls	r6, r6, #1
 800174a:	4230      	tst	r0, r6
 800174c:	d064      	beq.n	8001818 <HAL_UART_IRQHandler+0x104>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800174e:	07dd      	lsls	r5, r3, #31
 8001750:	d506      	bpl.n	8001760 <HAL_UART_IRQHandler+0x4c>
 8001752:	05c5      	lsls	r5, r0, #23
 8001754:	d504      	bpl.n	8001760 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001756:	2501      	movs	r5, #1
 8001758:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800175a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800175c:	4329      	orrs	r1, r5
 800175e:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001760:	0799      	lsls	r1, r3, #30
 8001762:	d508      	bpl.n	8001776 <HAL_UART_IRQHandler+0x62>
 8001764:	2a00      	cmp	r2, #0
 8001766:	d006      	beq.n	8001776 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001768:	6821      	ldr	r1, [r4, #0]
 800176a:	2502      	movs	r5, #2
 800176c:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800176e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001770:	3502      	adds	r5, #2
 8001772:	4329      	orrs	r1, r5
 8001774:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001776:	0759      	lsls	r1, r3, #29
 8001778:	d508      	bpl.n	800178c <HAL_UART_IRQHandler+0x78>
 800177a:	2a00      	cmp	r2, #0
 800177c:	d006      	beq.n	800178c <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800177e:	6821      	ldr	r1, [r4, #0]
 8001780:	2504      	movs	r5, #4
 8001782:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001784:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001786:	3d02      	subs	r5, #2
 8001788:	4329      	orrs	r1, r5
 800178a:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800178c:	0719      	lsls	r1, r3, #28
 800178e:	d509      	bpl.n	80017a4 <HAL_UART_IRQHandler+0x90>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001790:	0681      	lsls	r1, r0, #26
 8001792:	d401      	bmi.n	8001798 <HAL_UART_IRQHandler+0x84>
 8001794:	2a00      	cmp	r2, #0
 8001796:	d005      	beq.n	80017a4 <HAL_UART_IRQHandler+0x90>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001798:	6822      	ldr	r2, [r4, #0]
 800179a:	2108      	movs	r1, #8
 800179c:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800179e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80017a0:	430a      	orrs	r2, r1
 80017a2:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017a4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80017a6:	2a00      	cmp	r2, #0
 80017a8:	d04f      	beq.n	800184a <HAL_UART_IRQHandler+0x136>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80017aa:	069b      	lsls	r3, r3, #26
 80017ac:	d506      	bpl.n	80017bc <HAL_UART_IRQHandler+0xa8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80017ae:	0683      	lsls	r3, r0, #26
 80017b0:	d504      	bpl.n	80017bc <HAL_UART_IRQHandler+0xa8>
        if (huart->RxISR != NULL)
 80017b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_UART_IRQHandler+0xa8>
          huart->RxISR(huart);
 80017b8:	0020      	movs	r0, r4
 80017ba:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80017bc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80017be:	6823      	ldr	r3, [r4, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	065b      	lsls	r3, r3, #25
 80017c4:	d401      	bmi.n	80017ca <HAL_UART_IRQHandler+0xb6>
 80017c6:	0713      	lsls	r3, r2, #28
 80017c8:	d520      	bpl.n	800180c <HAL_UART_IRQHandler+0xf8>
        UART_EndRxTransfer(huart);
 80017ca:	0020      	movs	r0, r4
 80017cc:	f7ff fe44 	bl	8001458 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	0652      	lsls	r2, r2, #25
 80017d6:	d515      	bpl.n	8001804 <HAL_UART_IRQHandler+0xf0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017d8:	689a      	ldr	r2, [r3, #8]
 80017da:	2140      	movs	r1, #64	; 0x40
 80017dc:	438a      	bics	r2, r1
 80017de:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 80017e0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00a      	beq.n	80017fc <HAL_UART_IRQHandler+0xe8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80017e6:	4a1b      	ldr	r2, [pc, #108]	; (8001854 <HAL_UART_IRQHandler+0x140>)
 80017e8:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80017ea:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80017ec:	f7fe ff3a 	bl	8000664 <HAL_DMA_Abort_IT>
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d02a      	beq.n	800184a <HAL_UART_IRQHandler+0x136>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017f4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80017f6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80017f8:	4798      	blx	r3
 80017fa:	e026      	b.n	800184a <HAL_UART_IRQHandler+0x136>
            HAL_UART_ErrorCallback(huart);
 80017fc:	0020      	movs	r0, r4
 80017fe:	f7ff ff87 	bl	8001710 <HAL_UART_ErrorCallback>
 8001802:	e022      	b.n	800184a <HAL_UART_IRQHandler+0x136>
          HAL_UART_ErrorCallback(huart);
 8001804:	0020      	movs	r0, r4
 8001806:	f7ff ff83 	bl	8001710 <HAL_UART_ErrorCallback>
 800180a:	e01e      	b.n	800184a <HAL_UART_IRQHandler+0x136>
        HAL_UART_ErrorCallback(huart);
 800180c:	0020      	movs	r0, r4
 800180e:	f7ff ff7f 	bl	8001710 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001812:	2300      	movs	r3, #0
 8001814:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001816:	e018      	b.n	800184a <HAL_UART_IRQHandler+0x136>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001818:	02da      	lsls	r2, r3, #11
 800181a:	d501      	bpl.n	8001820 <HAL_UART_IRQHandler+0x10c>
 800181c:	026a      	lsls	r2, r5, #9
 800181e:	d409      	bmi.n	8001834 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001820:	061a      	lsls	r2, r3, #24
 8001822:	d50e      	bpl.n	8001842 <HAL_UART_IRQHandler+0x12e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001824:	0602      	lsls	r2, r0, #24
 8001826:	d50c      	bpl.n	8001842 <HAL_UART_IRQHandler+0x12e>
    if (huart->TxISR != NULL)
 8001828:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00d      	beq.n	800184a <HAL_UART_IRQHandler+0x136>
      huart->TxISR(huart);
 800182e:	0020      	movs	r0, r4
 8001830:	4798      	blx	r3
 8001832:	e00a      	b.n	800184a <HAL_UART_IRQHandler+0x136>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	035b      	lsls	r3, r3, #13
 8001838:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800183a:	0020      	movs	r0, r4
 800183c:	f000 fb5e 	bl	8001efc <HAL_UARTEx_WakeupCallback>
    return;
 8001840:	e003      	b.n	800184a <HAL_UART_IRQHandler+0x136>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001842:	065b      	lsls	r3, r3, #25
 8001844:	d501      	bpl.n	800184a <HAL_UART_IRQHandler+0x136>
 8001846:	0643      	lsls	r3, r0, #25
 8001848:	d400      	bmi.n	800184c <HAL_UART_IRQHandler+0x138>
}
 800184a:	bd70      	pop	{r4, r5, r6, pc}
    UART_EndTransmit_IT(huart);
 800184c:	0020      	movs	r0, r4
 800184e:	f7ff feee 	bl	800162e <UART_EndTransmit_IT>
    return;
 8001852:	e7fa      	b.n	800184a <HAL_UART_IRQHandler+0x136>
 8001854:	08001859 	.word	0x08001859

08001858 <UART_DMAAbortOnError>:
{
 8001858:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800185a:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	225a      	movs	r2, #90	; 0x5a
 8001860:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8001862:	3a08      	subs	r2, #8
 8001864:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8001866:	f7ff ff53 	bl	8001710 <HAL_UART_ErrorCallback>
}
 800186a:	bd10      	pop	{r4, pc}

0800186c <UART_SetConfig>:
{
 800186c:	b5d0      	push	{r4, r6, r7, lr}
 800186e:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8001870:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001872:	6883      	ldr	r3, [r0, #8]
 8001874:	6902      	ldr	r2, [r0, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	6942      	ldr	r2, [r0, #20]
 800187a:	4313      	orrs	r3, r2
 800187c:	69c2      	ldr	r2, [r0, #28]
 800187e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001880:	680a      	ldr	r2, [r1, #0]
 8001882:	48ba      	ldr	r0, [pc, #744]	; (8001b6c <UART_SetConfig+0x300>)
 8001884:	4002      	ands	r2, r0
 8001886:	4313      	orrs	r3, r2
 8001888:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800188a:	6822      	ldr	r2, [r4, #0]
 800188c:	6853      	ldr	r3, [r2, #4]
 800188e:	49b8      	ldr	r1, [pc, #736]	; (8001b70 <UART_SetConfig+0x304>)
 8001890:	400b      	ands	r3, r1
 8001892:	68e1      	ldr	r1, [r4, #12]
 8001894:	430b      	orrs	r3, r1
 8001896:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001898:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800189a:	6822      	ldr	r2, [r4, #0]
 800189c:	4bb5      	ldr	r3, [pc, #724]	; (8001b74 <UART_SetConfig+0x308>)
 800189e:	429a      	cmp	r2, r3
 80018a0:	d001      	beq.n	80018a6 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 80018a2:	6a23      	ldr	r3, [r4, #32]
 80018a4:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80018a6:	6893      	ldr	r3, [r2, #8]
 80018a8:	48b3      	ldr	r0, [pc, #716]	; (8001b78 <UART_SetConfig+0x30c>)
 80018aa:	4003      	ands	r3, r0
 80018ac:	430b      	orrs	r3, r1
 80018ae:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	4ab2      	ldr	r2, [pc, #712]	; (8001b7c <UART_SetConfig+0x310>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d01c      	beq.n	80018f2 <UART_SetConfig+0x86>
 80018b8:	4ab1      	ldr	r2, [pc, #708]	; (8001b80 <UART_SetConfig+0x314>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d02d      	beq.n	800191a <UART_SetConfig+0xae>
 80018be:	4ab1      	ldr	r2, [pc, #708]	; (8001b84 <UART_SetConfig+0x318>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d05f      	beq.n	8001984 <UART_SetConfig+0x118>
 80018c4:	4ab0      	ldr	r2, [pc, #704]	; (8001b88 <UART_SetConfig+0x31c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d05e      	beq.n	8001988 <UART_SetConfig+0x11c>
 80018ca:	4aaa      	ldr	r2, [pc, #680]	; (8001b74 <UART_SetConfig+0x308>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d039      	beq.n	8001944 <UART_SetConfig+0xd8>
 80018d0:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80018d2:	49a8      	ldr	r1, [pc, #672]	; (8001b74 <UART_SetConfig+0x308>)
 80018d4:	428b      	cmp	r3, r1
 80018d6:	d05b      	beq.n	8001990 <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	021b      	lsls	r3, r3, #8
 80018dc:	69e1      	ldr	r1, [r4, #28]
 80018de:	4299      	cmp	r1, r3
 80018e0:	d100      	bne.n	80018e4 <UART_SetConfig+0x78>
 80018e2:	e090      	b.n	8001a06 <UART_SetConfig+0x19a>
    switch (clocksource)
 80018e4:	2a08      	cmp	r2, #8
 80018e6:	d900      	bls.n	80018ea <UART_SetConfig+0x7e>
 80018e8:	e171      	b.n	8001bce <UART_SetConfig+0x362>
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	4ba7      	ldr	r3, [pc, #668]	; (8001b8c <UART_SetConfig+0x320>)
 80018ee:	589b      	ldr	r3, [r3, r2]
 80018f0:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 80018f2:	4aa7      	ldr	r2, [pc, #668]	; (8001b90 <UART_SetConfig+0x324>)
 80018f4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80018f6:	2203      	movs	r2, #3
 80018f8:	400a      	ands	r2, r1
 80018fa:	2a01      	cmp	r2, #1
 80018fc:	d009      	beq.n	8001912 <UART_SetConfig+0xa6>
 80018fe:	2a00      	cmp	r2, #0
 8001900:	d005      	beq.n	800190e <UART_SetConfig+0xa2>
 8001902:	2a02      	cmp	r2, #2
 8001904:	d03a      	beq.n	800197c <UART_SetConfig+0x110>
 8001906:	2a03      	cmp	r2, #3
 8001908:	d005      	beq.n	8001916 <UART_SetConfig+0xaa>
 800190a:	2210      	movs	r2, #16
 800190c:	e7e1      	b.n	80018d2 <UART_SetConfig+0x66>
 800190e:	2201      	movs	r2, #1
 8001910:	e7df      	b.n	80018d2 <UART_SetConfig+0x66>
 8001912:	2204      	movs	r2, #4
 8001914:	e7dd      	b.n	80018d2 <UART_SetConfig+0x66>
 8001916:	2208      	movs	r2, #8
 8001918:	e7db      	b.n	80018d2 <UART_SetConfig+0x66>
 800191a:	4a9d      	ldr	r2, [pc, #628]	; (8001b90 <UART_SetConfig+0x324>)
 800191c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800191e:	220c      	movs	r2, #12
 8001920:	400a      	ands	r2, r1
 8001922:	2a04      	cmp	r2, #4
 8001924:	d00a      	beq.n	800193c <UART_SetConfig+0xd0>
 8001926:	d905      	bls.n	8001934 <UART_SetConfig+0xc8>
 8001928:	2a08      	cmp	r2, #8
 800192a:	d029      	beq.n	8001980 <UART_SetConfig+0x114>
 800192c:	2a0c      	cmp	r2, #12
 800192e:	d107      	bne.n	8001940 <UART_SetConfig+0xd4>
 8001930:	2208      	movs	r2, #8
 8001932:	e7ce      	b.n	80018d2 <UART_SetConfig+0x66>
 8001934:	2a00      	cmp	r2, #0
 8001936:	d103      	bne.n	8001940 <UART_SetConfig+0xd4>
 8001938:	2200      	movs	r2, #0
 800193a:	e7ca      	b.n	80018d2 <UART_SetConfig+0x66>
 800193c:	2204      	movs	r2, #4
 800193e:	e7c8      	b.n	80018d2 <UART_SetConfig+0x66>
 8001940:	2210      	movs	r2, #16
 8001942:	e7c6      	b.n	80018d2 <UART_SetConfig+0x66>
 8001944:	4a92      	ldr	r2, [pc, #584]	; (8001b90 <UART_SetConfig+0x324>)
 8001946:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001948:	21c0      	movs	r1, #192	; 0xc0
 800194a:	0109      	lsls	r1, r1, #4
 800194c:	400a      	ands	r2, r1
 800194e:	2180      	movs	r1, #128	; 0x80
 8001950:	00c9      	lsls	r1, r1, #3
 8001952:	428a      	cmp	r2, r1
 8001954:	d00e      	beq.n	8001974 <UART_SetConfig+0x108>
 8001956:	d909      	bls.n	800196c <UART_SetConfig+0x100>
 8001958:	2180      	movs	r1, #128	; 0x80
 800195a:	0109      	lsls	r1, r1, #4
 800195c:	428a      	cmp	r2, r1
 800195e:	d015      	beq.n	800198c <UART_SetConfig+0x120>
 8001960:	21c0      	movs	r1, #192	; 0xc0
 8001962:	0109      	lsls	r1, r1, #4
 8001964:	428a      	cmp	r2, r1
 8001966:	d107      	bne.n	8001978 <UART_SetConfig+0x10c>
 8001968:	2208      	movs	r2, #8
 800196a:	e7b2      	b.n	80018d2 <UART_SetConfig+0x66>
 800196c:	2a00      	cmp	r2, #0
 800196e:	d103      	bne.n	8001978 <UART_SetConfig+0x10c>
 8001970:	2200      	movs	r2, #0
 8001972:	e7ae      	b.n	80018d2 <UART_SetConfig+0x66>
 8001974:	2204      	movs	r2, #4
 8001976:	e7ac      	b.n	80018d2 <UART_SetConfig+0x66>
 8001978:	2210      	movs	r2, #16
 800197a:	e7aa      	b.n	80018d2 <UART_SetConfig+0x66>
 800197c:	2202      	movs	r2, #2
 800197e:	e7a8      	b.n	80018d2 <UART_SetConfig+0x66>
 8001980:	2202      	movs	r2, #2
 8001982:	e7a6      	b.n	80018d2 <UART_SetConfig+0x66>
 8001984:	2200      	movs	r2, #0
 8001986:	e7a4      	b.n	80018d2 <UART_SetConfig+0x66>
 8001988:	2200      	movs	r2, #0
 800198a:	e7a2      	b.n	80018d2 <UART_SetConfig+0x66>
 800198c:	2202      	movs	r2, #2
 800198e:	e7a0      	b.n	80018d2 <UART_SetConfig+0x66>
    switch (clocksource)
 8001990:	2a02      	cmp	r2, #2
 8001992:	d02d      	beq.n	80019f0 <UART_SetConfig+0x184>
 8001994:	d907      	bls.n	80019a6 <UART_SetConfig+0x13a>
 8001996:	2a04      	cmp	r2, #4
 8001998:	d030      	beq.n	80019fc <UART_SetConfig+0x190>
 800199a:	2a08      	cmp	r2, #8
 800199c:	d000      	beq.n	80019a0 <UART_SetConfig+0x134>
 800199e:	e119      	b.n	8001bd4 <UART_SetConfig+0x368>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80019a0:	2080      	movs	r0, #128	; 0x80
 80019a2:	0200      	lsls	r0, r0, #8
 80019a4:	e007      	b.n	80019b6 <UART_SetConfig+0x14a>
    switch (clocksource)
 80019a6:	2a00      	cmp	r2, #0
 80019a8:	d000      	beq.n	80019ac <UART_SetConfig+0x140>
 80019aa:	e113      	b.n	8001bd4 <UART_SetConfig+0x368>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80019ac:	f7ff fbb6 	bl	800111c <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 80019b0:	2800      	cmp	r0, #0
 80019b2:	d100      	bne.n	80019b6 <UART_SetConfig+0x14a>
 80019b4:	e110      	b.n	8001bd8 <UART_SetConfig+0x36c>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80019b6:	6862      	ldr	r2, [r4, #4]
 80019b8:	0053      	lsls	r3, r2, #1
 80019ba:	189b      	adds	r3, r3, r2
 80019bc:	4283      	cmp	r3, r0
 80019be:	d900      	bls.n	80019c2 <UART_SetConfig+0x156>
 80019c0:	e10c      	b.n	8001bdc <UART_SetConfig+0x370>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80019c2:	0313      	lsls	r3, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80019c4:	4283      	cmp	r3, r0
 80019c6:	d200      	bcs.n	80019ca <UART_SetConfig+0x15e>
 80019c8:	e10a      	b.n	8001be0 <UART_SetConfig+0x374>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 80019ca:	0e07      	lsrs	r7, r0, #24
 80019cc:	0206      	lsls	r6, r0, #8
 80019ce:	0850      	lsrs	r0, r2, #1
 80019d0:	2100      	movs	r1, #0
 80019d2:	1980      	adds	r0, r0, r6
 80019d4:	4179      	adcs	r1, r7
 80019d6:	2300      	movs	r3, #0
 80019d8:	f7fe fc2a 	bl	8000230 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80019dc:	4b6d      	ldr	r3, [pc, #436]	; (8001b94 <UART_SetConfig+0x328>)
 80019de:	18c2      	adds	r2, r0, r3
 80019e0:	4b6d      	ldr	r3, [pc, #436]	; (8001b98 <UART_SetConfig+0x32c>)
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d900      	bls.n	80019e8 <UART_SetConfig+0x17c>
 80019e6:	e0fd      	b.n	8001be4 <UART_SetConfig+0x378>
          huart->Instance->BRR = usartdiv;
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	60d8      	str	r0, [r3, #12]
 80019ec:	2000      	movs	r0, #0
 80019ee:	e085      	b.n	8001afc <UART_SetConfig+0x290>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80019f0:	4b67      	ldr	r3, [pc, #412]	; (8001b90 <UART_SetConfig+0x324>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	06db      	lsls	r3, r3, #27
 80019f6:	d404      	bmi.n	8001a02 <UART_SetConfig+0x196>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80019f8:	4868      	ldr	r0, [pc, #416]	; (8001b9c <UART_SetConfig+0x330>)
 80019fa:	e7dc      	b.n	80019b6 <UART_SetConfig+0x14a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80019fc:	f7fe ff94 	bl	8000928 <HAL_RCC_GetSysClockFreq>
        break;
 8001a00:	e7d6      	b.n	80019b0 <UART_SetConfig+0x144>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8001a02:	4867      	ldr	r0, [pc, #412]	; (8001ba0 <UART_SetConfig+0x334>)
 8001a04:	e7d7      	b.n	80019b6 <UART_SetConfig+0x14a>
    switch (clocksource)
 8001a06:	2a08      	cmp	r2, #8
 8001a08:	d862      	bhi.n	8001ad0 <UART_SetConfig+0x264>
 8001a0a:	0092      	lsls	r2, r2, #2
 8001a0c:	4b65      	ldr	r3, [pc, #404]	; (8001ba4 <UART_SetConfig+0x338>)
 8001a0e:	589b      	ldr	r3, [r3, r2]
 8001a10:	469f      	mov	pc, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001a12:	f7ff fb83 	bl	800111c <HAL_RCC_GetPCLK1Freq>
 8001a16:	0040      	lsls	r0, r0, #1
 8001a18:	6863      	ldr	r3, [r4, #4]
 8001a1a:	085b      	lsrs	r3, r3, #1
 8001a1c:	18c0      	adds	r0, r0, r3
 8001a1e:	6861      	ldr	r1, [r4, #4]
 8001a20:	f7fe fb7a 	bl	8000118 <__udivsi3>
 8001a24:	0403      	lsls	r3, r0, #16
 8001a26:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a28:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001a2a:	495f      	ldr	r1, [pc, #380]	; (8001ba8 <UART_SetConfig+0x33c>)
 8001a2c:	001a      	movs	r2, r3
 8001a2e:	3a10      	subs	r2, #16
 8001a30:	428a      	cmp	r2, r1
 8001a32:	d900      	bls.n	8001a36 <UART_SetConfig+0x1ca>
 8001a34:	e0d8      	b.n	8001be8 <UART_SetConfig+0x37c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001a36:	220f      	movs	r2, #15
 8001a38:	0019      	movs	r1, r3
 8001a3a:	4391      	bics	r1, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001a3c:	085b      	lsrs	r3, r3, #1
 8001a3e:	3a08      	subs	r2, #8
 8001a40:	4013      	ands	r3, r2
 8001a42:	430b      	orrs	r3, r1
      huart->Instance->BRR = brrtemp;
 8001a44:	6822      	ldr	r2, [r4, #0]
 8001a46:	60d3      	str	r3, [r2, #12]
 8001a48:	e058      	b.n	8001afc <UART_SetConfig+0x290>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001a4a:	f7ff fb77 	bl	800113c <HAL_RCC_GetPCLK2Freq>
 8001a4e:	0040      	lsls	r0, r0, #1
 8001a50:	6863      	ldr	r3, [r4, #4]
 8001a52:	085b      	lsrs	r3, r3, #1
 8001a54:	18c0      	adds	r0, r0, r3
 8001a56:	6861      	ldr	r1, [r4, #4]
 8001a58:	f7fe fb5e 	bl	8000118 <__udivsi3>
 8001a5c:	0403      	lsls	r3, r0, #16
 8001a5e:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a60:	2000      	movs	r0, #0
        break;
 8001a62:	e7e2      	b.n	8001a2a <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a64:	4b4a      	ldr	r3, [pc, #296]	; (8001b90 <UART_SetConfig+0x324>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	06db      	lsls	r3, r3, #27
 8001a6a:	d50b      	bpl.n	8001a84 <UART_SetConfig+0x218>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001a6c:	6863      	ldr	r3, [r4, #4]
 8001a6e:	0858      	lsrs	r0, r3, #1
 8001a70:	4b4e      	ldr	r3, [pc, #312]	; (8001bac <UART_SetConfig+0x340>)
 8001a72:	469c      	mov	ip, r3
 8001a74:	4460      	add	r0, ip
 8001a76:	6861      	ldr	r1, [r4, #4]
 8001a78:	f7fe fb4e 	bl	8000118 <__udivsi3>
 8001a7c:	0403      	lsls	r3, r0, #16
 8001a7e:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a80:	2000      	movs	r0, #0
 8001a82:	e7d2      	b.n	8001a2a <UART_SetConfig+0x1be>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001a84:	6863      	ldr	r3, [r4, #4]
 8001a86:	0858      	lsrs	r0, r3, #1
 8001a88:	4b49      	ldr	r3, [pc, #292]	; (8001bb0 <UART_SetConfig+0x344>)
 8001a8a:	469c      	mov	ip, r3
 8001a8c:	4460      	add	r0, ip
 8001a8e:	6861      	ldr	r1, [r4, #4]
 8001a90:	f7fe fb42 	bl	8000118 <__udivsi3>
 8001a94:	0403      	lsls	r3, r0, #16
 8001a96:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8001a98:	2000      	movs	r0, #0
 8001a9a:	e7c6      	b.n	8001a2a <UART_SetConfig+0x1be>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001a9c:	f7fe ff44 	bl	8000928 <HAL_RCC_GetSysClockFreq>
 8001aa0:	0040      	lsls	r0, r0, #1
 8001aa2:	6863      	ldr	r3, [r4, #4]
 8001aa4:	085b      	lsrs	r3, r3, #1
 8001aa6:	18c0      	adds	r0, r0, r3
 8001aa8:	6861      	ldr	r1, [r4, #4]
 8001aaa:	f7fe fb35 	bl	8000118 <__udivsi3>
 8001aae:	0403      	lsls	r3, r0, #16
 8001ab0:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ab2:	2000      	movs	r0, #0
        break;
 8001ab4:	e7b9      	b.n	8001a2a <UART_SetConfig+0x1be>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ab6:	6863      	ldr	r3, [r4, #4]
 8001ab8:	0858      	lsrs	r0, r3, #1
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	025b      	lsls	r3, r3, #9
 8001abe:	469c      	mov	ip, r3
 8001ac0:	4460      	add	r0, ip
 8001ac2:	6861      	ldr	r1, [r4, #4]
 8001ac4:	f7fe fb28 	bl	8000118 <__udivsi3>
 8001ac8:	0403      	lsls	r3, r0, #16
 8001aca:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8001acc:	2000      	movs	r0, #0
        break;
 8001ace:	e7ac      	b.n	8001a2a <UART_SetConfig+0x1be>
        ret = HAL_ERROR;
 8001ad0:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e7a9      	b.n	8001a2a <UART_SetConfig+0x1be>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ad6:	f7ff fb21 	bl	800111c <HAL_RCC_GetPCLK1Freq>
 8001ada:	6863      	ldr	r3, [r4, #4]
 8001adc:	085b      	lsrs	r3, r3, #1
 8001ade:	18c0      	adds	r0, r0, r3
 8001ae0:	6861      	ldr	r1, [r4, #4]
 8001ae2:	f7fe fb19 	bl	8000118 <__udivsi3>
 8001ae6:	0403      	lsls	r3, r0, #16
 8001ae8:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8001aea:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001aec:	492e      	ldr	r1, [pc, #184]	; (8001ba8 <UART_SetConfig+0x33c>)
 8001aee:	001a      	movs	r2, r3
 8001af0:	3a10      	subs	r2, #16
 8001af2:	428a      	cmp	r2, r1
 8001af4:	d900      	bls.n	8001af8 <UART_SetConfig+0x28c>
 8001af6:	e079      	b.n	8001bec <UART_SetConfig+0x380>
      huart->Instance->BRR = usartdiv;
 8001af8:	6822      	ldr	r2, [r4, #0]
 8001afa:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001b00:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001b02:	bdd0      	pop	{r4, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001b04:	f7ff fb1a 	bl	800113c <HAL_RCC_GetPCLK2Freq>
 8001b08:	6863      	ldr	r3, [r4, #4]
 8001b0a:	085b      	lsrs	r3, r3, #1
 8001b0c:	18c0      	adds	r0, r0, r3
 8001b0e:	6861      	ldr	r1, [r4, #4]
 8001b10:	f7fe fb02 	bl	8000118 <__udivsi3>
 8001b14:	0403      	lsls	r3, r0, #16
 8001b16:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b18:	2000      	movs	r0, #0
        break;
 8001b1a:	e7e7      	b.n	8001aec <UART_SetConfig+0x280>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <UART_SetConfig+0x324>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	06db      	lsls	r3, r3, #27
 8001b22:	d50b      	bpl.n	8001b3c <UART_SetConfig+0x2d0>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001b24:	6863      	ldr	r3, [r4, #4]
 8001b26:	0858      	lsrs	r0, r3, #1
 8001b28:	4b1d      	ldr	r3, [pc, #116]	; (8001ba0 <UART_SetConfig+0x334>)
 8001b2a:	469c      	mov	ip, r3
 8001b2c:	4460      	add	r0, ip
 8001b2e:	6861      	ldr	r1, [r4, #4]
 8001b30:	f7fe faf2 	bl	8000118 <__udivsi3>
 8001b34:	0403      	lsls	r3, r0, #16
 8001b36:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b38:	2000      	movs	r0, #0
 8001b3a:	e7d7      	b.n	8001aec <UART_SetConfig+0x280>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001b3c:	6863      	ldr	r3, [r4, #4]
 8001b3e:	0858      	lsrs	r0, r3, #1
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <UART_SetConfig+0x330>)
 8001b42:	469c      	mov	ip, r3
 8001b44:	4460      	add	r0, ip
 8001b46:	6861      	ldr	r1, [r4, #4]
 8001b48:	f7fe fae6 	bl	8000118 <__udivsi3>
 8001b4c:	0403      	lsls	r3, r0, #16
 8001b4e:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b50:	2000      	movs	r0, #0
 8001b52:	e7cb      	b.n	8001aec <UART_SetConfig+0x280>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001b54:	f7fe fee8 	bl	8000928 <HAL_RCC_GetSysClockFreq>
 8001b58:	6863      	ldr	r3, [r4, #4]
 8001b5a:	085b      	lsrs	r3, r3, #1
 8001b5c:	18c0      	adds	r0, r0, r3
 8001b5e:	6861      	ldr	r1, [r4, #4]
 8001b60:	f7fe fada 	bl	8000118 <__udivsi3>
 8001b64:	0403      	lsls	r3, r0, #16
 8001b66:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8001b68:	2000      	movs	r0, #0
        break;
 8001b6a:	e7bf      	b.n	8001aec <UART_SetConfig+0x280>
 8001b6c:	efff69f3 	.word	0xefff69f3
 8001b70:	ffffcfff 	.word	0xffffcfff
 8001b74:	40004800 	.word	0x40004800
 8001b78:	fffff4ff 	.word	0xfffff4ff
 8001b7c:	40013800 	.word	0x40013800
 8001b80:	40004400 	.word	0x40004400
 8001b84:	40004c00 	.word	0x40004c00
 8001b88:	40005000 	.word	0x40005000
 8001b8c:	0800294c 	.word	0x0800294c
 8001b90:	40021000 	.word	0x40021000
 8001b94:	fffffd00 	.word	0xfffffd00
 8001b98:	000ffcff 	.word	0x000ffcff
 8001b9c:	00f42400 	.word	0x00f42400
 8001ba0:	003d0900 	.word	0x003d0900
 8001ba4:	08002970 	.word	0x08002970
 8001ba8:	0000ffef 	.word	0x0000ffef
 8001bac:	007a1200 	.word	0x007a1200
 8001bb0:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001bb4:	6863      	ldr	r3, [r4, #4]
 8001bb6:	0858      	lsrs	r0, r3, #1
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	021b      	lsls	r3, r3, #8
 8001bbc:	469c      	mov	ip, r3
 8001bbe:	4460      	add	r0, ip
 8001bc0:	6861      	ldr	r1, [r4, #4]
 8001bc2:	f7fe faa9 	bl	8000118 <__udivsi3>
 8001bc6:	0403      	lsls	r3, r0, #16
 8001bc8:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8001bca:	2000      	movs	r0, #0
        break;
 8001bcc:	e78e      	b.n	8001aec <UART_SetConfig+0x280>
        ret = HAL_ERROR;
 8001bce:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e78b      	b.n	8001aec <UART_SetConfig+0x280>
        ret = HAL_ERROR;
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	e791      	b.n	8001afc <UART_SetConfig+0x290>
 8001bd8:	2000      	movs	r0, #0
 8001bda:	e78f      	b.n	8001afc <UART_SetConfig+0x290>
        ret = HAL_ERROR;
 8001bdc:	2001      	movs	r0, #1
 8001bde:	e78d      	b.n	8001afc <UART_SetConfig+0x290>
 8001be0:	2001      	movs	r0, #1
 8001be2:	e78b      	b.n	8001afc <UART_SetConfig+0x290>
          ret = HAL_ERROR;
 8001be4:	2001      	movs	r0, #1
 8001be6:	e789      	b.n	8001afc <UART_SetConfig+0x290>
      ret = HAL_ERROR;
 8001be8:	2001      	movs	r0, #1
 8001bea:	e787      	b.n	8001afc <UART_SetConfig+0x290>
      ret = HAL_ERROR;
 8001bec:	2001      	movs	r0, #1
 8001bee:	e785      	b.n	8001afc <UART_SetConfig+0x290>

08001bf0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001bf0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bf2:	07db      	lsls	r3, r3, #31
 8001bf4:	d506      	bpl.n	8001c04 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001bf6:	6802      	ldr	r2, [r0, #0]
 8001bf8:	6853      	ldr	r3, [r2, #4]
 8001bfa:	492c      	ldr	r1, [pc, #176]	; (8001cac <UART_AdvFeatureConfig+0xbc>)
 8001bfc:	400b      	ands	r3, r1
 8001bfe:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001c00:	430b      	orrs	r3, r1
 8001c02:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c06:	079b      	lsls	r3, r3, #30
 8001c08:	d506      	bpl.n	8001c18 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c0a:	6802      	ldr	r2, [r0, #0]
 8001c0c:	6853      	ldr	r3, [r2, #4]
 8001c0e:	4928      	ldr	r1, [pc, #160]	; (8001cb0 <UART_AdvFeatureConfig+0xc0>)
 8001c10:	400b      	ands	r3, r1
 8001c12:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001c14:	430b      	orrs	r3, r1
 8001c16:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c1a:	075b      	lsls	r3, r3, #29
 8001c1c:	d506      	bpl.n	8001c2c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001c1e:	6802      	ldr	r2, [r0, #0]
 8001c20:	6853      	ldr	r3, [r2, #4]
 8001c22:	4924      	ldr	r1, [pc, #144]	; (8001cb4 <UART_AdvFeatureConfig+0xc4>)
 8001c24:	400b      	ands	r3, r1
 8001c26:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001c2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c2e:	071b      	lsls	r3, r3, #28
 8001c30:	d506      	bpl.n	8001c40 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001c32:	6802      	ldr	r2, [r0, #0]
 8001c34:	6853      	ldr	r3, [r2, #4]
 8001c36:	4920      	ldr	r1, [pc, #128]	; (8001cb8 <UART_AdvFeatureConfig+0xc8>)
 8001c38:	400b      	ands	r3, r1
 8001c3a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001c40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c42:	06db      	lsls	r3, r3, #27
 8001c44:	d506      	bpl.n	8001c54 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001c46:	6802      	ldr	r2, [r0, #0]
 8001c48:	6893      	ldr	r3, [r2, #8]
 8001c4a:	491c      	ldr	r1, [pc, #112]	; (8001cbc <UART_AdvFeatureConfig+0xcc>)
 8001c4c:	400b      	ands	r3, r1
 8001c4e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001c50:	430b      	orrs	r3, r1
 8001c52:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001c54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c56:	069b      	lsls	r3, r3, #26
 8001c58:	d506      	bpl.n	8001c68 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001c5a:	6802      	ldr	r2, [r0, #0]
 8001c5c:	6893      	ldr	r3, [r2, #8]
 8001c5e:	4918      	ldr	r1, [pc, #96]	; (8001cc0 <UART_AdvFeatureConfig+0xd0>)
 8001c60:	400b      	ands	r3, r1
 8001c62:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001c64:	430b      	orrs	r3, r1
 8001c66:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001c68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c6a:	065b      	lsls	r3, r3, #25
 8001c6c:	d50b      	bpl.n	8001c86 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001c6e:	6802      	ldr	r2, [r0, #0]
 8001c70:	6853      	ldr	r3, [r2, #4]
 8001c72:	4914      	ldr	r1, [pc, #80]	; (8001cc4 <UART_AdvFeatureConfig+0xd4>)
 8001c74:	400b      	ands	r3, r1
 8001c76:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	035b      	lsls	r3, r3, #13
 8001c80:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d00a      	beq.n	8001c9c <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001c86:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	d506      	bpl.n	8001c9a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001c8c:	6802      	ldr	r2, [r0, #0]
 8001c8e:	6853      	ldr	r3, [r2, #4]
 8001c90:	490d      	ldr	r1, [pc, #52]	; (8001cc8 <UART_AdvFeatureConfig+0xd8>)
 8001c92:	400b      	ands	r3, r1
 8001c94:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001c96:	430b      	orrs	r3, r1
 8001c98:	6053      	str	r3, [r2, #4]
}
 8001c9a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001c9c:	6802      	ldr	r2, [r0, #0]
 8001c9e:	6853      	ldr	r3, [r2, #4]
 8001ca0:	490a      	ldr	r1, [pc, #40]	; (8001ccc <UART_AdvFeatureConfig+0xdc>)
 8001ca2:	400b      	ands	r3, r1
 8001ca4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001ca6:	430b      	orrs	r3, r1
 8001ca8:	6053      	str	r3, [r2, #4]
 8001caa:	e7ec      	b.n	8001c86 <UART_AdvFeatureConfig+0x96>
 8001cac:	fffdffff 	.word	0xfffdffff
 8001cb0:	fffeffff 	.word	0xfffeffff
 8001cb4:	fffbffff 	.word	0xfffbffff
 8001cb8:	ffff7fff 	.word	0xffff7fff
 8001cbc:	ffffefff 	.word	0xffffefff
 8001cc0:	ffffdfff 	.word	0xffffdfff
 8001cc4:	ffefffff 	.word	0xffefffff
 8001cc8:	fff7ffff 	.word	0xfff7ffff
 8001ccc:	ff9fffff 	.word	0xff9fffff

08001cd0 <UART_WaitOnFlagUntilTimeout>:
{
 8001cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cd2:	46c6      	mov	lr, r8
 8001cd4:	b500      	push	{lr}
 8001cd6:	0006      	movs	r6, r0
 8001cd8:	000c      	movs	r4, r1
 8001cda:	0017      	movs	r7, r2
 8001cdc:	4698      	mov	r8, r3
 8001cde:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ce0:	6833      	ldr	r3, [r6, #0]
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	4023      	ands	r3, r4
 8001ce6:	1b1b      	subs	r3, r3, r4
 8001ce8:	425a      	negs	r2, r3
 8001cea:	4153      	adcs	r3, r2
 8001cec:	42bb      	cmp	r3, r7
 8001cee:	d11c      	bne.n	8001d2a <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 8001cf0:	1c6b      	adds	r3, r5, #1
 8001cf2:	d0f5      	beq.n	8001ce0 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf4:	f7fe fbdc 	bl	80004b0 <HAL_GetTick>
 8001cf8:	4643      	mov	r3, r8
 8001cfa:	1ac0      	subs	r0, r0, r3
 8001cfc:	42a8      	cmp	r0, r5
 8001cfe:	d801      	bhi.n	8001d04 <UART_WaitOnFlagUntilTimeout+0x34>
 8001d00:	2d00      	cmp	r5, #0
 8001d02:	d1ed      	bne.n	8001ce0 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d04:	6832      	ldr	r2, [r6, #0]
 8001d06:	6813      	ldr	r3, [r2, #0]
 8001d08:	490a      	ldr	r1, [pc, #40]	; (8001d34 <UART_WaitOnFlagUntilTimeout+0x64>)
 8001d0a:	400b      	ands	r3, r1
 8001d0c:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d0e:	6832      	ldr	r2, [r6, #0]
 8001d10:	6893      	ldr	r3, [r2, #8]
 8001d12:	31a3      	adds	r1, #163	; 0xa3
 8001d14:	31ff      	adds	r1, #255	; 0xff
 8001d16:	438b      	bics	r3, r1
 8001d18:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	6773      	str	r3, [r6, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001d1e:	67b3      	str	r3, [r6, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001d20:	3350      	adds	r3, #80	; 0x50
 8001d22:	2200      	movs	r2, #0
 8001d24:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8001d26:	2003      	movs	r0, #3
 8001d28:	e000      	b.n	8001d2c <UART_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 8001d2a:	2000      	movs	r0, #0
}
 8001d2c:	bc04      	pop	{r2}
 8001d2e:	4690      	mov	r8, r2
 8001d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	fffffe5f 	.word	0xfffffe5f

08001d38 <HAL_UART_Transmit>:
{
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	0004      	movs	r4, r0
 8001d3e:	000e      	movs	r6, r1
 8001d40:	0017      	movs	r7, r2
 8001d42:	001d      	movs	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001d44:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d15f      	bne.n	8001e0a <HAL_UART_Transmit+0xd2>
    if ((pData == NULL) || (Size == 0U))
 8001d4a:	2900      	cmp	r1, #0
 8001d4c:	d060      	beq.n	8001e10 <HAL_UART_Transmit+0xd8>
 8001d4e:	2a00      	cmp	r2, #0
 8001d50:	d060      	beq.n	8001e14 <HAL_UART_Transmit+0xdc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	015b      	lsls	r3, r3, #5
 8001d56:	6882      	ldr	r2, [r0, #8]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d018      	beq.n	8001d8e <HAL_UART_Transmit+0x56>
    __HAL_LOCK(huart);
 8001d5c:	2370      	movs	r3, #112	; 0x70
 8001d5e:	5ce3      	ldrb	r3, [r4, r3]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d059      	beq.n	8001e18 <HAL_UART_Transmit+0xe0>
 8001d64:	2370      	movs	r3, #112	; 0x70
 8001d66:	2201      	movs	r2, #1
 8001d68:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d6e:	3321      	adds	r3, #33	; 0x21
 8001d70:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8001d72:	f7fe fb9d 	bl	80004b0 <HAL_GetTick>
 8001d76:	9003      	str	r0, [sp, #12]
    huart->TxXferSize  = Size;
 8001d78:	2350      	movs	r3, #80	; 0x50
 8001d7a:	52e7      	strh	r7, [r4, r3]
    huart->TxXferCount = Size;
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	52e7      	strh	r7, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	015b      	lsls	r3, r3, #5
 8001d84:	68a2      	ldr	r2, [r4, #8]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d008      	beq.n	8001d9c <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8001d8a:	2700      	movs	r7, #0
 8001d8c:	e016      	b.n	8001dbc <HAL_UART_Transmit+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d8e:	6903      	ldr	r3, [r0, #16]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1e3      	bne.n	8001d5c <HAL_UART_Transmit+0x24>
      if ((((uint32_t)pData) & 1) != 0)
 8001d94:	07cb      	lsls	r3, r1, #31
 8001d96:	d5e1      	bpl.n	8001d5c <HAL_UART_Transmit+0x24>
        return  HAL_ERROR;
 8001d98:	2001      	movs	r0, #1
 8001d9a:	e037      	b.n	8001e0c <HAL_UART_Transmit+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d9c:	6923      	ldr	r3, [r4, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d021      	beq.n	8001de6 <HAL_UART_Transmit+0xae>
      pdata16bits = NULL;
 8001da2:	2700      	movs	r7, #0
 8001da4:	e00a      	b.n	8001dbc <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001da6:	883b      	ldrh	r3, [r7, #0]
 8001da8:	6822      	ldr	r2, [r4, #0]
 8001daa:	05db      	lsls	r3, r3, #23
 8001dac:	0ddb      	lsrs	r3, r3, #23
 8001dae:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8001db0:	3702      	adds	r7, #2
      huart->TxXferCount--;
 8001db2:	2252      	movs	r2, #82	; 0x52
 8001db4:	5aa3      	ldrh	r3, [r4, r2]
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	52a3      	strh	r3, [r4, r2]
    while (huart->TxXferCount > 0U)
 8001dbc:	2352      	movs	r3, #82	; 0x52
 8001dbe:	5ae3      	ldrh	r3, [r4, r3]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d012      	beq.n	8001dec <HAL_UART_Transmit+0xb4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001dc6:	9500      	str	r5, [sp, #0]
 8001dc8:	9b03      	ldr	r3, [sp, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	0020      	movs	r0, r4
 8001dd0:	f7ff ff7e 	bl	8001cd0 <UART_WaitOnFlagUntilTimeout>
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	d121      	bne.n	8001e1c <HAL_UART_Transmit+0xe4>
      if (pdata8bits == NULL)
 8001dd8:	2e00      	cmp	r6, #0
 8001dda:	d0e4      	beq.n	8001da6 <HAL_UART_Transmit+0x6e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ddc:	7832      	ldrb	r2, [r6, #0]
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001de2:	3601      	adds	r6, #1
 8001de4:	e7e5      	b.n	8001db2 <HAL_UART_Transmit+0x7a>
      pdata16bits = (uint16_t *) pData;
 8001de6:	0037      	movs	r7, r6
      pdata8bits  = NULL;
 8001de8:	2600      	movs	r6, #0
 8001dea:	e7e7      	b.n	8001dbc <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dec:	9500      	str	r5, [sp, #0]
 8001dee:	9b03      	ldr	r3, [sp, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	2140      	movs	r1, #64	; 0x40
 8001df4:	0020      	movs	r0, r4
 8001df6:	f7ff ff6b 	bl	8001cd0 <UART_WaitOnFlagUntilTimeout>
 8001dfa:	2800      	cmp	r0, #0
 8001dfc:	d110      	bne.n	8001e20 <HAL_UART_Transmit+0xe8>
    huart->gState = HAL_UART_STATE_READY;
 8001dfe:	2320      	movs	r3, #32
 8001e00:	6763      	str	r3, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 8001e02:	3350      	adds	r3, #80	; 0x50
 8001e04:	2200      	movs	r2, #0
 8001e06:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8001e08:	e000      	b.n	8001e0c <HAL_UART_Transmit+0xd4>
    return HAL_BUSY;
 8001e0a:	2002      	movs	r0, #2
}
 8001e0c:	b005      	add	sp, #20
 8001e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8001e10:	2001      	movs	r0, #1
 8001e12:	e7fb      	b.n	8001e0c <HAL_UART_Transmit+0xd4>
 8001e14:	2001      	movs	r0, #1
 8001e16:	e7f9      	b.n	8001e0c <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 8001e18:	2002      	movs	r0, #2
 8001e1a:	e7f7      	b.n	8001e0c <HAL_UART_Transmit+0xd4>
        return HAL_TIMEOUT;
 8001e1c:	2003      	movs	r0, #3
 8001e1e:	e7f5      	b.n	8001e0c <HAL_UART_Transmit+0xd4>
      return HAL_TIMEOUT;
 8001e20:	2003      	movs	r0, #3
 8001e22:	e7f3      	b.n	8001e0c <HAL_UART_Transmit+0xd4>

08001e24 <UART_CheckIdleState>:
{
 8001e24:	b530      	push	{r4, r5, lr}
 8001e26:	b083      	sub	sp, #12
 8001e28:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001e2e:	f7fe fb3f 	bl	80004b0 <HAL_GetTick>
 8001e32:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	071b      	lsls	r3, r3, #28
 8001e3a:	d40c      	bmi.n	8001e56 <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	075b      	lsls	r3, r3, #29
 8001e42:	d415      	bmi.n	8001e70 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8001e44:	2320      	movs	r3, #32
 8001e46:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001e48:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001e4a:	3350      	adds	r3, #80	; 0x50
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8001e50:	2000      	movs	r0, #0
}
 8001e52:	b003      	add	sp, #12
 8001e54:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e56:	2180      	movs	r1, #128	; 0x80
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <UART_CheckIdleState+0x68>)
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	2200      	movs	r2, #0
 8001e60:	0389      	lsls	r1, r1, #14
 8001e62:	0020      	movs	r0, r4
 8001e64:	f7ff ff34 	bl	8001cd0 <UART_WaitOnFlagUntilTimeout>
 8001e68:	2800      	cmp	r0, #0
 8001e6a:	d0e7      	beq.n	8001e3c <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8001e6c:	2003      	movs	r0, #3
 8001e6e:	e7f0      	b.n	8001e52 <UART_CheckIdleState+0x2e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e70:	2180      	movs	r1, #128	; 0x80
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <UART_CheckIdleState+0x68>)
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	002b      	movs	r3, r5
 8001e78:	2200      	movs	r2, #0
 8001e7a:	03c9      	lsls	r1, r1, #15
 8001e7c:	0020      	movs	r0, r4
 8001e7e:	f7ff ff27 	bl	8001cd0 <UART_WaitOnFlagUntilTimeout>
 8001e82:	2800      	cmp	r0, #0
 8001e84:	d0de      	beq.n	8001e44 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8001e86:	2003      	movs	r0, #3
 8001e88:	e7e3      	b.n	8001e52 <UART_CheckIdleState+0x2e>
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	01ffffff 	.word	0x01ffffff

08001e90 <HAL_UART_Init>:
{
 8001e90:	b510      	push	{r4, lr}
 8001e92:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001e94:	d02e      	beq.n	8001ef4 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001e96:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d021      	beq.n	8001ee0 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001e9c:	2324      	movs	r3, #36	; 0x24
 8001e9e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001ea0:	6822      	ldr	r2, [r4, #0]
 8001ea2:	6813      	ldr	r3, [r2, #0]
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	438b      	bics	r3, r1
 8001ea8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001eaa:	0020      	movs	r0, r4
 8001eac:	f7ff fcde 	bl	800186c <UART_SetConfig>
 8001eb0:	2801      	cmp	r0, #1
 8001eb2:	d014      	beq.n	8001ede <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001eb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d118      	bne.n	8001eec <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eba:	6822      	ldr	r2, [r4, #0]
 8001ebc:	6853      	ldr	r3, [r2, #4]
 8001ebe:	490e      	ldr	r1, [pc, #56]	; (8001ef8 <HAL_UART_Init+0x68>)
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ec4:	6822      	ldr	r2, [r4, #0]
 8001ec6:	6893      	ldr	r3, [r2, #8]
 8001ec8:	212a      	movs	r1, #42	; 0x2a
 8001eca:	438b      	bics	r3, r1
 8001ecc:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001ece:	6822      	ldr	r2, [r4, #0]
 8001ed0:	6813      	ldr	r3, [r2, #0]
 8001ed2:	3929      	subs	r1, #41	; 0x29
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001ed8:	0020      	movs	r0, r4
 8001eda:	f7ff ffa3 	bl	8001e24 <UART_CheckIdleState>
}
 8001ede:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001ee0:	3370      	adds	r3, #112	; 0x70
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8001ee6:	f000 fb63 	bl	80025b0 <HAL_UART_MspInit>
 8001eea:	e7d7      	b.n	8001e9c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8001eec:	0020      	movs	r0, r4
 8001eee:	f7ff fe7f 	bl	8001bf0 <UART_AdvFeatureConfig>
 8001ef2:	e7e2      	b.n	8001eba <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	e7f2      	b.n	8001ede <HAL_UART_Init+0x4e>
 8001ef8:	ffffb7ff 	.word	0xffffb7ff

08001efc <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8001efc:	4770      	bx	lr
	...

08001f00 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001f00:	b500      	push	{lr}
 8001f02:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f04:	4a09      	ldr	r2, [pc, #36]	; (8001f2c <MX_DMA_Init+0x2c>)
 8001f06:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001f08:	2301      	movs	r3, #1
 8001f0a:	4319      	orrs	r1, r3
 8001f0c:	6311      	str	r1, [r2, #48]	; 0x30
 8001f0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f10:	4013      	ands	r3, r2
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	200a      	movs	r0, #10
 8001f1c:	f7fe fadc 	bl	80004d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001f20:	200a      	movs	r0, #10
 8001f22:	f7fe fb09 	bl	8000538 <HAL_NVIC_EnableIRQ>

}
 8001f26:	b003      	add	sp, #12
 8001f28:	bd00      	pop	{pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	40021000 	.word	0x40021000

08001f30 <NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f30:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <NVIC_SystemReset+0x14>)
 8001f36:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <NVIC_SystemReset+0x18>)
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	e7fd      	b.n	8001f3e <NVIC_SystemReset+0xe>
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	e000ed00 	.word	0xe000ed00
 8001f48:	05fa0004 	.word	0x05fa0004

08001f4c <clean_rx_buffer>:
static uint32_t device_id;




void clean_rx_buffer(){
 8001f4c:	b510      	push	{r4, lr}
	memset(rx_buffer, ' ', RX_BUFFER_SIZE);
 8001f4e:	2264      	movs	r2, #100	; 0x64
 8001f50:	2120      	movs	r1, #32
 8001f52:	4802      	ldr	r0, [pc, #8]	; (8001f5c <clean_rx_buffer+0x10>)
 8001f54:	f000 fc1f 	bl	8002796 <memset>
}
 8001f58:	bd10      	pop	{r4, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	20000084 	.word	0x20000084

08001f60 <disable_passthrough>:


void disable_passthrough(){
 8001f60:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&ESP_UART, (uint8_t*) "+++", 3, HAL_MAX_DELAY);
 8001f62:	2301      	movs	r3, #1
 8001f64:	4c09      	ldr	r4, [pc, #36]	; (8001f8c <disable_passthrough+0x2c>)
 8001f66:	425b      	negs	r3, r3
 8001f68:	2203      	movs	r2, #3
 8001f6a:	4909      	ldr	r1, [pc, #36]	; (8001f90 <disable_passthrough+0x30>)
 8001f6c:	0020      	movs	r0, r4
 8001f6e:	f7ff fee3 	bl	8001d38 <HAL_UART_Transmit>
	HAL_UART_Abort(&ESP_UART);
 8001f72:	0020      	movs	r0, r4
 8001f74:	f7ff fb02 	bl	800157c <HAL_UART_Abort>
	HAL_UART_Receive_IT(&huart1, rx_buffer, RX_BUFFER_SIZE);
 8001f78:	2264      	movs	r2, #100	; 0x64
 8001f7a:	4906      	ldr	r1, [pc, #24]	; (8001f94 <disable_passthrough+0x34>)
 8001f7c:	0020      	movs	r0, r4
 8001f7e:	f7ff fa7d 	bl	800147c <HAL_UART_Receive_IT>
	HAL_Delay(1100);
 8001f82:	4805      	ldr	r0, [pc, #20]	; (8001f98 <disable_passthrough+0x38>)
 8001f84:	f7fe fa9a 	bl	80004bc <HAL_Delay>
}
 8001f88:	bd10      	pop	{r4, pc}
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	20000204 	.word	0x20000204
 8001f90:	080029b8 	.word	0x080029b8
 8001f94:	20000084 	.word	0x20000084
 8001f98:	0000044c 	.word	0x0000044c

08001f9c <save_device_id>:
	esp_wait_for_response("OK", 1000);
	esp_status = Server_Connected;
}

void save_device_id(uint32_t id){
	device_id = id;
 8001f9c:	4b01      	ldr	r3, [pc, #4]	; (8001fa4 <save_device_id+0x8>)
 8001f9e:	6658      	str	r0, [r3, #100]	; 0x64
}
 8001fa0:	4770      	bx	lr
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	20000084 	.word	0x20000084

08001fa8 <esp_send_data>:
	char buffer[20];
	itoa((device_id*10000 + PAIRING), buffer, 10);
	esp_send_data(buffer);
}

void esp_send_data(const char* data){
 8001fa8:	b570      	push	{r4, r5, r6, lr}
 8001faa:	0005      	movs	r5, r0
	strcpy((char*)tx_buffer, data);
 8001fac:	4e12      	ldr	r6, [pc, #72]	; (8001ff8 <esp_send_data+0x50>)
 8001fae:	0034      	movs	r4, r6
 8001fb0:	3468      	adds	r4, #104	; 0x68
 8001fb2:	0001      	movs	r1, r0
 8001fb4:	0020      	movs	r0, r4
 8001fb6:	f000 fc67 	bl	8002888 <strcpy>
	strcat((char*)tx_buffer, "\r\n");
 8001fba:	0020      	movs	r0, r4
 8001fbc:	f7fe f8a4 	bl	8000108 <strlen>
 8001fc0:	1820      	adds	r0, r4, r0
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	490d      	ldr	r1, [pc, #52]	; (8001ffc <esp_send_data+0x54>)
 8001fc6:	f000 fbdd 	bl	8002784 <memcpy>
	HAL_UART_Transmit(&ESP_UART, tx_buffer, strlen(data)+2, HAL_MAX_DELAY);
 8001fca:	0028      	movs	r0, r5
 8001fcc:	f7fe f89c 	bl	8000108 <strlen>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	3002      	adds	r0, #2
 8001fd4:	b282      	uxth	r2, r0
 8001fd6:	4d0a      	ldr	r5, [pc, #40]	; (8002000 <esp_send_data+0x58>)
 8001fd8:	425b      	negs	r3, r3
 8001fda:	0021      	movs	r1, r4
 8001fdc:	0028      	movs	r0, r5
 8001fde:	f7ff feab 	bl	8001d38 <HAL_UART_Transmit>
	HAL_UART_Abort(&ESP_UART);
 8001fe2:	0028      	movs	r0, r5
 8001fe4:	f7ff faca 	bl	800157c <HAL_UART_Abort>
	HAL_UART_Receive_IT(&huart1, rx_buffer, RX_BUFFER_SIZE);
 8001fe8:	2264      	movs	r2, #100	; 0x64
 8001fea:	0031      	movs	r1, r6
 8001fec:	0028      	movs	r0, r5
 8001fee:	f7ff fa45 	bl	800147c <HAL_UART_Receive_IT>
	clean_rx_buffer();
 8001ff2:	f7ff ffab 	bl	8001f4c <clean_rx_buffer>
}
 8001ff6:	bd70      	pop	{r4, r5, r6, pc}
 8001ff8:	20000084 	.word	0x20000084
 8001ffc:	080029bc 	.word	0x080029bc
 8002000:	20000204 	.word	0x20000204

08002004 <pair_device>:
void pair_device(){
 8002004:	b500      	push	{lr}
 8002006:	b087      	sub	sp, #28
	itoa((device_id*10000 + PAIRING), buffer, 10);
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <pair_device+0x24>)
 800200a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800200c:	4807      	ldr	r0, [pc, #28]	; (800202c <pair_device+0x28>)
 800200e:	4358      	muls	r0, r3
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <pair_device+0x2c>)
 8002012:	469c      	mov	ip, r3
 8002014:	4460      	add	r0, ip
 8002016:	220a      	movs	r2, #10
 8002018:	a901      	add	r1, sp, #4
 800201a:	f000 fba5 	bl	8002768 <itoa>
	esp_send_data(buffer);
 800201e:	a801      	add	r0, sp, #4
 8002020:	f7ff ffc2 	bl	8001fa8 <esp_send_data>
}
 8002024:	b007      	add	sp, #28
 8002026:	bd00      	pop	{pc}
 8002028:	20000084 	.word	0x20000084
 800202c:	00002710 	.word	0x00002710
 8002030:	0000270f 	.word	0x0000270f

08002034 <search_rx_buffer>:


_Bool search_rx_buffer(const char *str){
 8002034:	b510      	push	{r4, lr}
 8002036:	0001      	movs	r1, r0
	return NULL != strstr((const char*)rx_buffer, str);
 8002038:	4803      	ldr	r0, [pc, #12]	; (8002048 <search_rx_buffer+0x14>)
 800203a:	f000 fc2d 	bl	8002898 <strstr>
 800203e:	1e43      	subs	r3, r0, #1
 8002040:	4198      	sbcs	r0, r3
 8002042:	b2c0      	uxtb	r0, r0
}
 8002044:	bd10      	pop	{r4, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	20000084 	.word	0x20000084

0800204c <esp_wait_for_response>:

void esp_wait_for_response(const char* response, uint16_t timeout_ms){
 800204c:	b570      	push	{r4, r5, r6, lr}
 800204e:	0005      	movs	r5, r0
 8002050:	0008      	movs	r0, r1
	Task time_out_task = task_make(timeout_ms, (void*)NVIC_SystemReset);
 8002052:	4909      	ldr	r1, [pc, #36]	; (8002078 <esp_wait_for_response+0x2c>)
 8002054:	f000 fa24 	bl	80024a0 <task_make>
 8002058:	0004      	movs	r4, r0
	task_start(time_out_task);
 800205a:	f000 fa4b 	bl	80024f4 <task_start>
	while(!search_rx_buffer(response) && !task_state(time_out_task, NULL));
 800205e:	0028      	movs	r0, r5
 8002060:	f7ff ffe8 	bl	8002034 <search_rx_buffer>
 8002064:	2800      	cmp	r0, #0
 8002066:	d105      	bne.n	8002074 <esp_wait_for_response+0x28>
 8002068:	2100      	movs	r1, #0
 800206a:	0020      	movs	r0, r4
 800206c:	f000 fa29 	bl	80024c2 <task_state>
 8002070:	2800      	cmp	r0, #0
 8002072:	d0f4      	beq.n	800205e <esp_wait_for_response+0x12>
}
 8002074:	bd70      	pop	{r4, r5, r6, pc}
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	08001f31 	.word	0x08001f31

0800207c <enable_passthrough>:
void enable_passthrough(){
 800207c:	b510      	push	{r4, lr}
	esp_send_data("AT+CIPMODE=1");
 800207e:	480a      	ldr	r0, [pc, #40]	; (80020a8 <enable_passthrough+0x2c>)
 8002080:	f7ff ff92 	bl	8001fa8 <esp_send_data>
	esp_wait_for_response("OK", 500);
 8002084:	24fa      	movs	r4, #250	; 0xfa
 8002086:	0064      	lsls	r4, r4, #1
 8002088:	0021      	movs	r1, r4
 800208a:	4808      	ldr	r0, [pc, #32]	; (80020ac <enable_passthrough+0x30>)
 800208c:	f7ff ffde 	bl	800204c <esp_wait_for_response>
	esp_send_data("AT+CIPSEND");
 8002090:	4807      	ldr	r0, [pc, #28]	; (80020b0 <enable_passthrough+0x34>)
 8002092:	f7ff ff89 	bl	8001fa8 <esp_send_data>
	esp_wait_for_response(">", 500);
 8002096:	0021      	movs	r1, r4
 8002098:	4806      	ldr	r0, [pc, #24]	; (80020b4 <enable_passthrough+0x38>)
 800209a:	f7ff ffd7 	bl	800204c <esp_wait_for_response>
	esp_status = Passthrough;
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <enable_passthrough+0x3c>)
 80020a0:	2203      	movs	r2, #3
 80020a2:	701a      	strb	r2, [r3, #0]
}
 80020a4:	bd10      	pop	{r4, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	080029c0 	.word	0x080029c0
 80020ac:	080029d0 	.word	0x080029d0
 80020b0:	080029d4 	.word	0x080029d4
 80020b4:	080029e0 	.word	0x080029e0
 80020b8:	20000134 	.word	0x20000134

080020bc <connect_to_server>:
void connect_to_server(){
 80020bc:	b510      	push	{r4, lr}
	esp_send_data("AT+CIPSTART=\"TCP\",\"192.168.0.143\",1337");
 80020be:	4806      	ldr	r0, [pc, #24]	; (80020d8 <connect_to_server+0x1c>)
 80020c0:	f7ff ff72 	bl	8001fa8 <esp_send_data>
	esp_wait_for_response("OK", 1000);
 80020c4:	21fa      	movs	r1, #250	; 0xfa
 80020c6:	0089      	lsls	r1, r1, #2
 80020c8:	4804      	ldr	r0, [pc, #16]	; (80020dc <connect_to_server+0x20>)
 80020ca:	f7ff ffbf 	bl	800204c <esp_wait_for_response>
	esp_status = Server_Connected;
 80020ce:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <connect_to_server+0x24>)
 80020d0:	2202      	movs	r2, #2
 80020d2:	701a      	strb	r2, [r3, #0]
}
 80020d4:	bd10      	pop	{r4, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	080029e4 	.word	0x080029e4
 80020dc:	080029d0 	.word	0x080029d0
 80020e0:	20000134 	.word	0x20000134

080020e4 <set_esp_status>:


void set_esp_status(){
 80020e4:	b510      	push	{r4, lr}
	esp_send_data("AT+CIPSTATUS");
 80020e6:	4811      	ldr	r0, [pc, #68]	; (800212c <set_esp_status+0x48>)
 80020e8:	f7ff ff5e 	bl	8001fa8 <esp_send_data>
	esp_wait_for_response("OK", 500);
 80020ec:	21fa      	movs	r1, #250	; 0xfa
 80020ee:	0049      	lsls	r1, r1, #1
 80020f0:	480f      	ldr	r0, [pc, #60]	; (8002130 <set_esp_status+0x4c>)
 80020f2:	f7ff ffab 	bl	800204c <esp_wait_for_response>
	if (search_rx_buffer("STATUS:2") || search_rx_buffer("STATUS:4"))
 80020f6:	480f      	ldr	r0, [pc, #60]	; (8002134 <set_esp_status+0x50>)
 80020f8:	f7ff ff9c 	bl	8002034 <search_rx_buffer>
 80020fc:	2800      	cmp	r0, #0
 80020fe:	d10d      	bne.n	800211c <set_esp_status+0x38>
 8002100:	480d      	ldr	r0, [pc, #52]	; (8002138 <set_esp_status+0x54>)
 8002102:	f7ff ff97 	bl	8002034 <search_rx_buffer>
 8002106:	2800      	cmp	r0, #0
 8002108:	d108      	bne.n	800211c <set_esp_status+0x38>
		esp_status = AP_Connected;
	else if (search_rx_buffer("STATUS:3"))
 800210a:	480c      	ldr	r0, [pc, #48]	; (800213c <set_esp_status+0x58>)
 800210c:	f7ff ff92 	bl	8002034 <search_rx_buffer>
 8002110:	2800      	cmp	r0, #0
 8002112:	d107      	bne.n	8002124 <set_esp_status+0x40>
		esp_status = Server_Connected;
	else
		esp_status = AP_Disconnected;
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <set_esp_status+0x5c>)
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]

}
 800211a:	e002      	b.n	8002122 <set_esp_status+0x3e>
		esp_status = AP_Connected;
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <set_esp_status+0x5c>)
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
}
 8002122:	bd10      	pop	{r4, pc}
		esp_status = Server_Connected;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <set_esp_status+0x5c>)
 8002126:	2202      	movs	r2, #2
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	e7fa      	b.n	8002122 <set_esp_status+0x3e>
 800212c:	08002a0c 	.word	0x08002a0c
 8002130:	080029d0 	.word	0x080029d0
 8002134:	08002a1c 	.word	0x08002a1c
 8002138:	08002a28 	.word	0x08002a28
 800213c:	08002a34 	.word	0x08002a34
 8002140:	20000134 	.word	0x20000134

08002144 <esp_initialize>:

void esp_initialize(uint32_t device_id){
 8002144:	b510      	push	{r4, lr}
 8002146:	0004      	movs	r4, r0
	HAL_Delay(5000);
 8002148:	480f      	ldr	r0, [pc, #60]	; (8002188 <esp_initialize+0x44>)
 800214a:	f7fe f9b7 	bl	80004bc <HAL_Delay>
	save_device_id(device_id);
 800214e:	0020      	movs	r0, r4
 8002150:	f7ff ff24 	bl	8001f9c <save_device_id>
	disable_passthrough();
 8002154:	f7ff ff04 	bl	8001f60 <disable_passthrough>
	set_esp_status();
 8002158:	f7ff ffc4 	bl	80020e4 <set_esp_status>

	if (esp_status == AP_Connected)
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <esp_initialize+0x48>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d008      	beq.n	8002176 <esp_initialize+0x32>
		connect_to_server();
	if (esp_status == Server_Connected)
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <esp_initialize+0x48>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d007      	beq.n	800217c <esp_initialize+0x38>
		enable_passthrough();
	if (esp_status == Passthrough)
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <esp_initialize+0x48>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b03      	cmp	r3, #3
 8002172:	d006      	beq.n	8002182 <esp_initialize+0x3e>
		pair_device();
	if (esp_status == AP_Disconnected){

	}

}
 8002174:	bd10      	pop	{r4, pc}
		connect_to_server();
 8002176:	f7ff ffa1 	bl	80020bc <connect_to_server>
 800217a:	e7f3      	b.n	8002164 <esp_initialize+0x20>
		enable_passthrough();
 800217c:	f7ff ff7e 	bl	800207c <enable_passthrough>
 8002180:	e7f4      	b.n	800216c <esp_initialize+0x28>
		pair_device();
 8002182:	f7ff ff3f 	bl	8002004 <pair_device>
}
 8002186:	e7f5      	b.n	8002174 <esp_initialize+0x30>
 8002188:	00001388 	.word	0x00001388
 800218c:	20000134 	.word	0x20000134

08002190 <esp_wps>:

void esp_wps(){
 8002190:	b510      	push	{r4, lr}
	disable_passthrough();
 8002192:	f7ff fee5 	bl	8001f60 <disable_passthrough>
	esp_send_data("AT+CWMODE=1");
 8002196:	4807      	ldr	r0, [pc, #28]	; (80021b4 <esp_wps+0x24>)
 8002198:	f7ff ff06 	bl	8001fa8 <esp_send_data>
	esp_send_data("AT+WPS=1");
 800219c:	4806      	ldr	r0, [pc, #24]	; (80021b8 <esp_wps+0x28>)
 800219e:	f7ff ff03 	bl	8001fa8 <esp_send_data>
	esp_wait_for_response("connecting", 12000);
 80021a2:	4906      	ldr	r1, [pc, #24]	; (80021bc <esp_wps+0x2c>)
 80021a4:	4806      	ldr	r0, [pc, #24]	; (80021c0 <esp_wps+0x30>)
 80021a6:	f7ff ff51 	bl	800204c <esp_wait_for_response>
	esp_initialize(device_id);
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <esp_wps+0x34>)
 80021ac:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80021ae:	f7ff ffc9 	bl	8002144 <esp_initialize>
}
 80021b2:	bd10      	pop	{r4, pc}
 80021b4:	08002a40 	.word	0x08002a40
 80021b8:	08002a4c 	.word	0x08002a4c
 80021bc:	00002ee0 	.word	0x00002ee0
 80021c0:	08002a58 	.word	0x08002a58
 80021c4:	20000084 	.word	0x20000084

080021c8 <esp_check_connection>:

void esp_check_connection(){
 80021c8:	b510      	push	{r4, lr}
	if (search_rx_buffer("Connected"))
 80021ca:	480c      	ldr	r0, [pc, #48]	; (80021fc <esp_check_connection+0x34>)
 80021cc:	f7ff ff32 	bl	8002034 <search_rx_buffer>
 80021d0:	2800      	cmp	r0, #0
 80021d2:	d10b      	bne.n	80021ec <esp_check_connection+0x24>
		pair_device();
	else if(search_rx_buffer("ERROR"))
 80021d4:	480a      	ldr	r0, [pc, #40]	; (8002200 <esp_check_connection+0x38>)
 80021d6:	f7ff ff2d 	bl	8002034 <search_rx_buffer>
 80021da:	2800      	cmp	r0, #0
 80021dc:	d109      	bne.n	80021f2 <esp_check_connection+0x2a>
		esp_initialize(device_id);
	else{
		LD2_GPIO_Port->ODR ^= LD2_Pin;
 80021de:	22a0      	movs	r2, #160	; 0xa0
 80021e0:	05d2      	lsls	r2, r2, #23
 80021e2:	6953      	ldr	r3, [r2, #20]
 80021e4:	2120      	movs	r1, #32
 80021e6:	404b      	eors	r3, r1
 80021e8:	6153      	str	r3, [r2, #20]
	}
}
 80021ea:	bd10      	pop	{r4, pc}
		pair_device();
 80021ec:	f7ff ff0a 	bl	8002004 <pair_device>
 80021f0:	e7fb      	b.n	80021ea <esp_check_connection+0x22>
		esp_initialize(device_id);
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <esp_check_connection+0x3c>)
 80021f4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80021f6:	f7ff ffa5 	bl	8002144 <esp_initialize>
 80021fa:	e7f6      	b.n	80021ea <esp_check_connection+0x22>
 80021fc:	08002a64 	.word	0x08002a64
 8002200:	08002a70 	.word	0x08002a70
 8002204:	20000084 	.word	0x20000084

08002208 <esp_uart_callback>:

void esp_uart_callback(){	//put this in UART rx_callback in main
 8002208:	b510      	push	{r4, lr}
	HAL_UART_Receive_IT(&huart1, rx_buffer, RX_BUFFER_SIZE);
 800220a:	2264      	movs	r2, #100	; 0x64
 800220c:	4902      	ldr	r1, [pc, #8]	; (8002218 <esp_uart_callback+0x10>)
 800220e:	4803      	ldr	r0, [pc, #12]	; (800221c <esp_uart_callback+0x14>)
 8002210:	f7ff f934 	bl	800147c <HAL_UART_Receive_IT>
}
 8002214:	bd10      	pop	{r4, pc}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	20000084 	.word	0x20000084
 800221c:	20000204 	.word	0x20000204

08002220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002222:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	2214      	movs	r2, #20
 8002226:	2100      	movs	r1, #0
 8002228:	a803      	add	r0, sp, #12
 800222a:	f000 fab4 	bl	8002796 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800222e:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <MX_GPIO_Init+0x98>)
 8002230:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002232:	2204      	movs	r2, #4
 8002234:	4311      	orrs	r1, r2
 8002236:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800223a:	400a      	ands	r2, r1
 800223c:	9200      	str	r2, [sp, #0]
 800223e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002242:	2780      	movs	r7, #128	; 0x80
 8002244:	433a      	orrs	r2, r7
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c
 8002248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224a:	403a      	ands	r2, r7
 800224c:	9201      	str	r2, [sp, #4]
 800224e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002252:	2501      	movs	r5, #1
 8002254:	432a      	orrs	r2, r5
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	402b      	ands	r3, r5
 800225c:	9302      	str	r3, [sp, #8]
 800225e:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002260:	2200      	movs	r2, #0
 8002262:	2120      	movs	r1, #32
 8002264:	20a0      	movs	r0, #160	; 0xa0
 8002266:	05c0      	lsls	r0, r0, #23
 8002268:	f7fe fb57 	bl	800091a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_PWR_GPIO_Port, ESP_PWR_Pin, GPIO_PIN_RESET);
 800226c:	4e13      	ldr	r6, [pc, #76]	; (80022bc <MX_GPIO_Init+0x9c>)
 800226e:	2200      	movs	r2, #0
 8002270:	2180      	movs	r1, #128	; 0x80
 8002272:	0030      	movs	r0, r6
 8002274:	f7fe fb51 	bl	800091a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	019b      	lsls	r3, r3, #6
 800227c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <MX_GPIO_Init+0xa0>)
 8002280:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2400      	movs	r4, #0
 8002284:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8002286:	a903      	add	r1, sp, #12
 8002288:	0030      	movs	r0, r6
 800228a:	f7fe fa71 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800228e:	2320      	movs	r3, #32
 8002290:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002292:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002298:	a903      	add	r1, sp, #12
 800229a:	20a0      	movs	r0, #160	; 0xa0
 800229c:	05c0      	lsls	r0, r0, #23
 800229e:	f7fe fa67 	bl	8000770 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP_PWR_Pin;
 80022a2:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(ESP_PWR_GPIO_Port, &GPIO_InitStruct);
 80022aa:	a903      	add	r1, sp, #12
 80022ac:	0030      	movs	r0, r6
 80022ae:	f7fe fa5f 	bl	8000770 <HAL_GPIO_Init>

}
 80022b2:	b009      	add	sp, #36	; 0x24
 80022b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	40021000 	.word	0x40021000
 80022bc:	50000800 	.word	0x50000800
 80022c0:	10110000 	.word	0x10110000

080022c4 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80022c4:	b510      	push	{r4, lr}
	if (huart == &ESP_UART){
 80022c6:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <HAL_UART_RxCpltCallback+0x10>)
 80022c8:	4298      	cmp	r0, r3
 80022ca:	d000      	beq.n	80022ce <HAL_UART_RxCpltCallback+0xa>
		esp_uart_callback();
	}
}
 80022cc:	bd10      	pop	{r4, pc}
		esp_uart_callback();
 80022ce:	f7ff ff9b 	bl	8002208 <esp_uart_callback>
}
 80022d2:	e7fb      	b.n	80022cc <HAL_UART_RxCpltCallback+0x8>
 80022d4:	20000204 	.word	0x20000204

080022d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022d8:	b530      	push	{r4, r5, lr}
 80022da:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022dc:	2238      	movs	r2, #56	; 0x38
 80022de:	2100      	movs	r1, #0
 80022e0:	a810      	add	r0, sp, #64	; 0x40
 80022e2:	f000 fa58 	bl	8002796 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022e6:	2214      	movs	r2, #20
 80022e8:	2100      	movs	r1, #0
 80022ea:	a80b      	add	r0, sp, #44	; 0x2c
 80022ec:	f000 fa53 	bl	8002796 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f0:	2228      	movs	r2, #40	; 0x28
 80022f2:	2100      	movs	r1, #0
 80022f4:	a801      	add	r0, sp, #4
 80022f6:	f000 fa4e 	bl	8002796 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022fa:	4912      	ldr	r1, [pc, #72]	; (8002344 <SystemClock_Config+0x6c>)
 80022fc:	680b      	ldr	r3, [r1, #0]
 80022fe:	4a12      	ldr	r2, [pc, #72]	; (8002348 <SystemClock_Config+0x70>)
 8002300:	401a      	ands	r2, r3
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800230a:	2302      	movs	r3, #2
 800230c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800230e:	2501      	movs	r5, #1
 8002310:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002312:	330e      	adds	r3, #14
 8002314:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002316:	2400      	movs	r4, #0
 8002318:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800231a:	a810      	add	r0, sp, #64	; 0x40
 800231c:	f7fe fb5c 	bl	80009d8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002320:	230f      	movs	r3, #15
 8002322:	930b      	str	r3, [sp, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002324:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002326:	3371      	adds	r3, #113	; 0x71
 8002328:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800232a:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800232c:	940f      	str	r4, [sp, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800232e:	2100      	movs	r1, #0
 8002330:	a80b      	add	r0, sp, #44	; 0x2c
 8002332:	f7fe fe19 	bl	8000f68 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002336:	9501      	str	r5, [sp, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002338:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800233a:	a801      	add	r0, sp, #4
 800233c:	f7fe ff0e 	bl	800115c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002340:	b01f      	add	sp, #124	; 0x7c
 8002342:	bd30      	pop	{r4, r5, pc}
 8002344:	40007000 	.word	0x40007000
 8002348:	ffffe7ff 	.word	0xffffe7ff

0800234c <main>:
{
 800234c:	b510      	push	{r4, lr}
  HAL_Init();
 800234e:	f7fe f893 	bl	8000478 <HAL_Init>
  SystemClock_Config();
 8002352:	f7ff ffc1 	bl	80022d8 <SystemClock_Config>
  MX_GPIO_Init();
 8002356:	f7ff ff63 	bl	8002220 <MX_GPIO_Init>
  MX_TIM6_Init();
 800235a:	f000 f8cf 	bl	80024fc <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800235e:	f000 f909 	bl	8002574 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8002362:	f7ff fdcd 	bl	8001f00 <MX_DMA_Init>
  LD2_GPIO_Port->BSRR = LD2_Pin;
 8002366:	23a0      	movs	r3, #160	; 0xa0
 8002368:	05db      	lsls	r3, r3, #23
 800236a:	2220      	movs	r2, #32
 800236c:	619a      	str	r2, [r3, #24]
  ESP_PWR_GPIO_Port->BSRR = ESP_PWR_Pin;	//enable ESP
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <main+0x5c>)
 8002370:	3260      	adds	r2, #96	; 0x60
 8002372:	619a      	str	r2, [r3, #24]
  esp_initialize(71);
 8002374:	2047      	movs	r0, #71	; 0x47
 8002376:	f7ff fee5 	bl	8002144 <esp_initialize>
  Task esp_check_task = task_make(2000, esp_check_connection);
 800237a:	20fa      	movs	r0, #250	; 0xfa
 800237c:	490b      	ldr	r1, [pc, #44]	; (80023ac <main+0x60>)
 800237e:	00c0      	lsls	r0, r0, #3
 8002380:	f000 f88e 	bl	80024a0 <task_make>
 8002384:	0004      	movs	r4, r0
  task_start(esp_check_task);
 8002386:	f000 f8b5 	bl	80024f4 <task_start>
 800238a:	e003      	b.n	8002394 <main+0x48>
	  task_state(esp_check_task, NULL);
 800238c:	2100      	movs	r1, #0
 800238e:	0020      	movs	r0, r4
 8002390:	f000 f897 	bl	80024c2 <task_state>
	  if (!HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin)){
 8002394:	2180      	movs	r1, #128	; 0x80
 8002396:	0189      	lsls	r1, r1, #6
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <main+0x5c>)
 800239a:	f7fe fab7 	bl	800090c <HAL_GPIO_ReadPin>
 800239e:	2800      	cmp	r0, #0
 80023a0:	d1f4      	bne.n	800238c <main+0x40>
		  esp_wps();
 80023a2:	f7ff fef5 	bl	8002190 <esp_wps>
 80023a6:	e7f1      	b.n	800238c <main+0x40>
 80023a8:	50000800 	.word	0x50000800
 80023ac:	080021c9 	.word	0x080021c9

080023b0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80023b0:	4770      	bx	lr
	...

080023b4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_MspInit+0x18>)
 80023b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b8:	2101      	movs	r1, #1
 80023ba:	430a      	orrs	r2, r1
 80023bc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80023c0:	2280      	movs	r2, #128	; 0x80
 80023c2:	0552      	lsls	r2, r2, #21
 80023c4:	430a      	orrs	r2, r1
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c8:	4770      	bx	lr
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	40021000 	.word	0x40021000

080023d0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023d0:	4770      	bx	lr

080023d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d2:	e7fe      	b.n	80023d2 <HardFault_Handler>

080023d4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023d4:	4770      	bx	lr

080023d6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023d6:	4770      	bx	lr

080023d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023da:	f7fe f861 	bl	80004a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023de:	bd10      	pop	{r4, pc}

080023e0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80023e0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80023e2:	4803      	ldr	r0, [pc, #12]	; (80023f0 <DMA1_Channel2_3_IRQHandler+0x10>)
 80023e4:	f7fe f965 	bl	80006b2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80023ea:	f7fe f962 	bl	80006b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80023ee:	bd10      	pop	{r4, pc}
 80023f0:	20000174 	.word	0x20000174
 80023f4:	200001bc 	.word	0x200001bc

080023f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80023f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023fa:	4802      	ldr	r0, [pc, #8]	; (8002404 <USART1_IRQHandler+0xc>)
 80023fc:	f7ff f98a 	bl	8001714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002400:	bd10      	pop	{r4, pc}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	20000204 	.word	0x20000204

08002408 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002408:	b510      	push	{r4, lr}
 800240a:	0003      	movs	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800240c:	4a0b      	ldr	r2, [pc, #44]	; (800243c <_sbrk+0x34>)
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	2a00      	cmp	r2, #0
 8002412:	d008      	beq.n	8002426 <_sbrk+0x1e>
		heap_end = &end;

	prev_heap_end = heap_end;
 8002414:	4a09      	ldr	r2, [pc, #36]	; (800243c <_sbrk+0x34>)
 8002416:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002418:	18c3      	adds	r3, r0, r3
 800241a:	466a      	mov	r2, sp
 800241c:	4293      	cmp	r3, r2
 800241e:	d806      	bhi.n	800242e <_sbrk+0x26>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002420:	4a06      	ldr	r2, [pc, #24]	; (800243c <_sbrk+0x34>)
 8002422:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8002424:	bd10      	pop	{r4, pc}
		heap_end = &end;
 8002426:	4a05      	ldr	r2, [pc, #20]	; (800243c <_sbrk+0x34>)
 8002428:	4905      	ldr	r1, [pc, #20]	; (8002440 <_sbrk+0x38>)
 800242a:	6011      	str	r1, [r2, #0]
 800242c:	e7f2      	b.n	8002414 <_sbrk+0xc>
		errno = ENOMEM;
 800242e:	f000 f959 	bl	80026e4 <__errno>
 8002432:	230c      	movs	r3, #12
 8002434:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002436:	2001      	movs	r0, #1
 8002438:	4240      	negs	r0, r0
 800243a:	e7f3      	b.n	8002424 <_sbrk+0x1c>
 800243c:	20000120 	.word	0x20000120
 8002440:	20000288 	.word	0x20000288

08002444 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002444:	4b10      	ldr	r3, [pc, #64]	; (8002488 <SystemInit+0x44>)
 8002446:	6819      	ldr	r1, [r3, #0]
 8002448:	2280      	movs	r2, #128	; 0x80
 800244a:	0052      	lsls	r2, r2, #1
 800244c:	430a      	orrs	r2, r1
 800244e:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	490e      	ldr	r1, [pc, #56]	; (800248c <SystemInit+0x48>)
 8002454:	400a      	ands	r2, r1
 8002456:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	490d      	ldr	r1, [pc, #52]	; (8002490 <SystemInit+0x4c>)
 800245c:	400a      	ands	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	2101      	movs	r1, #1
 8002464:	438a      	bics	r2, r1
 8002466:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	490a      	ldr	r1, [pc, #40]	; (8002494 <SystemInit+0x50>)
 800246c:	400a      	ands	r2, r1
 800246e:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	4909      	ldr	r1, [pc, #36]	; (8002498 <SystemInit+0x54>)
 8002474:	400a      	ands	r2, r1
 8002476:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800247c:	4b07      	ldr	r3, [pc, #28]	; (800249c <SystemInit+0x58>)
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	0512      	lsls	r2, r2, #20
 8002482:	609a      	str	r2, [r3, #8]
#endif
}
 8002484:	4770      	bx	lr
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	40021000 	.word	0x40021000
 800248c:	88ff400c 	.word	0x88ff400c
 8002490:	fef6fff6 	.word	0xfef6fff6
 8002494:	fffbffff 	.word	0xfffbffff
 8002498:	ff02ffff 	.word	0xff02ffff
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <task_make>:
	uint32_t lastTick;
	taskFuncptr taskFunc;
};


Task task_make(uint32_t interval_ms, taskFuncptr func) {
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	0006      	movs	r6, r0
 80024a4:	000d      	movs	r5, r1
	Task task = malloc( sizeof * task);
 80024a6:	2010      	movs	r0, #16
 80024a8:	f000 f962 	bl	8002770 <malloc>
 80024ac:	1e04      	subs	r4, r0, #0
	if (NULL != task){
 80024ae:	d006      	beq.n	80024be <task_make+0x1e>
		task->active = RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	7003      	strb	r3, [r0, #0]
		task->interval = interval_ms;
 80024b4:	6046      	str	r6, [r0, #4]
		task->taskFunc = func;
 80024b6:	60c5      	str	r5, [r0, #12]
		task->lastTick = HAL_GetTick();
 80024b8:	f7fd fffa 	bl	80004b0 <HAL_GetTick>
 80024bc:	60a0      	str	r0, [r4, #8]
	}
	return task;
}
 80024be:	0020      	movs	r0, r4
 80024c0:	bd70      	pop	{r4, r5, r6, pc}

080024c2 <task_state>:

void task_change(Task task, uint32_t interval){
	task->interval = interval;
}

_Bool task_state(Task task, void *args) {
 80024c2:	b570      	push	{r4, r5, r6, lr}
 80024c4:	0004      	movs	r4, r0
 80024c6:	000d      	movs	r5, r1
	if ((HAL_GetTick() - task->lastTick >= task->interval) && task->active) {
 80024c8:	f7fd fff2 	bl	80004b0 <HAL_GetTick>
 80024cc:	68a3      	ldr	r3, [r4, #8]
 80024ce:	1ac0      	subs	r0, r0, r3
 80024d0:	6863      	ldr	r3, [r4, #4]
 80024d2:	4298      	cmp	r0, r3
 80024d4:	d30b      	bcc.n	80024ee <task_state+0x2c>
 80024d6:	7826      	ldrb	r6, [r4, #0]
 80024d8:	2e00      	cmp	r6, #0
 80024da:	d009      	beq.n	80024f0 <task_state+0x2e>
		task->lastTick = HAL_GetTick();
 80024dc:	f7fd ffe8 	bl	80004b0 <HAL_GetTick>
 80024e0:	60a0      	str	r0, [r4, #8]
		if (NULL != task->taskFunc)
 80024e2:	68e3      	ldr	r3, [r4, #12]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <task_state+0x2e>
			task->taskFunc(args);
 80024e8:	0028      	movs	r0, r5
 80024ea:	4798      	blx	r3
 80024ec:	e000      	b.n	80024f0 <task_state+0x2e>
		return SET;
	}
	return RESET;
 80024ee:	2600      	movs	r6, #0
}
 80024f0:	0030      	movs	r0, r6
 80024f2:	bd70      	pop	{r4, r5, r6, pc}

080024f4 <task_start>:
void task_stop(Task task){
	task->active = RESET;
}

void task_start(Task task){
	task->active = SET;
 80024f4:	2301      	movs	r3, #1
 80024f6:	7003      	strb	r3, [r0, #0]
}
 80024f8:	4770      	bx	lr
	...

080024fc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80024fc:	b500      	push	{lr}
 80024fe:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002500:	2208      	movs	r2, #8
 8002502:	2100      	movs	r1, #0
 8002504:	4668      	mov	r0, sp
 8002506:	f000 f946 	bl	8002796 <memset>

  htim6.Instance = TIM6;
 800250a:	480f      	ldr	r0, [pc, #60]	; (8002548 <MX_TIM6_Init+0x4c>)
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <MX_TIM6_Init+0x50>)
 800250e:	6003      	str	r3, [r0, #0]
  htim6.Init.Prescaler = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002514:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 65535;
 8002516:	4a0e      	ldr	r2, [pc, #56]	; (8002550 <MX_TIM6_Init+0x54>)
 8002518:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251a:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800251c:	f7fe ff5e 	bl	80013dc <HAL_TIM_Base_Init>
 8002520:	2800      	cmp	r0, #0
 8002522:	d10a      	bne.n	800253a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002524:	2300      	movs	r3, #0
 8002526:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002528:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800252a:	4669      	mov	r1, sp
 800252c:	4806      	ldr	r0, [pc, #24]	; (8002548 <MX_TIM6_Init+0x4c>)
 800252e:	f7fe ff6f 	bl	8001410 <HAL_TIMEx_MasterConfigSynchronization>
 8002532:	2800      	cmp	r0, #0
 8002534:	d104      	bne.n	8002540 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
  }

}
 8002536:	b003      	add	sp, #12
 8002538:	bd00      	pop	{pc}
    Error_Handler();
 800253a:	f7ff ff39 	bl	80023b0 <Error_Handler>
 800253e:	e7f1      	b.n	8002524 <MX_TIM6_Init+0x28>
    Error_Handler();
 8002540:	f7ff ff36 	bl	80023b0 <Error_Handler>
}
 8002544:	e7f7      	b.n	8002536 <MX_TIM6_Init+0x3a>
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	20000138 	.word	0x20000138
 800254c:	40001000 	.word	0x40001000
 8002550:	0000ffff 	.word	0x0000ffff

08002554 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8002554:	6802      	ldr	r2, [r0, #0]
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_TIM_Base_MspInit+0x18>)
 8002558:	429a      	cmp	r2, r3
 800255a:	d000      	beq.n	800255e <HAL_TIM_Base_MspInit+0xa>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800255c:	4770      	bx	lr
    __HAL_RCC_TIM6_CLK_ENABLE();
 800255e:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_TIM_Base_MspInit+0x1c>)
 8002560:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002562:	2110      	movs	r1, #16
 8002564:	430b      	orrs	r3, r1
 8002566:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002568:	e7f8      	b.n	800255c <HAL_TIM_Base_MspInit+0x8>
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	40001000 	.word	0x40001000
 8002570:	40021000 	.word	0x40021000

08002574 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002574:	b510      	push	{r4, lr}

  huart1.Instance = USART1;
 8002576:	480c      	ldr	r0, [pc, #48]	; (80025a8 <MX_USART1_UART_Init+0x34>)
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <MX_USART1_UART_Init+0x38>)
 800257a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800257c:	23e1      	movs	r3, #225	; 0xe1
 800257e:	025b      	lsls	r3, r3, #9
 8002580:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002582:	2300      	movs	r3, #0
 8002584:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002586:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002588:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800258a:	220c      	movs	r2, #12
 800258c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002590:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002592:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002594:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002596:	f7ff fc7b 	bl	8001e90 <HAL_UART_Init>
 800259a:	2800      	cmp	r0, #0
 800259c:	d100      	bne.n	80025a0 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 800259e:	bd10      	pop	{r4, pc}
    Error_Handler();
 80025a0:	f7ff ff06 	bl	80023b0 <Error_Handler>
}
 80025a4:	e7fb      	b.n	800259e <MX_USART1_UART_Init+0x2a>
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	20000204 	.word	0x20000204
 80025ac:	40013800 	.word	0x40013800

080025b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025b0:	b530      	push	{r4, r5, lr}
 80025b2:	b087      	sub	sp, #28
 80025b4:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b6:	2214      	movs	r2, #20
 80025b8:	2100      	movs	r1, #0
 80025ba:	a801      	add	r0, sp, #4
 80025bc:	f000 f8eb 	bl	8002796 <memset>
  if(uartHandle->Instance==USART1)
 80025c0:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <HAL_UART_MspInit+0xc8>)
 80025c2:	6822      	ldr	r2, [r4, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d001      	beq.n	80025cc <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80025c8:	b007      	add	sp, #28
 80025ca:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <HAL_UART_MspInit+0xcc>)
 80025ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025d0:	2280      	movs	r2, #128	; 0x80
 80025d2:	01d2      	lsls	r2, r2, #7
 80025d4:	430a      	orrs	r2, r1
 80025d6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025da:	2201      	movs	r2, #1
 80025dc:	4311      	orrs	r1, r2
 80025de:	62d9      	str	r1, [r3, #44]	; 0x2c
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	401a      	ands	r2, r3
 80025e4:	9200      	str	r2, [sp, #0]
 80025e6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025e8:	23c0      	movs	r3, #192	; 0xc0
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ee:	2302      	movs	r3, #2
 80025f0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f2:	2503      	movs	r5, #3
 80025f4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80025f6:	3302      	adds	r3, #2
 80025f8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fa:	20a0      	movs	r0, #160	; 0xa0
 80025fc:	a901      	add	r1, sp, #4
 80025fe:	05c0      	lsls	r0, r0, #23
 8002600:	f7fe f8b6 	bl	8000770 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002604:	481e      	ldr	r0, [pc, #120]	; (8002680 <HAL_UART_MspInit+0xd0>)
 8002606:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <HAL_UART_MspInit+0xd4>)
 8002608:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 800260a:	6045      	str	r5, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800260c:	2300      	movs	r3, #0
 800260e:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002610:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002612:	2280      	movs	r2, #128	; 0x80
 8002614:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002616:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002618:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800261a:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800261c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800261e:	f7fd ffb1 	bl	8000584 <HAL_DMA_Init>
 8002622:	2800      	cmp	r0, #0
 8002624:	d121      	bne.n	800266a <HAL_UART_MspInit+0xba>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <HAL_UART_MspInit+0xd0>)
 8002628:	66e3      	str	r3, [r4, #108]	; 0x6c
 800262a:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800262c:	4816      	ldr	r0, [pc, #88]	; (8002688 <HAL_UART_MspInit+0xd8>)
 800262e:	4b17      	ldr	r3, [pc, #92]	; (800268c <HAL_UART_MspInit+0xdc>)
 8002630:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8002632:	2303      	movs	r3, #3
 8002634:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002636:	330d      	adds	r3, #13
 8002638:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002642:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002644:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002646:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002648:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800264a:	f7fd ff9b 	bl	8000584 <HAL_DMA_Init>
 800264e:	2800      	cmp	r0, #0
 8002650:	d10e      	bne.n	8002670 <HAL_UART_MspInit+0xc0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002652:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <HAL_UART_MspInit+0xd8>)
 8002654:	66a3      	str	r3, [r4, #104]	; 0x68
 8002656:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002658:	2200      	movs	r2, #0
 800265a:	2100      	movs	r1, #0
 800265c:	201b      	movs	r0, #27
 800265e:	f7fd ff3b 	bl	80004d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002662:	201b      	movs	r0, #27
 8002664:	f7fd ff68 	bl	8000538 <HAL_NVIC_EnableIRQ>
}
 8002668:	e7ae      	b.n	80025c8 <HAL_UART_MspInit+0x18>
      Error_Handler();
 800266a:	f7ff fea1 	bl	80023b0 <Error_Handler>
 800266e:	e7da      	b.n	8002626 <HAL_UART_MspInit+0x76>
      Error_Handler();
 8002670:	f7ff fe9e 	bl	80023b0 <Error_Handler>
 8002674:	e7ed      	b.n	8002652 <HAL_UART_MspInit+0xa2>
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	40013800 	.word	0x40013800
 800267c:	40021000 	.word	0x40021000
 8002680:	200001bc 	.word	0x200001bc
 8002684:	40020030 	.word	0x40020030
 8002688:	20000174 	.word	0x20000174
 800268c:	4002001c 	.word	0x4002001c

08002690 <Reset_Handler>:
 8002690:	480d      	ldr	r0, [pc, #52]	; (80026c8 <LoopForever+0x2>)
 8002692:	4685      	mov	sp, r0
 8002694:	2100      	movs	r1, #0
 8002696:	e003      	b.n	80026a0 <LoopCopyDataInit>

08002698 <CopyDataInit>:
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <LoopForever+0x6>)
 800269a:	585b      	ldr	r3, [r3, r1]
 800269c:	5043      	str	r3, [r0, r1]
 800269e:	3104      	adds	r1, #4

080026a0 <LoopCopyDataInit>:
 80026a0:	480b      	ldr	r0, [pc, #44]	; (80026d0 <LoopForever+0xa>)
 80026a2:	4b0c      	ldr	r3, [pc, #48]	; (80026d4 <LoopForever+0xe>)
 80026a4:	1842      	adds	r2, r0, r1
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d3f6      	bcc.n	8002698 <CopyDataInit>
 80026aa:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <LoopForever+0x12>)
 80026ac:	e002      	b.n	80026b4 <LoopFillZerobss>

080026ae <FillZerobss>:
 80026ae:	2300      	movs	r3, #0
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	3204      	adds	r2, #4

080026b4 <LoopFillZerobss>:
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <LoopForever+0x16>)
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d3f9      	bcc.n	80026ae <FillZerobss>
 80026ba:	f7ff fec3 	bl	8002444 <SystemInit>
 80026be:	f000 f817 	bl	80026f0 <__libc_init_array>
 80026c2:	f7ff fe43 	bl	800234c <main>

080026c6 <LoopForever>:
 80026c6:	e7fe      	b.n	80026c6 <LoopForever>
 80026c8:	20005000 	.word	0x20005000
 80026cc:	08002ab0 	.word	0x08002ab0
 80026d0:	20000000 	.word	0x20000000
 80026d4:	20000068 	.word	0x20000068
 80026d8:	20000068 	.word	0x20000068
 80026dc:	20000288 	.word	0x20000288

080026e0 <ADC1_COMP_IRQHandler>:
 80026e0:	e7fe      	b.n	80026e0 <ADC1_COMP_IRQHandler>
	...

080026e4 <__errno>:
 80026e4:	4b01      	ldr	r3, [pc, #4]	; (80026ec <__errno+0x8>)
 80026e6:	6818      	ldr	r0, [r3, #0]
 80026e8:	4770      	bx	lr
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	20000004 	.word	0x20000004

080026f0 <__libc_init_array>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	2600      	movs	r6, #0
 80026f4:	4d0c      	ldr	r5, [pc, #48]	; (8002728 <__libc_init_array+0x38>)
 80026f6:	4c0d      	ldr	r4, [pc, #52]	; (800272c <__libc_init_array+0x3c>)
 80026f8:	1b64      	subs	r4, r4, r5
 80026fa:	10a4      	asrs	r4, r4, #2
 80026fc:	42a6      	cmp	r6, r4
 80026fe:	d109      	bne.n	8002714 <__libc_init_array+0x24>
 8002700:	2600      	movs	r6, #0
 8002702:	f000 f917 	bl	8002934 <_init>
 8002706:	4d0a      	ldr	r5, [pc, #40]	; (8002730 <__libc_init_array+0x40>)
 8002708:	4c0a      	ldr	r4, [pc, #40]	; (8002734 <__libc_init_array+0x44>)
 800270a:	1b64      	subs	r4, r4, r5
 800270c:	10a4      	asrs	r4, r4, #2
 800270e:	42a6      	cmp	r6, r4
 8002710:	d105      	bne.n	800271e <__libc_init_array+0x2e>
 8002712:	bd70      	pop	{r4, r5, r6, pc}
 8002714:	00b3      	lsls	r3, r6, #2
 8002716:	58eb      	ldr	r3, [r5, r3]
 8002718:	4798      	blx	r3
 800271a:	3601      	adds	r6, #1
 800271c:	e7ee      	b.n	80026fc <__libc_init_array+0xc>
 800271e:	00b3      	lsls	r3, r6, #2
 8002720:	58eb      	ldr	r3, [r5, r3]
 8002722:	4798      	blx	r3
 8002724:	3601      	adds	r6, #1
 8002726:	e7f2      	b.n	800270e <__libc_init_array+0x1e>
 8002728:	08002aa8 	.word	0x08002aa8
 800272c:	08002aa8 	.word	0x08002aa8
 8002730:	08002aa8 	.word	0x08002aa8
 8002734:	08002aac 	.word	0x08002aac

08002738 <__itoa>:
 8002738:	1e93      	subs	r3, r2, #2
 800273a:	b510      	push	{r4, lr}
 800273c:	000c      	movs	r4, r1
 800273e:	2b22      	cmp	r3, #34	; 0x22
 8002740:	d904      	bls.n	800274c <__itoa+0x14>
 8002742:	2300      	movs	r3, #0
 8002744:	001c      	movs	r4, r3
 8002746:	700b      	strb	r3, [r1, #0]
 8002748:	0020      	movs	r0, r4
 800274a:	bd10      	pop	{r4, pc}
 800274c:	2a0a      	cmp	r2, #10
 800274e:	d109      	bne.n	8002764 <__itoa+0x2c>
 8002750:	2800      	cmp	r0, #0
 8002752:	da07      	bge.n	8002764 <__itoa+0x2c>
 8002754:	232d      	movs	r3, #45	; 0x2d
 8002756:	700b      	strb	r3, [r1, #0]
 8002758:	2101      	movs	r1, #1
 800275a:	4240      	negs	r0, r0
 800275c:	1861      	adds	r1, r4, r1
 800275e:	f000 f8b5 	bl	80028cc <__utoa>
 8002762:	e7f1      	b.n	8002748 <__itoa+0x10>
 8002764:	2100      	movs	r1, #0
 8002766:	e7f9      	b.n	800275c <__itoa+0x24>

08002768 <itoa>:
 8002768:	b510      	push	{r4, lr}
 800276a:	f7ff ffe5 	bl	8002738 <__itoa>
 800276e:	bd10      	pop	{r4, pc}

08002770 <malloc>:
 8002770:	b510      	push	{r4, lr}
 8002772:	4b03      	ldr	r3, [pc, #12]	; (8002780 <malloc+0x10>)
 8002774:	0001      	movs	r1, r0
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	f000 f816 	bl	80027a8 <_malloc_r>
 800277c:	bd10      	pop	{r4, pc}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	20000004 	.word	0x20000004

08002784 <memcpy>:
 8002784:	2300      	movs	r3, #0
 8002786:	b510      	push	{r4, lr}
 8002788:	429a      	cmp	r2, r3
 800278a:	d100      	bne.n	800278e <memcpy+0xa>
 800278c:	bd10      	pop	{r4, pc}
 800278e:	5ccc      	ldrb	r4, [r1, r3]
 8002790:	54c4      	strb	r4, [r0, r3]
 8002792:	3301      	adds	r3, #1
 8002794:	e7f8      	b.n	8002788 <memcpy+0x4>

08002796 <memset>:
 8002796:	0003      	movs	r3, r0
 8002798:	1812      	adds	r2, r2, r0
 800279a:	4293      	cmp	r3, r2
 800279c:	d100      	bne.n	80027a0 <memset+0xa>
 800279e:	4770      	bx	lr
 80027a0:	7019      	strb	r1, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	e7f9      	b.n	800279a <memset+0x4>
	...

080027a8 <_malloc_r>:
 80027a8:	2303      	movs	r3, #3
 80027aa:	b570      	push	{r4, r5, r6, lr}
 80027ac:	1ccd      	adds	r5, r1, #3
 80027ae:	439d      	bics	r5, r3
 80027b0:	3508      	adds	r5, #8
 80027b2:	0006      	movs	r6, r0
 80027b4:	2d0c      	cmp	r5, #12
 80027b6:	d21e      	bcs.n	80027f6 <_malloc_r+0x4e>
 80027b8:	250c      	movs	r5, #12
 80027ba:	42a9      	cmp	r1, r5
 80027bc:	d81d      	bhi.n	80027fa <_malloc_r+0x52>
 80027be:	0030      	movs	r0, r6
 80027c0:	f000 f8b6 	bl	8002930 <__malloc_lock>
 80027c4:	4a25      	ldr	r2, [pc, #148]	; (800285c <_malloc_r+0xb4>)
 80027c6:	6814      	ldr	r4, [r2, #0]
 80027c8:	0021      	movs	r1, r4
 80027ca:	2900      	cmp	r1, #0
 80027cc:	d119      	bne.n	8002802 <_malloc_r+0x5a>
 80027ce:	4c24      	ldr	r4, [pc, #144]	; (8002860 <_malloc_r+0xb8>)
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <_malloc_r+0x36>
 80027d6:	0030      	movs	r0, r6
 80027d8:	f000 f844 	bl	8002864 <_sbrk_r>
 80027dc:	6020      	str	r0, [r4, #0]
 80027de:	0029      	movs	r1, r5
 80027e0:	0030      	movs	r0, r6
 80027e2:	f000 f83f 	bl	8002864 <_sbrk_r>
 80027e6:	1c43      	adds	r3, r0, #1
 80027e8:	d12b      	bne.n	8002842 <_malloc_r+0x9a>
 80027ea:	230c      	movs	r3, #12
 80027ec:	0030      	movs	r0, r6
 80027ee:	6033      	str	r3, [r6, #0]
 80027f0:	f000 f89f 	bl	8002932 <__malloc_unlock>
 80027f4:	e003      	b.n	80027fe <_malloc_r+0x56>
 80027f6:	2d00      	cmp	r5, #0
 80027f8:	dadf      	bge.n	80027ba <_malloc_r+0x12>
 80027fa:	230c      	movs	r3, #12
 80027fc:	6033      	str	r3, [r6, #0]
 80027fe:	2000      	movs	r0, #0
 8002800:	bd70      	pop	{r4, r5, r6, pc}
 8002802:	680b      	ldr	r3, [r1, #0]
 8002804:	1b5b      	subs	r3, r3, r5
 8002806:	d419      	bmi.n	800283c <_malloc_r+0x94>
 8002808:	2b0b      	cmp	r3, #11
 800280a:	d903      	bls.n	8002814 <_malloc_r+0x6c>
 800280c:	600b      	str	r3, [r1, #0]
 800280e:	18cc      	adds	r4, r1, r3
 8002810:	6025      	str	r5, [r4, #0]
 8002812:	e003      	b.n	800281c <_malloc_r+0x74>
 8002814:	684b      	ldr	r3, [r1, #4]
 8002816:	428c      	cmp	r4, r1
 8002818:	d10d      	bne.n	8002836 <_malloc_r+0x8e>
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	0030      	movs	r0, r6
 800281e:	f000 f888 	bl	8002932 <__malloc_unlock>
 8002822:	0020      	movs	r0, r4
 8002824:	2207      	movs	r2, #7
 8002826:	300b      	adds	r0, #11
 8002828:	1d23      	adds	r3, r4, #4
 800282a:	4390      	bics	r0, r2
 800282c:	1ac3      	subs	r3, r0, r3
 800282e:	d0e7      	beq.n	8002800 <_malloc_r+0x58>
 8002830:	425a      	negs	r2, r3
 8002832:	50e2      	str	r2, [r4, r3]
 8002834:	e7e4      	b.n	8002800 <_malloc_r+0x58>
 8002836:	6063      	str	r3, [r4, #4]
 8002838:	000c      	movs	r4, r1
 800283a:	e7ef      	b.n	800281c <_malloc_r+0x74>
 800283c:	000c      	movs	r4, r1
 800283e:	6849      	ldr	r1, [r1, #4]
 8002840:	e7c3      	b.n	80027ca <_malloc_r+0x22>
 8002842:	2303      	movs	r3, #3
 8002844:	1cc4      	adds	r4, r0, #3
 8002846:	439c      	bics	r4, r3
 8002848:	42a0      	cmp	r0, r4
 800284a:	d0e1      	beq.n	8002810 <_malloc_r+0x68>
 800284c:	1a21      	subs	r1, r4, r0
 800284e:	0030      	movs	r0, r6
 8002850:	f000 f808 	bl	8002864 <_sbrk_r>
 8002854:	1c43      	adds	r3, r0, #1
 8002856:	d1db      	bne.n	8002810 <_malloc_r+0x68>
 8002858:	e7c7      	b.n	80027ea <_malloc_r+0x42>
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	20000128 	.word	0x20000128
 8002860:	2000012c 	.word	0x2000012c

08002864 <_sbrk_r>:
 8002864:	2300      	movs	r3, #0
 8002866:	b570      	push	{r4, r5, r6, lr}
 8002868:	4c06      	ldr	r4, [pc, #24]	; (8002884 <_sbrk_r+0x20>)
 800286a:	0005      	movs	r5, r0
 800286c:	0008      	movs	r0, r1
 800286e:	6023      	str	r3, [r4, #0]
 8002870:	f7ff fdca 	bl	8002408 <_sbrk>
 8002874:	1c43      	adds	r3, r0, #1
 8002876:	d103      	bne.n	8002880 <_sbrk_r+0x1c>
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d000      	beq.n	8002880 <_sbrk_r+0x1c>
 800287e:	602b      	str	r3, [r5, #0]
 8002880:	bd70      	pop	{r4, r5, r6, pc}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	20000284 	.word	0x20000284

08002888 <strcpy>:
 8002888:	0003      	movs	r3, r0
 800288a:	780a      	ldrb	r2, [r1, #0]
 800288c:	3101      	adds	r1, #1
 800288e:	701a      	strb	r2, [r3, #0]
 8002890:	3301      	adds	r3, #1
 8002892:	2a00      	cmp	r2, #0
 8002894:	d1f9      	bne.n	800288a <strcpy+0x2>
 8002896:	4770      	bx	lr

08002898 <strstr>:
 8002898:	b510      	push	{r4, lr}
 800289a:	7803      	ldrb	r3, [r0, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10f      	bne.n	80028c0 <strstr+0x28>
 80028a0:	780b      	ldrb	r3, [r1, #0]
 80028a2:	425a      	negs	r2, r3
 80028a4:	4153      	adcs	r3, r2
 80028a6:	425b      	negs	r3, r3
 80028a8:	4018      	ands	r0, r3
 80028aa:	bd10      	pop	{r4, pc}
 80028ac:	2300      	movs	r3, #0
 80028ae:	5cca      	ldrb	r2, [r1, r3]
 80028b0:	2a00      	cmp	r2, #0
 80028b2:	d0fa      	beq.n	80028aa <strstr+0x12>
 80028b4:	5cc4      	ldrb	r4, [r0, r3]
 80028b6:	4294      	cmp	r4, r2
 80028b8:	d101      	bne.n	80028be <strstr+0x26>
 80028ba:	3301      	adds	r3, #1
 80028bc:	e7f7      	b.n	80028ae <strstr+0x16>
 80028be:	3001      	adds	r0, #1
 80028c0:	7803      	ldrb	r3, [r0, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f2      	bne.n	80028ac <strstr+0x14>
 80028c6:	0018      	movs	r0, r3
 80028c8:	e7ef      	b.n	80028aa <strstr+0x12>
	...

080028cc <__utoa>:
 80028cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ce:	0017      	movs	r7, r2
 80028d0:	b08d      	sub	sp, #52	; 0x34
 80028d2:	2225      	movs	r2, #37	; 0x25
 80028d4:	0006      	movs	r6, r0
 80028d6:	000d      	movs	r5, r1
 80028d8:	a802      	add	r0, sp, #8
 80028da:	4914      	ldr	r1, [pc, #80]	; (800292c <__utoa+0x60>)
 80028dc:	f7ff ff52 	bl	8002784 <memcpy>
 80028e0:	aa02      	add	r2, sp, #8
 80028e2:	1ebb      	subs	r3, r7, #2
 80028e4:	2400      	movs	r4, #0
 80028e6:	9201      	str	r2, [sp, #4]
 80028e8:	2b22      	cmp	r3, #34	; 0x22
 80028ea:	d905      	bls.n	80028f8 <__utoa+0x2c>
 80028ec:	702c      	strb	r4, [r5, #0]
 80028ee:	0025      	movs	r5, r4
 80028f0:	0028      	movs	r0, r5
 80028f2:	b00d      	add	sp, #52	; 0x34
 80028f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f6:	0014      	movs	r4, r2
 80028f8:	0030      	movs	r0, r6
 80028fa:	0039      	movs	r1, r7
 80028fc:	f7fd fc92 	bl	8000224 <__aeabi_uidivmod>
 8002900:	4684      	mov	ip, r0
 8002902:	9801      	ldr	r0, [sp, #4]
 8002904:	1c62      	adds	r2, r4, #1
 8002906:	18ab      	adds	r3, r5, r2
 8002908:	5c41      	ldrb	r1, [r0, r1]
 800290a:	1e5e      	subs	r6, r3, #1
 800290c:	7031      	strb	r1, [r6, #0]
 800290e:	4666      	mov	r6, ip
 8002910:	2e00      	cmp	r6, #0
 8002912:	d1f0      	bne.n	80028f6 <__utoa+0x2a>
 8002914:	701e      	strb	r6, [r3, #0]
 8002916:	002b      	movs	r3, r5
 8002918:	1b5a      	subs	r2, r3, r5
 800291a:	4294      	cmp	r4, r2
 800291c:	dde8      	ble.n	80028f0 <__utoa+0x24>
 800291e:	781a      	ldrb	r2, [r3, #0]
 8002920:	5d29      	ldrb	r1, [r5, r4]
 8002922:	7019      	strb	r1, [r3, #0]
 8002924:	552a      	strb	r2, [r5, r4]
 8002926:	3301      	adds	r3, #1
 8002928:	3c01      	subs	r4, #1
 800292a:	e7f5      	b.n	8002918 <__utoa+0x4c>
 800292c:	08002a78 	.word	0x08002a78

08002930 <__malloc_lock>:
 8002930:	4770      	bx	lr

08002932 <__malloc_unlock>:
 8002932:	4770      	bx	lr

08002934 <_init>:
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293a:	bc08      	pop	{r3}
 800293c:	469e      	mov	lr, r3
 800293e:	4770      	bx	lr

08002940 <_fini>:
 8002940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002946:	bc08      	pop	{r3}
 8002948:	469e      	mov	lr, r3
 800294a:	4770      	bx	lr
