
ESP_smart_home.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08003460  08003460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080036d4  080036d4  000136d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080036dc  080036dc  000136dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080036e0  080036e0  000136e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d8  20000000  080036e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002cc  200001d8  080038bc  000201d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200004a4  080038bc  000204a4  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001349a  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003176  00000000  00000000  0003369a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009080  00000000  00000000  00036810  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e98  00000000  00000000  0003f890  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d98  00000000  00000000  00040728  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001741d  00000000  00000000  000414c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000ee97  00000000  00000000  000588dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0008811d  00000000  00000000  00067774  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  000ef891  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002800  00000000  00000000  000ef90c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d8 	.word	0x200001d8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003448 	.word	0x08003448

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001dc 	.word	0x200001dc
 8000104:	08003448 	.word	0x08003448

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	1c08      	adds	r0, r1, #0
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	464f      	mov	r7, r9
 8000274:	4646      	mov	r6, r8
 8000276:	46d6      	mov	lr, sl
 8000278:	b5c0      	push	{r6, r7, lr}
 800027a:	0004      	movs	r4, r0
 800027c:	b082      	sub	sp, #8
 800027e:	000d      	movs	r5, r1
 8000280:	4691      	mov	r9, r2
 8000282:	4698      	mov	r8, r3
 8000284:	428b      	cmp	r3, r1
 8000286:	d82f      	bhi.n	80002e8 <__udivmoddi4+0x78>
 8000288:	d02c      	beq.n	80002e4 <__udivmoddi4+0x74>
 800028a:	4641      	mov	r1, r8
 800028c:	4648      	mov	r0, r9
 800028e:	f000 f8b1 	bl	80003f4 <__clzdi2>
 8000292:	0029      	movs	r1, r5
 8000294:	0006      	movs	r6, r0
 8000296:	0020      	movs	r0, r4
 8000298:	f000 f8ac 	bl	80003f4 <__clzdi2>
 800029c:	1a33      	subs	r3, r6, r0
 800029e:	469c      	mov	ip, r3
 80002a0:	3b20      	subs	r3, #32
 80002a2:	469a      	mov	sl, r3
 80002a4:	d500      	bpl.n	80002a8 <__udivmoddi4+0x38>
 80002a6:	e076      	b.n	8000396 <__udivmoddi4+0x126>
 80002a8:	464b      	mov	r3, r9
 80002aa:	4652      	mov	r2, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	001f      	movs	r7, r3
 80002b0:	464b      	mov	r3, r9
 80002b2:	4662      	mov	r2, ip
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d828      	bhi.n	800030e <__udivmoddi4+0x9e>
 80002bc:	d025      	beq.n	800030a <__udivmoddi4+0x9a>
 80002be:	4653      	mov	r3, sl
 80002c0:	1ba4      	subs	r4, r4, r6
 80002c2:	41bd      	sbcs	r5, r7
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	da00      	bge.n	80002ca <__udivmoddi4+0x5a>
 80002c8:	e07b      	b.n	80003c2 <__udivmoddi4+0x152>
 80002ca:	2200      	movs	r2, #0
 80002cc:	2300      	movs	r3, #0
 80002ce:	9200      	str	r2, [sp, #0]
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	2301      	movs	r3, #1
 80002d4:	4652      	mov	r2, sl
 80002d6:	4093      	lsls	r3, r2
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2301      	movs	r3, #1
 80002dc:	4662      	mov	r2, ip
 80002de:	4093      	lsls	r3, r2
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	e018      	b.n	8000316 <__udivmoddi4+0xa6>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	d9d0      	bls.n	800028a <__udivmoddi4+0x1a>
 80002e8:	2200      	movs	r2, #0
 80002ea:	2300      	movs	r3, #0
 80002ec:	9200      	str	r2, [sp, #0]
 80002ee:	9301      	str	r3, [sp, #4]
 80002f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <__udivmoddi4+0x8a>
 80002f6:	601c      	str	r4, [r3, #0]
 80002f8:	605d      	str	r5, [r3, #4]
 80002fa:	9800      	ldr	r0, [sp, #0]
 80002fc:	9901      	ldr	r1, [sp, #4]
 80002fe:	b002      	add	sp, #8
 8000300:	bc1c      	pop	{r2, r3, r4}
 8000302:	4690      	mov	r8, r2
 8000304:	4699      	mov	r9, r3
 8000306:	46a2      	mov	sl, r4
 8000308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800030a:	42a3      	cmp	r3, r4
 800030c:	d9d7      	bls.n	80002be <__udivmoddi4+0x4e>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	4663      	mov	r3, ip
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0e9      	beq.n	80002f0 <__udivmoddi4+0x80>
 800031c:	07fb      	lsls	r3, r7, #31
 800031e:	4698      	mov	r8, r3
 8000320:	4641      	mov	r1, r8
 8000322:	0872      	lsrs	r2, r6, #1
 8000324:	430a      	orrs	r2, r1
 8000326:	087b      	lsrs	r3, r7, #1
 8000328:	4666      	mov	r6, ip
 800032a:	e00e      	b.n	800034a <__udivmoddi4+0xda>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d101      	bne.n	8000334 <__udivmoddi4+0xc4>
 8000330:	42a2      	cmp	r2, r4
 8000332:	d80c      	bhi.n	800034e <__udivmoddi4+0xde>
 8000334:	1aa4      	subs	r4, r4, r2
 8000336:	419d      	sbcs	r5, r3
 8000338:	2001      	movs	r0, #1
 800033a:	1924      	adds	r4, r4, r4
 800033c:	416d      	adcs	r5, r5
 800033e:	2100      	movs	r1, #0
 8000340:	3e01      	subs	r6, #1
 8000342:	1824      	adds	r4, r4, r0
 8000344:	414d      	adcs	r5, r1
 8000346:	2e00      	cmp	r6, #0
 8000348:	d006      	beq.n	8000358 <__udivmoddi4+0xe8>
 800034a:	42ab      	cmp	r3, r5
 800034c:	d9ee      	bls.n	800032c <__udivmoddi4+0xbc>
 800034e:	3e01      	subs	r6, #1
 8000350:	1924      	adds	r4, r4, r4
 8000352:	416d      	adcs	r5, r5
 8000354:	2e00      	cmp	r6, #0
 8000356:	d1f8      	bne.n	800034a <__udivmoddi4+0xda>
 8000358:	9800      	ldr	r0, [sp, #0]
 800035a:	9901      	ldr	r1, [sp, #4]
 800035c:	4653      	mov	r3, sl
 800035e:	1900      	adds	r0, r0, r4
 8000360:	4169      	adcs	r1, r5
 8000362:	2b00      	cmp	r3, #0
 8000364:	db23      	blt.n	80003ae <__udivmoddi4+0x13e>
 8000366:	002b      	movs	r3, r5
 8000368:	4652      	mov	r2, sl
 800036a:	40d3      	lsrs	r3, r2
 800036c:	002a      	movs	r2, r5
 800036e:	4664      	mov	r4, ip
 8000370:	40e2      	lsrs	r2, r4
 8000372:	001c      	movs	r4, r3
 8000374:	4653      	mov	r3, sl
 8000376:	0015      	movs	r5, r2
 8000378:	2b00      	cmp	r3, #0
 800037a:	db2d      	blt.n	80003d8 <__udivmoddi4+0x168>
 800037c:	0026      	movs	r6, r4
 800037e:	4657      	mov	r7, sl
 8000380:	40be      	lsls	r6, r7
 8000382:	0033      	movs	r3, r6
 8000384:	0026      	movs	r6, r4
 8000386:	4667      	mov	r7, ip
 8000388:	40be      	lsls	r6, r7
 800038a:	0032      	movs	r2, r6
 800038c:	1a80      	subs	r0, r0, r2
 800038e:	4199      	sbcs	r1, r3
 8000390:	9000      	str	r0, [sp, #0]
 8000392:	9101      	str	r1, [sp, #4]
 8000394:	e7ac      	b.n	80002f0 <__udivmoddi4+0x80>
 8000396:	4662      	mov	r2, ip
 8000398:	2320      	movs	r3, #32
 800039a:	1a9b      	subs	r3, r3, r2
 800039c:	464a      	mov	r2, r9
 800039e:	40da      	lsrs	r2, r3
 80003a0:	4661      	mov	r1, ip
 80003a2:	0013      	movs	r3, r2
 80003a4:	4642      	mov	r2, r8
 80003a6:	408a      	lsls	r2, r1
 80003a8:	0017      	movs	r7, r2
 80003aa:	431f      	orrs	r7, r3
 80003ac:	e780      	b.n	80002b0 <__udivmoddi4+0x40>
 80003ae:	4662      	mov	r2, ip
 80003b0:	2320      	movs	r3, #32
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	002a      	movs	r2, r5
 80003b6:	4666      	mov	r6, ip
 80003b8:	409a      	lsls	r2, r3
 80003ba:	0023      	movs	r3, r4
 80003bc:	40f3      	lsrs	r3, r6
 80003be:	4313      	orrs	r3, r2
 80003c0:	e7d4      	b.n	800036c <__udivmoddi4+0xfc>
 80003c2:	4662      	mov	r2, ip
 80003c4:	2320      	movs	r3, #32
 80003c6:	2100      	movs	r1, #0
 80003c8:	1a9b      	subs	r3, r3, r2
 80003ca:	2200      	movs	r2, #0
 80003cc:	9100      	str	r1, [sp, #0]
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	2201      	movs	r2, #1
 80003d2:	40da      	lsrs	r2, r3
 80003d4:	9201      	str	r2, [sp, #4]
 80003d6:	e780      	b.n	80002da <__udivmoddi4+0x6a>
 80003d8:	2320      	movs	r3, #32
 80003da:	4662      	mov	r2, ip
 80003dc:	0026      	movs	r6, r4
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	40de      	lsrs	r6, r3
 80003e2:	002f      	movs	r7, r5
 80003e4:	46b0      	mov	r8, r6
 80003e6:	4666      	mov	r6, ip
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	4646      	mov	r6, r8
 80003ec:	003b      	movs	r3, r7
 80003ee:	4333      	orrs	r3, r6
 80003f0:	e7c8      	b.n	8000384 <__udivmoddi4+0x114>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	1c08      	adds	r0, r1, #0
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000448:	b510      	push	{r4, lr}
 800044a:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800044c:	4b09      	ldr	r3, [pc, #36]	; (8000474 <HAL_InitTick+0x2c>)
 800044e:	6818      	ldr	r0, [r3, #0]
 8000450:	21fa      	movs	r1, #250	; 0xfa
 8000452:	0089      	lsls	r1, r1, #2
 8000454:	f7ff fe60 	bl	8000118 <__udivsi3>
 8000458:	f000 fb28 	bl	8000aac <HAL_SYSTICK_Config>
 800045c:	2800      	cmp	r0, #0
 800045e:	d001      	beq.n	8000464 <HAL_InitTick+0x1c>
  {
    status = HAL_ERROR;
 8000460:	2001      	movs	r0, #1
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
  }

  /* Return function status */
  return status;
}
 8000462:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000464:	3001      	adds	r0, #1
 8000466:	2200      	movs	r2, #0
 8000468:	0021      	movs	r1, r4
 800046a:	4240      	negs	r0, r0
 800046c:	f000 fae4 	bl	8000a38 <HAL_NVIC_SetPriority>
  HAL_StatusTypeDef  status = HAL_OK;
 8000470:	2000      	movs	r0, #0
 8000472:	e7f6      	b.n	8000462 <HAL_InitTick+0x1a>
 8000474:	20000004 	.word	0x20000004

08000478 <HAL_Init>:
{
 8000478:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800047a:	4a08      	ldr	r2, [pc, #32]	; (800049c <HAL_Init+0x24>)
 800047c:	6813      	ldr	r3, [r2, #0]
 800047e:	2140      	movs	r1, #64	; 0x40
 8000480:	430b      	orrs	r3, r1
 8000482:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ffdf 	bl	8000448 <HAL_InitTick>
 800048a:	1e04      	subs	r4, r0, #0
 800048c:	d002      	beq.n	8000494 <HAL_Init+0x1c>
    status = HAL_ERROR;
 800048e:	2401      	movs	r4, #1
}
 8000490:	0020      	movs	r0, r4
 8000492:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000494:	f002 fbd0 	bl	8002c38 <HAL_MspInit>
 8000498:	e7fa      	b.n	8000490 <HAL_Init+0x18>
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	40022000 	.word	0x40022000

080004a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80004a0:	4a02      	ldr	r2, [pc, #8]	; (80004ac <HAL_IncTick+0xc>)
 80004a2:	6813      	ldr	r3, [r2, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	6013      	str	r3, [r2, #0]
}
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	200002a8 	.word	0x200002a8

080004b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004b0:	4b01      	ldr	r3, [pc, #4]	; (80004b8 <HAL_GetTick+0x8>)
 80004b2:	6818      	ldr	r0, [r3, #0]
}
 80004b4:	4770      	bx	lr
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	200002a8 	.word	0x200002a8

080004bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80004c0:	f7ff fff6 	bl	80004b0 <HAL_GetTick>
 80004c4:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004c6:	1c63      	adds	r3, r4, #1
 80004c8:	d000      	beq.n	80004cc <HAL_Delay+0x10>
  {
    wait++;
 80004ca:	3401      	adds	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 80004cc:	f7ff fff0 	bl	80004b0 <HAL_GetTick>
 80004d0:	1b40      	subs	r0, r0, r5
 80004d2:	42a0      	cmp	r0, r4
 80004d4:	d3fa      	bcc.n	80004cc <HAL_Delay+0x10>
  {
  }
}
 80004d6:	bd70      	pop	{r4, r5, r6, pc}

080004d8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80004d8:	b510      	push	{r4, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	0004      	movs	r4, r0
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <ADC_DelayMicroSecond+0x28>)
 80004e0:	6818      	ldr	r0, [r3, #0]
 80004e2:	4908      	ldr	r1, [pc, #32]	; (8000504 <ADC_DelayMicroSecond+0x2c>)
 80004e4:	f7ff fe18 	bl	8000118 <__udivsi3>
 80004e8:	4344      	muls	r4, r0
 80004ea:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 80004ec:	e002      	b.n	80004f4 <ADC_DelayMicroSecond+0x1c>
  {
    waitLoopIndex--;
 80004ee:	9b01      	ldr	r3, [sp, #4]
 80004f0:	3b01      	subs	r3, #1
 80004f2:	9301      	str	r3, [sp, #4]
  while(waitLoopIndex != 0U)
 80004f4:	9b01      	ldr	r3, [sp, #4]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d1f9      	bne.n	80004ee <ADC_DelayMicroSecond+0x16>
  } 
}
 80004fa:	b002      	add	sp, #8
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	20000004 	.word	0x20000004
 8000504:	000f4240 	.word	0x000f4240

08000508 <ADC_Enable>:
{
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800050c:	6802      	ldr	r2, [r0, #0]
 800050e:	6891      	ldr	r1, [r2, #8]
 8000510:	2303      	movs	r3, #3
 8000512:	400b      	ands	r3, r1
 8000514:	2b01      	cmp	r3, #1
 8000516:	d00d      	beq.n	8000534 <ADC_Enable+0x2c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000518:	6891      	ldr	r1, [r2, #8]
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <ADC_Enable+0x74>)
 800051c:	4219      	tst	r1, r3
 800051e:	d00e      	beq.n	800053e <ADC_Enable+0x36>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000520:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000522:	2210      	movs	r2, #16
 8000524:	4313      	orrs	r3, r2
 8000526:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000528:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800052a:	3a0f      	subs	r2, #15
 800052c:	4313      	orrs	r3, r2
 800052e:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8000530:	2001      	movs	r0, #1
}
 8000532:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000534:	6813      	ldr	r3, [r2, #0]
 8000536:	07db      	lsls	r3, r3, #31
 8000538:	d5ee      	bpl.n	8000518 <ADC_Enable+0x10>
  return HAL_OK;
 800053a:	2000      	movs	r0, #0
 800053c:	e7f9      	b.n	8000532 <ADC_Enable+0x2a>
    __HAL_ADC_ENABLE(hadc);
 800053e:	6893      	ldr	r3, [r2, #8]
 8000540:	2101      	movs	r1, #1
 8000542:	430b      	orrs	r3, r1
 8000544:	6093      	str	r3, [r2, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8000546:	2001      	movs	r0, #1
 8000548:	f7ff ffc6 	bl	80004d8 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 800054c:	f7ff ffb0 	bl	80004b0 <HAL_GetTick>
 8000550:	0005      	movs	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000552:	6823      	ldr	r3, [r4, #0]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	07db      	lsls	r3, r3, #31
 8000558:	d40e      	bmi.n	8000578 <ADC_Enable+0x70>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800055a:	f7ff ffa9 	bl	80004b0 <HAL_GetTick>
 800055e:	1b40      	subs	r0, r0, r5
 8000560:	280a      	cmp	r0, #10
 8000562:	d9f6      	bls.n	8000552 <ADC_Enable+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000564:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000566:	2210      	movs	r2, #16
 8000568:	4313      	orrs	r3, r2
 800056a:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800056c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800056e:	3a0f      	subs	r2, #15
 8000570:	4313      	orrs	r3, r2
 8000572:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8000574:	2001      	movs	r0, #1
 8000576:	e7dc      	b.n	8000532 <ADC_Enable+0x2a>
  return HAL_OK;
 8000578:	2000      	movs	r0, #0
 800057a:	e7da      	b.n	8000532 <ADC_Enable+0x2a>
 800057c:	80000017 	.word	0x80000017

08000580 <HAL_ADC_Init>:
{
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8000584:	d100      	bne.n	8000588 <HAL_ADC_Init+0x8>
 8000586:	e0e0      	b.n	800074a <HAL_ADC_Init+0x1ca>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000588:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800058a:	2b00      	cmp	r3, #0
 800058c:	d02e      	beq.n	80005ec <HAL_ADC_Init+0x6c>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800058e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000590:	06db      	lsls	r3, r3, #27
 8000592:	d431      	bmi.n	80005f8 <HAL_ADC_Init+0x78>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000594:	6821      	ldr	r1, [r4, #0]
 8000596:	688b      	ldr	r3, [r1, #8]
 8000598:	2204      	movs	r2, #4
 800059a:	401a      	ands	r2, r3
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800059c:	d12c      	bne.n	80005f8 <HAL_ADC_Init+0x78>
  ADC_STATE_CLR_SET(hadc->State,
 800059e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80005a0:	486b      	ldr	r0, [pc, #428]	; (8000750 <HAL_ADC_Init+0x1d0>)
 80005a2:	4003      	ands	r3, r0
 80005a4:	3006      	adds	r0, #6
 80005a6:	30ff      	adds	r0, #255	; 0xff
 80005a8:	4303      	orrs	r3, r0
 80005aa:	6563      	str	r3, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80005ac:	6888      	ldr	r0, [r1, #8]
 80005ae:	2303      	movs	r3, #3
 80005b0:	4003      	ands	r3, r0
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d029      	beq.n	800060a <HAL_ADC_Init+0x8a>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80005b6:	6863      	ldr	r3, [r4, #4]
 80005b8:	20c0      	movs	r0, #192	; 0xc0
 80005ba:	0600      	lsls	r0, r0, #24
 80005bc:	4283      	cmp	r3, r0
 80005be:	d028      	beq.n	8000612 <HAL_ADC_Init+0x92>
 80005c0:	2080      	movs	r0, #128	; 0x80
 80005c2:	05c0      	lsls	r0, r0, #23
 80005c4:	4283      	cmp	r3, r0
 80005c6:	d024      	beq.n	8000612 <HAL_ADC_Init+0x92>
 80005c8:	2080      	movs	r0, #128	; 0x80
 80005ca:	0600      	lsls	r0, r0, #24
 80005cc:	4283      	cmp	r3, r0
 80005ce:	d020      	beq.n	8000612 <HAL_ADC_Init+0x92>
 80005d0:	690b      	ldr	r3, [r1, #16]
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	089b      	lsrs	r3, r3, #2
 80005d6:	610b      	str	r3, [r1, #16]
 80005d8:	4b5e      	ldr	r3, [pc, #376]	; (8000754 <HAL_ADC_Init+0x1d4>)
 80005da:	6819      	ldr	r1, [r3, #0]
 80005dc:	485e      	ldr	r0, [pc, #376]	; (8000758 <HAL_ADC_Init+0x1d8>)
 80005de:	4001      	ands	r1, r0
 80005e0:	6019      	str	r1, [r3, #0]
 80005e2:	6819      	ldr	r1, [r3, #0]
 80005e4:	6860      	ldr	r0, [r4, #4]
 80005e6:	4301      	orrs	r1, r0
 80005e8:	6019      	str	r1, [r3, #0]
 80005ea:	e01b      	b.n	8000624 <HAL_ADC_Init+0xa4>
    ADC_CLEAR_ERRORCODE(hadc);
 80005ec:	6583      	str	r3, [r0, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 80005ee:	2250      	movs	r2, #80	; 0x50
 80005f0:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80005f2:	f001 ffdf 	bl	80025b4 <HAL_ADC_MspInit>
 80005f6:	e7ca      	b.n	800058e <HAL_ADC_Init+0xe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80005fa:	2210      	movs	r2, #16
 80005fc:	4313      	orrs	r3, r2
 80005fe:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8000600:	2350      	movs	r3, #80	; 0x50
 8000602:	2200      	movs	r2, #0
 8000604:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8000606:	2001      	movs	r0, #1
}
 8000608:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800060a:	680b      	ldr	r3, [r1, #0]
 800060c:	07db      	lsls	r3, r3, #31
 800060e:	d413      	bmi.n	8000638 <HAL_ADC_Init+0xb8>
 8000610:	e7d1      	b.n	80005b6 <HAL_ADC_Init+0x36>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000612:	690b      	ldr	r3, [r1, #16]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	089b      	lsrs	r3, r3, #2
 8000618:	610b      	str	r3, [r1, #16]
 800061a:	6821      	ldr	r1, [r4, #0]
 800061c:	690b      	ldr	r3, [r1, #16]
 800061e:	6860      	ldr	r0, [r4, #4]
 8000620:	4303      	orrs	r3, r0
 8000622:	610b      	str	r3, [r1, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000624:	6821      	ldr	r1, [r4, #0]
 8000626:	68cb      	ldr	r3, [r1, #12]
 8000628:	2018      	movs	r0, #24
 800062a:	4383      	bics	r3, r0
 800062c:	60cb      	str	r3, [r1, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800062e:	6821      	ldr	r1, [r4, #0]
 8000630:	68cb      	ldr	r3, [r1, #12]
 8000632:	68a0      	ldr	r0, [r4, #8]
 8000634:	4303      	orrs	r3, r0
 8000636:	60cb      	str	r3, [r1, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000638:	4b46      	ldr	r3, [pc, #280]	; (8000754 <HAL_ADC_Init+0x1d4>)
 800063a:	6819      	ldr	r1, [r3, #0]
 800063c:	4847      	ldr	r0, [pc, #284]	; (800075c <HAL_ADC_Init+0x1dc>)
 800063e:	4001      	ands	r1, r0
 8000640:	6019      	str	r1, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000642:	6819      	ldr	r1, [r3, #0]
 8000644:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000646:	0640      	lsls	r0, r0, #25
 8000648:	4301      	orrs	r1, r0
 800064a:	6019      	str	r1, [r3, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800064c:	6823      	ldr	r3, [r4, #0]
 800064e:	6899      	ldr	r1, [r3, #8]
 8000650:	00c9      	lsls	r1, r1, #3
 8000652:	d404      	bmi.n	800065e <HAL_ADC_Init+0xde>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000654:	6898      	ldr	r0, [r3, #8]
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	0549      	lsls	r1, r1, #21
 800065a:	4301      	orrs	r1, r0
 800065c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800065e:	6821      	ldr	r1, [r4, #0]
 8000660:	68cb      	ldr	r3, [r1, #12]
 8000662:	483f      	ldr	r0, [pc, #252]	; (8000760 <HAL_ADC_Init+0x1e0>)
 8000664:	4003      	ands	r3, r0
 8000666:	60cb      	str	r3, [r1, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000668:	6820      	ldr	r0, [r4, #0]
 800066a:	68c1      	ldr	r1, [r0, #12]
 800066c:	68e3      	ldr	r3, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800066e:	6925      	ldr	r5, [r4, #16]
 8000670:	2d02      	cmp	r5, #2
 8000672:	d02d      	beq.n	80006d0 <HAL_ADC_Init+0x150>
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000674:	4313      	orrs	r3, r2
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000676:	2220      	movs	r2, #32
 8000678:	5ca2      	ldrb	r2, [r4, r2]
 800067a:	0352      	lsls	r2, r2, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800067c:	4313      	orrs	r3, r2
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800067e:	222c      	movs	r2, #44	; 0x2c
 8000680:	5ca2      	ldrb	r2, [r4, r2]
 8000682:	0052      	lsls	r2, r2, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000684:	4313      	orrs	r3, r2
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000686:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000688:	4313      	orrs	r3, r2
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800068a:	69a2      	ldr	r2, [r4, #24]
 800068c:	0392      	lsls	r2, r2, #14
                            hadc->Init.Overrun                               |
 800068e:	4313      	orrs	r3, r2
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000690:	69e2      	ldr	r2, [r4, #28]
 8000692:	03d2      	lsls	r2, r2, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000694:	4313      	orrs	r3, r2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000696:	430b      	orrs	r3, r1
 8000698:	60c3      	str	r3, [r0, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800069a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800069c:	22c2      	movs	r2, #194	; 0xc2
 800069e:	32ff      	adds	r2, #255	; 0xff
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d005      	beq.n	80006b0 <HAL_ADC_Init+0x130>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80006a4:	6821      	ldr	r1, [r4, #0]
 80006a6:	68ca      	ldr	r2, [r1, #12]
 80006a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80006aa:	4303      	orrs	r3, r0
 80006ac:	4313      	orrs	r3, r2
 80006ae:	60cb      	str	r3, [r1, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80006b0:	2321      	movs	r3, #33	; 0x21
 80006b2:	5ce3      	ldrb	r3, [r4, r3]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d00d      	beq.n	80006d4 <HAL_ADC_Init+0x154>
  if (hadc->Init.OversamplingMode == ENABLE)
 80006b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d01e      	beq.n	80006fc <HAL_ADC_Init+0x17c>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80006be:	6823      	ldr	r3, [r4, #0]
 80006c0:	691a      	ldr	r2, [r3, #16]
 80006c2:	07d2      	lsls	r2, r2, #31
 80006c4:	d52d      	bpl.n	8000722 <HAL_ADC_Init+0x1a2>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80006c6:	691a      	ldr	r2, [r3, #16]
 80006c8:	2101      	movs	r1, #1
 80006ca:	438a      	bics	r2, r1
 80006cc:	611a      	str	r2, [r3, #16]
 80006ce:	e028      	b.n	8000722 <HAL_ADC_Init+0x1a2>
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80006d0:	2204      	movs	r2, #4
 80006d2:	e7cf      	b.n	8000674 <HAL_ADC_Init+0xf4>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80006d4:	331f      	adds	r3, #31
 80006d6:	5ce3      	ldrb	r3, [r4, r3]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d106      	bne.n	80006ea <HAL_ADC_Init+0x16a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80006dc:	6822      	ldr	r2, [r4, #0]
 80006de:	68d1      	ldr	r1, [r2, #12]
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	025b      	lsls	r3, r3, #9
 80006e4:	430b      	orrs	r3, r1
 80006e6:	60d3      	str	r3, [r2, #12]
 80006e8:	e7e6      	b.n	80006b8 <HAL_ADC_Init+0x138>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80006ec:	2220      	movs	r2, #32
 80006ee:	4313      	orrs	r3, r2
 80006f0:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80006f4:	3a1f      	subs	r2, #31
 80006f6:	4313      	orrs	r3, r2
 80006f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80006fa:	e7dd      	b.n	80006b8 <HAL_ADC_Init+0x138>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80006fc:	6822      	ldr	r2, [r4, #0]
 80006fe:	6913      	ldr	r3, [r2, #16]
 8000700:	4918      	ldr	r1, [pc, #96]	; (8000764 <HAL_ADC_Init+0x1e4>)
 8000702:	400b      	ands	r3, r1
 8000704:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000706:	6821      	ldr	r1, [r4, #0]
 8000708:	690a      	ldr	r2, [r1, #16]
 800070a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800070c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800070e:	4303      	orrs	r3, r0
                               hadc->Init.Oversample.RightBitShift             |
 8000710:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8000712:	4303      	orrs	r3, r0
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000714:	4313      	orrs	r3, r2
 8000716:	610b      	str	r3, [r1, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000718:	6822      	ldr	r2, [r4, #0]
 800071a:	6913      	ldr	r3, [r2, #16]
 800071c:	2101      	movs	r1, #1
 800071e:	430b      	orrs	r3, r1
 8000720:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000722:	6822      	ldr	r2, [r4, #0]
 8000724:	6953      	ldr	r3, [r2, #20]
 8000726:	2107      	movs	r1, #7
 8000728:	438b      	bics	r3, r1
 800072a:	6153      	str	r3, [r2, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800072c:	6822      	ldr	r2, [r4, #0]
 800072e:	6953      	ldr	r3, [r2, #20]
 8000730:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000732:	430b      	orrs	r3, r1
 8000734:	6153      	str	r3, [r2, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8000736:	2300      	movs	r3, #0
 8000738:	65a3      	str	r3, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 800073a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800073c:	2203      	movs	r2, #3
 800073e:	4393      	bics	r3, r2
 8000740:	3a02      	subs	r2, #2
 8000742:	4313      	orrs	r3, r2
 8000744:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8000746:	2000      	movs	r0, #0
 8000748:	e75e      	b.n	8000608 <HAL_ADC_Init+0x88>
    return HAL_ERROR;
 800074a:	2001      	movs	r0, #1
 800074c:	e75c      	b.n	8000608 <HAL_ADC_Init+0x88>
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	fffffefd 	.word	0xfffffefd
 8000754:	40012708 	.word	0x40012708
 8000758:	ffc3ffff 	.word	0xffc3ffff
 800075c:	fdffffff 	.word	0xfdffffff
 8000760:	fffe0219 	.word	0xfffe0219
 8000764:	fffffc03 	.word	0xfffffc03

08000768 <HAL_ADC_Start_DMA>:
{
 8000768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800076a:	0004      	movs	r4, r0
 800076c:	000e      	movs	r6, r1
 800076e:	0017      	movs	r7, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000770:	6803      	ldr	r3, [r0, #0]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	075b      	lsls	r3, r3, #29
 8000776:	d43e      	bmi.n	80007f6 <HAL_ADC_Start_DMA+0x8e>
    __HAL_LOCK(hadc);
 8000778:	2350      	movs	r3, #80	; 0x50
 800077a:	5cc3      	ldrb	r3, [r0, r3]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d03c      	beq.n	80007fa <HAL_ADC_Start_DMA+0x92>
 8000780:	2350      	movs	r3, #80	; 0x50
 8000782:	2201      	movs	r2, #1
 8000784:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000786:	69c3      	ldr	r3, [r0, #28]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d032      	beq.n	80007f2 <HAL_ADC_Start_DMA+0x8a>
      tmp_hal_status = ADC_Enable(hadc);
 800078c:	f7ff febc 	bl	8000508 <ADC_Enable>
 8000790:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 8000792:	d12c      	bne.n	80007ee <HAL_ADC_Start_DMA+0x86>
      ADC_STATE_CLR_SET(hadc->State,
 8000794:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000796:	4a1a      	ldr	r2, [pc, #104]	; (8000800 <HAL_ADC_Start_DMA+0x98>)
 8000798:	401a      	ands	r2, r3
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	4313      	orrs	r3, r2
 80007a0:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 80007a2:	2300      	movs	r3, #0
 80007a4:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 80007a6:	2250      	movs	r2, #80	; 0x50
 80007a8:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80007aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80007ac:	4a15      	ldr	r2, [pc, #84]	; (8000804 <HAL_ADC_Start_DMA+0x9c>)
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80007b0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <HAL_ADC_Start_DMA+0xa0>)
 80007b4:	631a      	str	r2, [r3, #48]	; 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80007b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80007b8:	4a14      	ldr	r2, [pc, #80]	; (800080c <HAL_ADC_Start_DMA+0xa4>)
 80007ba:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80007bc:	6823      	ldr	r3, [r4, #0]
 80007be:	221c      	movs	r2, #28
 80007c0:	601a      	str	r2, [r3, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007c2:	6822      	ldr	r2, [r4, #0]
 80007c4:	6853      	ldr	r3, [r2, #4]
 80007c6:	2110      	movs	r1, #16
 80007c8:	430b      	orrs	r3, r1
 80007ca:	6053      	str	r3, [r2, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80007cc:	6822      	ldr	r2, [r4, #0]
 80007ce:	68d3      	ldr	r3, [r2, #12]
 80007d0:	390f      	subs	r1, #15
 80007d2:	430b      	orrs	r3, r1
 80007d4:	60d3      	str	r3, [r2, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80007d6:	6821      	ldr	r1, [r4, #0]
 80007d8:	3140      	adds	r1, #64	; 0x40
 80007da:	003b      	movs	r3, r7
 80007dc:	0032      	movs	r2, r6
 80007de:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80007e0:	f000 f9e4 	bl	8000bac <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80007e4:	6822      	ldr	r2, [r4, #0]
 80007e6:	6893      	ldr	r3, [r2, #8]
 80007e8:	2104      	movs	r1, #4
 80007ea:	430b      	orrs	r3, r1
 80007ec:	6093      	str	r3, [r2, #8]
}
 80007ee:	0028      	movs	r0, r5
 80007f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007f2:	2500      	movs	r5, #0
 80007f4:	e7ce      	b.n	8000794 <HAL_ADC_Start_DMA+0x2c>
    tmp_hal_status = HAL_BUSY;
 80007f6:	2502      	movs	r5, #2
 80007f8:	e7f9      	b.n	80007ee <HAL_ADC_Start_DMA+0x86>
    __HAL_LOCK(hadc);
 80007fa:	2502      	movs	r5, #2
 80007fc:	e7f7      	b.n	80007ee <HAL_ADC_Start_DMA+0x86>
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	fffff0fe 	.word	0xfffff0fe
 8000804:	08000815 	.word	0x08000815
 8000808:	0800088b 	.word	0x0800088b
 800080c:	08000897 	.word	0x08000897

08000810 <HAL_ADC_ConvCpltCallback>:
}
 8000810:	4770      	bx	lr
	...

08000814 <ADC_DMAConvCplt>:
{
 8000814:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000816:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800081a:	2150      	movs	r1, #80	; 0x50
 800081c:	4211      	tst	r1, r2
 800081e:	d003      	beq.n	8000828 <ADC_DMAConvCplt+0x14>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000824:	4798      	blx	r3
}
 8000826:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000828:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	0092      	lsls	r2, r2, #2
 800082e:	430a      	orrs	r2, r1
 8000830:	655a      	str	r2, [r3, #84]	; 0x54
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	68d0      	ldr	r0, [r2, #12]
 8000836:	21c0      	movs	r1, #192	; 0xc0
 8000838:	0109      	lsls	r1, r1, #4
 800083a:	4208      	tst	r0, r1
 800083c:	d114      	bne.n	8000868 <ADC_DMAConvCplt+0x54>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800083e:	2120      	movs	r1, #32
 8000840:	5c59      	ldrb	r1, [r3, r1]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000842:	2900      	cmp	r1, #0
 8000844:	d110      	bne.n	8000868 <ADC_DMAConvCplt+0x54>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000846:	6811      	ldr	r1, [r2, #0]
 8000848:	0709      	lsls	r1, r1, #28
 800084a:	d50d      	bpl.n	8000868 <ADC_DMAConvCplt+0x54>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800084c:	6891      	ldr	r1, [r2, #8]
 800084e:	0749      	lsls	r1, r1, #29
 8000850:	d40e      	bmi.n	8000870 <ADC_DMAConvCplt+0x5c>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000852:	6851      	ldr	r1, [r2, #4]
 8000854:	200c      	movs	r0, #12
 8000856:	4381      	bics	r1, r0
 8000858:	6051      	str	r1, [r2, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800085a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800085c:	4909      	ldr	r1, [pc, #36]	; (8000884 <ADC_DMAConvCplt+0x70>)
 800085e:	400a      	ands	r2, r1
 8000860:	3104      	adds	r1, #4
 8000862:	31ff      	adds	r1, #255	; 0xff
 8000864:	430a      	orrs	r2, r1
 8000866:	655a      	str	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8000868:	0018      	movs	r0, r3
 800086a:	f7ff ffd1 	bl	8000810 <HAL_ADC_ConvCpltCallback>
 800086e:	e7da      	b.n	8000826 <ADC_DMAConvCplt+0x12>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8000872:	2120      	movs	r1, #32
 8000874:	430a      	orrs	r2, r1
 8000876:	655a      	str	r2, [r3, #84]	; 0x54
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000878:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800087a:	391f      	subs	r1, #31
 800087c:	430a      	orrs	r2, r1
 800087e:	659a      	str	r2, [r3, #88]	; 0x58
 8000880:	e7f2      	b.n	8000868 <ADC_DMAConvCplt+0x54>
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	fffffefe 	.word	0xfffffefe

08000888 <HAL_ADC_ConvHalfCpltCallback>:
}
 8000888:	4770      	bx	lr

0800088a <ADC_DMAHalfConvCplt>:
{
 800088a:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800088c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800088e:	f7ff fffb 	bl	8000888 <HAL_ADC_ConvHalfCpltCallback>
}
 8000892:	bd10      	pop	{r4, pc}

08000894 <HAL_ADC_ErrorCallback>:
}
 8000894:	4770      	bx	lr

08000896 <ADC_DMAError>:
{
 8000896:	b510      	push	{r4, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000898:	6a80      	ldr	r0, [r0, #40]	; 0x28
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800089a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800089c:	2240      	movs	r2, #64	; 0x40
 800089e:	4313      	orrs	r3, r2
 80008a0:	6543      	str	r3, [r0, #84]	; 0x54
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80008a2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80008a4:	3a3c      	subs	r2, #60	; 0x3c
 80008a6:	4313      	orrs	r3, r2
 80008a8:	6583      	str	r3, [r0, #88]	; 0x58
  HAL_ADC_ErrorCallback(hadc); 
 80008aa:	f7ff fff3 	bl	8000894 <HAL_ADC_ErrorCallback>
}
 80008ae:	bd10      	pop	{r4, pc}

080008b0 <HAL_ADC_ConfigChannel>:
{
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	0004      	movs	r4, r0
 80008b4:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 80008b6:	2350      	movs	r3, #80	; 0x50
 80008b8:	5cc3      	ldrb	r3, [r0, r3]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d05c      	beq.n	8000978 <HAL_ADC_ConfigChannel+0xc8>
 80008be:	2350      	movs	r3, #80	; 0x50
 80008c0:	2201      	movs	r2, #1
 80008c2:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80008c4:	6803      	ldr	r3, [r0, #0]
 80008c6:	689a      	ldr	r2, [r3, #8]
 80008c8:	0752      	lsls	r2, r2, #29
 80008ca:	d423      	bmi.n	8000914 <HAL_ADC_ConfigChannel+0x64>
  if (sConfig->Rank != ADC_RANK_NONE)
 80008cc:	4a2b      	ldr	r2, [pc, #172]	; (800097c <HAL_ADC_ConfigChannel+0xcc>)
 80008ce:	6849      	ldr	r1, [r1, #4]
 80008d0:	4291      	cmp	r1, r2
 80008d2:	d032      	beq.n	800093a <HAL_ADC_ConfigChannel+0x8a>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80008d4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80008d6:	682a      	ldr	r2, [r5, #0]
 80008d8:	0352      	lsls	r2, r2, #13
 80008da:	0b52      	lsrs	r2, r2, #13
 80008dc:	430a      	orrs	r2, r1
 80008de:	629a      	str	r2, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80008e0:	682b      	ldr	r3, [r5, #0]
 80008e2:	035b      	lsls	r3, r3, #13
 80008e4:	d41f      	bmi.n	8000926 <HAL_ADC_ConfigChannel+0x76>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80008e6:	682b      	ldr	r3, [r5, #0]
 80008e8:	039b      	lsls	r3, r3, #14
 80008ea:	d505      	bpl.n	80008f8 <HAL_ADC_ConfigChannel+0x48>
      ADC->CCR |= ADC_CCR_VREFEN;   
 80008ec:	4a24      	ldr	r2, [pc, #144]	; (8000980 <HAL_ADC_ConfigChannel+0xd0>)
 80008ee:	6811      	ldr	r1, [r2, #0]
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	03db      	lsls	r3, r3, #15
 80008f4:	430b      	orrs	r3, r1
 80008f6:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80008f8:	682b      	ldr	r3, [r5, #0]
 80008fa:	03db      	lsls	r3, r3, #15
 80008fc:	d505      	bpl.n	800090a <HAL_ADC_ConfigChannel+0x5a>
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80008fe:	4a20      	ldr	r2, [pc, #128]	; (8000980 <HAL_ADC_ConfigChannel+0xd0>)
 8000900:	6811      	ldr	r1, [r2, #0]
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	045b      	lsls	r3, r3, #17
 8000906:	430b      	orrs	r3, r1
 8000908:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 800090a:	2350      	movs	r3, #80	; 0x50
 800090c:	2200      	movs	r2, #0
 800090e:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8000910:	2000      	movs	r0, #0
}
 8000912:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000914:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000916:	2220      	movs	r2, #32
 8000918:	4313      	orrs	r3, r2
 800091a:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800091c:	2350      	movs	r3, #80	; 0x50
 800091e:	2200      	movs	r2, #0
 8000920:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8000922:	2001      	movs	r0, #1
 8000924:	e7f5      	b.n	8000912 <HAL_ADC_ConfigChannel+0x62>
      ADC->CCR |= ADC_CCR_TSEN;   
 8000926:	4a16      	ldr	r2, [pc, #88]	; (8000980 <HAL_ADC_ConfigChannel+0xd0>)
 8000928:	6811      	ldr	r1, [r2, #0]
 800092a:	2380      	movs	r3, #128	; 0x80
 800092c:	041b      	lsls	r3, r3, #16
 800092e:	430b      	orrs	r3, r1
 8000930:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8000932:	200a      	movs	r0, #10
 8000934:	f7ff fdd0 	bl	80004d8 <ADC_DelayMicroSecond>
 8000938:	e7d5      	b.n	80008e6 <HAL_ADC_ConfigChannel+0x36>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800093a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800093c:	682a      	ldr	r2, [r5, #0]
 800093e:	0352      	lsls	r2, r2, #13
 8000940:	0b52      	lsrs	r2, r2, #13
 8000942:	4391      	bics	r1, r2
 8000944:	6299      	str	r1, [r3, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000946:	682b      	ldr	r3, [r5, #0]
 8000948:	035b      	lsls	r3, r3, #13
 800094a:	d504      	bpl.n	8000956 <HAL_ADC_ConfigChannel+0xa6>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800094c:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <HAL_ADC_ConfigChannel+0xd0>)
 800094e:	6813      	ldr	r3, [r2, #0]
 8000950:	490c      	ldr	r1, [pc, #48]	; (8000984 <HAL_ADC_ConfigChannel+0xd4>)
 8000952:	400b      	ands	r3, r1
 8000954:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8000956:	682b      	ldr	r3, [r5, #0]
 8000958:	039b      	lsls	r3, r3, #14
 800095a:	d504      	bpl.n	8000966 <HAL_ADC_ConfigChannel+0xb6>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800095c:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_ADC_ConfigChannel+0xd0>)
 800095e:	6813      	ldr	r3, [r2, #0]
 8000960:	4909      	ldr	r1, [pc, #36]	; (8000988 <HAL_ADC_ConfigChannel+0xd8>)
 8000962:	400b      	ands	r3, r1
 8000964:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8000966:	682b      	ldr	r3, [r5, #0]
 8000968:	03db      	lsls	r3, r3, #15
 800096a:	d5ce      	bpl.n	800090a <HAL_ADC_ConfigChannel+0x5a>
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <HAL_ADC_ConfigChannel+0xd0>)
 800096e:	6813      	ldr	r3, [r2, #0]
 8000970:	4906      	ldr	r1, [pc, #24]	; (800098c <HAL_ADC_ConfigChannel+0xdc>)
 8000972:	400b      	ands	r3, r1
 8000974:	6013      	str	r3, [r2, #0]
 8000976:	e7c8      	b.n	800090a <HAL_ADC_ConfigChannel+0x5a>
  __HAL_LOCK(hadc);
 8000978:	2002      	movs	r0, #2
 800097a:	e7ca      	b.n	8000912 <HAL_ADC_ConfigChannel+0x62>
 800097c:	00001001 	.word	0x00001001
 8000980:	40012708 	.word	0x40012708
 8000984:	ff7fffff 	.word	0xff7fffff
 8000988:	ffbfffff 	.word	0xffbfffff
 800098c:	feffffff 	.word	0xfeffffff

08000990 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8000990:	b570      	push	{r4, r5, r6, lr}
 8000992:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000994:	2350      	movs	r3, #80	; 0x50
 8000996:	5cc3      	ldrb	r3, [r0, r3]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d049      	beq.n	8000a30 <HAL_ADCEx_Calibration_Start+0xa0>
 800099c:	2350      	movs	r3, #80	; 0x50
 800099e:	2201      	movs	r2, #1
 80009a0:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80009a2:	6803      	ldr	r3, [r0, #0]
 80009a4:	6899      	ldr	r1, [r3, #8]
 80009a6:	3202      	adds	r2, #2
 80009a8:	400a      	ands	r2, r1
 80009aa:	2a01      	cmp	r2, #1
 80009ac:	d108      	bne.n	80009c0 <HAL_ADCEx_Calibration_Start+0x30>
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	07d2      	lsls	r2, r2, #31
 80009b2:	d505      	bpl.n	80009c0 <HAL_ADCEx_Calibration_Start+0x30>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009b4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80009b6:	2220      	movs	r2, #32
 80009b8:	4313      	orrs	r3, r2
 80009ba:	6543      	str	r3, [r0, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 80009bc:	2001      	movs	r0, #1
 80009be:	e033      	b.n	8000a28 <HAL_ADCEx_Calibration_Start+0x98>
    ADC_STATE_CLR_SET(hadc->State, 
 80009c0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80009c2:	491c      	ldr	r1, [pc, #112]	; (8000a34 <HAL_ADCEx_Calibration_Start+0xa4>)
 80009c4:	400a      	ands	r2, r1
 80009c6:	3106      	adds	r1, #6
 80009c8:	31ff      	adds	r1, #255	; 0xff
 80009ca:	430a      	orrs	r2, r1
 80009cc:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80009ce:	68de      	ldr	r6, [r3, #12]
 80009d0:	3101      	adds	r1, #1
 80009d2:	400e      	ands	r6, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80009d4:	68da      	ldr	r2, [r3, #12]
 80009d6:	438a      	bics	r2, r1
 80009d8:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80009da:	6822      	ldr	r2, [r4, #0]
 80009dc:	6891      	ldr	r1, [r2, #8]
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	061b      	lsls	r3, r3, #24
 80009e2:	430b      	orrs	r3, r1
 80009e4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();  
 80009e6:	f7ff fd63 	bl	80004b0 <HAL_GetTick>
 80009ea:	0005      	movs	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	2a00      	cmp	r2, #0
 80009f2:	da0f      	bge.n	8000a14 <HAL_ADCEx_Calibration_Start+0x84>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80009f4:	f7ff fd5c 	bl	80004b0 <HAL_GetTick>
 80009f8:	1b40      	subs	r0, r0, r5
 80009fa:	280a      	cmp	r0, #10
 80009fc:	d9f6      	bls.n	80009ec <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 80009fe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a00:	2212      	movs	r2, #18
 8000a02:	4393      	bics	r3, r2
 8000a04:	3a02      	subs	r2, #2
 8000a06:	4313      	orrs	r3, r2
 8000a08:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8000a0a:	2350      	movs	r3, #80	; 0x50
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	54e2      	strb	r2, [r4, r3]
        return HAL_ERROR;
 8000a10:	2001      	movs	r0, #1
 8000a12:	e00c      	b.n	8000a2e <HAL_ADCEx_Calibration_Start+0x9e>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8000a14:	68da      	ldr	r2, [r3, #12]
 8000a16:	4316      	orrs	r6, r2
 8000a18:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8000a1a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	4393      	bics	r3, r2
 8000a20:	3a02      	subs	r2, #2
 8000a22:	4313      	orrs	r3, r2
 8000a24:	6563      	str	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a26:	2000      	movs	r0, #0
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a28:	2350      	movs	r3, #80	; 0x50
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 8000a30:	2002      	movs	r0, #2
 8000a32:	e7fc      	b.n	8000a2e <HAL_ADCEx_Calibration_Start+0x9e>
 8000a34:	fffffefd 	.word	0xfffffefd

08000a38 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a38:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	db11      	blt.n	8000a62 <HAL_NVIC_SetPriority+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a3e:	0884      	lsrs	r4, r0, #2
 8000a40:	4d13      	ldr	r5, [pc, #76]	; (8000a90 <HAL_NVIC_SetPriority+0x58>)
 8000a42:	34c0      	adds	r4, #192	; 0xc0
 8000a44:	00a4      	lsls	r4, r4, #2
 8000a46:	5962      	ldr	r2, [r4, r5]
 8000a48:	2303      	movs	r3, #3
 8000a4a:	4018      	ands	r0, r3
 8000a4c:	00c0      	lsls	r0, r0, #3
 8000a4e:	33fc      	adds	r3, #252	; 0xfc
 8000a50:	001e      	movs	r6, r3
 8000a52:	4086      	lsls	r6, r0
 8000a54:	43b2      	bics	r2, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a56:	0189      	lsls	r1, r1, #6
 8000a58:	400b      	ands	r3, r1
 8000a5a:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	5163      	str	r3, [r4, r5]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000a60:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a62:	b2c0      	uxtb	r0, r0
 8000a64:	220f      	movs	r2, #15
 8000a66:	4002      	ands	r2, r0
 8000a68:	3a08      	subs	r2, #8
 8000a6a:	0892      	lsrs	r2, r2, #2
 8000a6c:	3206      	adds	r2, #6
 8000a6e:	0092      	lsls	r2, r2, #2
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_NVIC_SetPriority+0x5c>)
 8000a72:	18d3      	adds	r3, r2, r3
 8000a74:	685d      	ldr	r5, [r3, #4]
 8000a76:	2403      	movs	r4, #3
 8000a78:	4020      	ands	r0, r4
 8000a7a:	00c0      	lsls	r0, r0, #3
 8000a7c:	22ff      	movs	r2, #255	; 0xff
 8000a7e:	0014      	movs	r4, r2
 8000a80:	4084      	lsls	r4, r0
 8000a82:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a84:	0189      	lsls	r1, r1, #6
 8000a86:	400a      	ands	r2, r1
 8000a88:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a8a:	432a      	orrs	r2, r5
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	e7e7      	b.n	8000a60 <HAL_NVIC_SetPriority+0x28>
 8000a90:	e000e100 	.word	0xe000e100
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000a98:	231f      	movs	r3, #31
 8000a9a:	4018      	ands	r0, r3
 8000a9c:	3b1e      	subs	r3, #30
 8000a9e:	4083      	lsls	r3, r0
 8000aa0:	4a01      	ldr	r2, [pc, #4]	; (8000aa8 <HAL_NVIC_EnableIRQ+0x10>)
 8000aa2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000aa4:	4770      	bx	lr
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	3801      	subs	r0, #1
 8000aae:	4b0a      	ldr	r3, [pc, #40]	; (8000ad8 <HAL_SYSTICK_Config+0x2c>)
 8000ab0:	4298      	cmp	r0, r3
 8000ab2:	d80f      	bhi.n	8000ad4 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab4:	4a09      	ldr	r2, [pc, #36]	; (8000adc <HAL_SYSTICK_Config+0x30>)
 8000ab6:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab8:	4809      	ldr	r0, [pc, #36]	; (8000ae0 <HAL_SYSTICK_Config+0x34>)
 8000aba:	6a03      	ldr	r3, [r0, #32]
 8000abc:	021b      	lsls	r3, r3, #8
 8000abe:	0a1b      	lsrs	r3, r3, #8
 8000ac0:	21c0      	movs	r1, #192	; 0xc0
 8000ac2:	0609      	lsls	r1, r1, #24
 8000ac4:	430b      	orrs	r3, r1
 8000ac6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	2300      	movs	r3, #0
 8000aca:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000acc:	3307      	adds	r3, #7
 8000ace:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad0:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000ad2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ad4:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8000ad6:	e7fc      	b.n	8000ad2 <HAL_SYSTICK_Config+0x26>
 8000ad8:	00ffffff 	.word	0x00ffffff
 8000adc:	e000e010 	.word	0xe000e010
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ae4:	b570      	push	{r4, r5, r6, lr}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000ae6:	251c      	movs	r5, #28
 8000ae8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000aea:	4025      	ands	r5, r4
 8000aec:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000aee:	2401      	movs	r4, #1
 8000af0:	40ac      	lsls	r4, r5
 8000af2:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000af4:	6804      	ldr	r4, [r0, #0]
 8000af6:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000af8:	6883      	ldr	r3, [r0, #8]
 8000afa:	2b10      	cmp	r3, #16
 8000afc:	d004      	beq.n	8000b08 <DMA_SetConfig+0x24>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000afe:	6803      	ldr	r3, [r0, #0]
 8000b00:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000b02:	6803      	ldr	r3, [r0, #0]
 8000b04:	60da      	str	r2, [r3, #12]
  }
}
 8000b06:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8000b08:	6803      	ldr	r3, [r0, #0]
 8000b0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000b0c:	6803      	ldr	r3, [r0, #0]
 8000b0e:	60d9      	str	r1, [r3, #12]
 8000b10:	e7f9      	b.n	8000b06 <DMA_SetConfig+0x22>
	...

08000b14 <HAL_DMA_Init>:
{
 8000b14:	b570      	push	{r4, r5, r6, lr}
 8000b16:	1e04      	subs	r4, r0, #0
  if(hdma == NULL)
 8000b18:	d03d      	beq.n	8000b96 <HAL_DMA_Init+0x82>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000b1a:	6805      	ldr	r5, [r0, #0]
 8000b1c:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <HAL_DMA_Init+0x88>)
 8000b1e:	18e8      	adds	r0, r5, r3
 8000b20:	2114      	movs	r1, #20
 8000b22:	f7ff faf9 	bl	8000118 <__udivsi3>
 8000b26:	0080      	lsls	r0, r0, #2
 8000b28:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <HAL_DMA_Init+0x8c>)
 8000b2c:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b2e:	2325      	movs	r3, #37	; 0x25
 8000b30:	2202      	movs	r2, #2
 8000b32:	54e2      	strb	r2, [r4, r3]
  tmp = hdma->Instance->CCR;
 8000b34:	682b      	ldr	r3, [r5, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000b36:	4a1b      	ldr	r2, [pc, #108]	; (8000ba4 <HAL_DMA_Init+0x90>)
 8000b38:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000b3a:	68a3      	ldr	r3, [r4, #8]
 8000b3c:	68e1      	ldr	r1, [r4, #12]
 8000b3e:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b40:	6921      	ldr	r1, [r4, #16]
 8000b42:	430b      	orrs	r3, r1
 8000b44:	6961      	ldr	r1, [r4, #20]
 8000b46:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b48:	69a1      	ldr	r1, [r4, #24]
 8000b4a:	430b      	orrs	r3, r1
 8000b4c:	69e1      	ldr	r1, [r4, #28]
 8000b4e:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b50:	6a21      	ldr	r1, [r4, #32]
 8000b52:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8000b54:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8000b56:	602b      	str	r3, [r5, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	01db      	lsls	r3, r3, #7
 8000b5c:	68a2      	ldr	r2, [r4, #8]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d010      	beq.n	8000b84 <HAL_DMA_Init+0x70>
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000b62:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <HAL_DMA_Init+0x94>)
 8000b64:	6819      	ldr	r1, [r3, #0]
 8000b66:	221c      	movs	r2, #28
 8000b68:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8000b6a:	4015      	ands	r5, r2
 8000b6c:	200f      	movs	r0, #15
 8000b6e:	40a8      	lsls	r0, r5
 8000b70:	4381      	bics	r1, r0
 8000b72:	6019      	str	r1, [r3, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000b74:	6819      	ldr	r1, [r3, #0]
 8000b76:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000b78:	4002      	ands	r2, r0
 8000b7a:	6860      	ldr	r0, [r4, #4]
 8000b7c:	4090      	lsls	r0, r2
 8000b7e:	0002      	movs	r2, r0
 8000b80:	430a      	orrs	r2, r1
 8000b82:	601a      	str	r2, [r3, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8000b88:	2225      	movs	r2, #37	; 0x25
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	54a1      	strb	r1, [r4, r2]
  hdma->Lock = HAL_UNLOCKED;
 8000b8e:	3a01      	subs	r2, #1
 8000b90:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8000b92:	2000      	movs	r0, #0
}
 8000b94:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000b96:	2001      	movs	r0, #1
 8000b98:	e7fc      	b.n	8000b94 <HAL_DMA_Init+0x80>
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	bffdfff8 	.word	0xbffdfff8
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	ffff800f 	.word	0xffff800f
 8000ba8:	400200a8 	.word	0x400200a8

08000bac <HAL_DMA_Start_IT>:
{
 8000bac:	b570      	push	{r4, r5, r6, lr}
 8000bae:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8000bb0:	2024      	movs	r0, #36	; 0x24
 8000bb2:	5c20      	ldrb	r0, [r4, r0]
 8000bb4:	2801      	cmp	r0, #1
 8000bb6:	d032      	beq.n	8000c1e <HAL_DMA_Start_IT+0x72>
 8000bb8:	2024      	movs	r0, #36	; 0x24
 8000bba:	2501      	movs	r5, #1
 8000bbc:	5425      	strb	r5, [r4, r0]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000bbe:	3001      	adds	r0, #1
 8000bc0:	5c20      	ldrb	r0, [r4, r0]
 8000bc2:	2801      	cmp	r0, #1
 8000bc4:	d004      	beq.n	8000bd0 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8000bc6:	2324      	movs	r3, #36	; 0x24
 8000bc8:	2200      	movs	r2, #0
 8000bca:	54e2      	strb	r2, [r4, r3]
    status = HAL_BUSY;
 8000bcc:	2002      	movs	r0, #2
}
 8000bce:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8000bd0:	3024      	adds	r0, #36	; 0x24
 8000bd2:	3501      	adds	r5, #1
 8000bd4:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000bda:	6825      	ldr	r5, [r4, #0]
 8000bdc:	6828      	ldr	r0, [r5, #0]
 8000bde:	2601      	movs	r6, #1
 8000be0:	43b0      	bics	r0, r6
 8000be2:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000be4:	0020      	movs	r0, r4
 8000be6:	f7ff ff7d 	bl	8000ae4 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8000bea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00b      	beq.n	8000c08 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bf0:	6822      	ldr	r2, [r4, #0]
 8000bf2:	6813      	ldr	r3, [r2, #0]
 8000bf4:	210e      	movs	r1, #14
 8000bf6:	430b      	orrs	r3, r1
 8000bf8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000bfa:	6822      	ldr	r2, [r4, #0]
 8000bfc:	6813      	ldr	r3, [r2, #0]
 8000bfe:	2101      	movs	r1, #1
 8000c00:	430b      	orrs	r3, r1
 8000c02:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c04:	2000      	movs	r0, #0
 8000c06:	e7e2      	b.n	8000bce <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c08:	6822      	ldr	r2, [r4, #0]
 8000c0a:	6813      	ldr	r3, [r2, #0]
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	438b      	bics	r3, r1
 8000c10:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c12:	6822      	ldr	r2, [r4, #0]
 8000c14:	6813      	ldr	r3, [r2, #0]
 8000c16:	3106      	adds	r1, #6
 8000c18:	430b      	orrs	r3, r1
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	e7ed      	b.n	8000bfa <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8000c1e:	2002      	movs	r0, #2
 8000c20:	e7d5      	b.n	8000bce <HAL_DMA_Start_IT+0x22>

08000c22 <HAL_DMA_Abort>:
{
 8000c22:	b510      	push	{r4, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c24:	2325      	movs	r3, #37	; 0x25
 8000c26:	5cc3      	ldrb	r3, [r0, r3]
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d006      	beq.n	8000c3a <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c2c:	2304      	movs	r3, #4
 8000c2e:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8000c30:	3320      	adds	r3, #32
 8000c32:	2200      	movs	r2, #0
 8000c34:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8000c36:	2001      	movs	r0, #1
}
 8000c38:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c3a:	6802      	ldr	r2, [r0, #0]
 8000c3c:	6813      	ldr	r3, [r2, #0]
 8000c3e:	210e      	movs	r1, #14
 8000c40:	438b      	bics	r3, r1
 8000c42:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000c44:	6801      	ldr	r1, [r0, #0]
 8000c46:	680a      	ldr	r2, [r1, #0]
 8000c48:	2301      	movs	r3, #1
 8000c4a:	439a      	bics	r2, r3
 8000c4c:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000c4e:	221c      	movs	r2, #28
 8000c50:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8000c52:	400a      	ands	r2, r1
 8000c54:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000c56:	001c      	movs	r4, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000c5c:	2225      	movs	r2, #37	; 0x25
 8000c5e:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8000c60:	3323      	adds	r3, #35	; 0x23
 8000c62:	2200      	movs	r2, #0
 8000c64:	54c2      	strb	r2, [r0, r3]
    return status;
 8000c66:	2000      	movs	r0, #0
 8000c68:	e7e6      	b.n	8000c38 <HAL_DMA_Abort+0x16>

08000c6a <HAL_DMA_Abort_IT>:
{
 8000c6a:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c6c:	2325      	movs	r3, #37	; 0x25
 8000c6e:	5cc3      	ldrb	r3, [r0, r3]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d003      	beq.n	8000c7c <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c74:	2304      	movs	r3, #4
 8000c76:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8000c78:	2001      	movs	r0, #1
}
 8000c7a:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c7c:	6802      	ldr	r2, [r0, #0]
 8000c7e:	6813      	ldr	r3, [r2, #0]
 8000c80:	210e      	movs	r1, #14
 8000c82:	438b      	bics	r3, r1
 8000c84:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000c86:	6801      	ldr	r1, [r0, #0]
 8000c88:	680a      	ldr	r2, [r1, #0]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	439a      	bics	r2, r3
 8000c8e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000c90:	221c      	movs	r2, #28
 8000c92:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8000c94:	400a      	ands	r2, r1
 8000c96:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000c98:	001c      	movs	r4, r3
 8000c9a:	4094      	lsls	r4, r2
 8000c9c:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000c9e:	2225      	movs	r2, #37	; 0x25
 8000ca0:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8000ca2:	3323      	adds	r3, #35	; 0x23
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8000ca8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <HAL_DMA_Abort_IT+0x4a>
      hdma->XferAbortCallback(hdma);
 8000cae:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	e7e2      	b.n	8000c7a <HAL_DMA_Abort_IT+0x10>
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	e7e0      	b.n	8000c7a <HAL_DMA_Abort_IT+0x10>

08000cb8 <HAL_DMA_IRQHandler>:
{
 8000cb8:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000cba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000cbc:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000cbe:	6804      	ldr	r4, [r0, #0]
 8000cc0:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000cc2:	231c      	movs	r3, #28
 8000cc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	2204      	movs	r2, #4
 8000cca:	409a      	lsls	r2, r3
 8000ccc:	4211      	tst	r1, r2
 8000cce:	d014      	beq.n	8000cfa <HAL_DMA_IRQHandler+0x42>
 8000cd0:	076a      	lsls	r2, r5, #29
 8000cd2:	d512      	bpl.n	8000cfa <HAL_DMA_IRQHandler+0x42>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cd4:	6823      	ldr	r3, [r4, #0]
 8000cd6:	069b      	lsls	r3, r3, #26
 8000cd8:	d403      	bmi.n	8000ce2 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cda:	6823      	ldr	r3, [r4, #0]
 8000cdc:	2204      	movs	r2, #4
 8000cde:	4393      	bics	r3, r2
 8000ce0:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000ce2:	221c      	movs	r2, #28
 8000ce4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000cea:	2304      	movs	r3, #4
 8000cec:	4093      	lsls	r3, r2
 8000cee:	604b      	str	r3, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8000cf0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d000      	beq.n	8000cf8 <HAL_DMA_IRQHandler+0x40>
        hdma->XferHalfCpltCallback(hdma);
 8000cf6:	4798      	blx	r3
}
 8000cf8:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	409a      	lsls	r2, r3
 8000cfe:	4211      	tst	r1, r2
 8000d00:	d01a      	beq.n	8000d38 <HAL_DMA_IRQHandler+0x80>
 8000d02:	07aa      	lsls	r2, r5, #30
 8000d04:	d518      	bpl.n	8000d38 <HAL_DMA_IRQHandler+0x80>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d06:	6823      	ldr	r3, [r4, #0]
 8000d08:	069b      	lsls	r3, r3, #26
 8000d0a:	d406      	bmi.n	8000d1a <HAL_DMA_IRQHandler+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000d0c:	6823      	ldr	r3, [r4, #0]
 8000d0e:	220a      	movs	r2, #10
 8000d10:	4393      	bics	r3, r2
 8000d12:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000d14:	2325      	movs	r3, #37	; 0x25
 8000d16:	3a09      	subs	r2, #9
 8000d18:	54c2      	strb	r2, [r0, r3]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d1a:	221c      	movs	r2, #28
 8000d1c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000d1e:	401a      	ands	r2, r3
 8000d20:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000d22:	2302      	movs	r3, #2
 8000d24:	4093      	lsls	r3, r2
 8000d26:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000d28:	2324      	movs	r3, #36	; 0x24
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferCpltCallback != NULL)
 8000d2e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0e1      	beq.n	8000cf8 <HAL_DMA_IRQHandler+0x40>
      hdma->XferCpltCallback(hdma);
 8000d34:	4798      	blx	r3
 8000d36:	e7df      	b.n	8000cf8 <HAL_DMA_IRQHandler+0x40>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8000d38:	2208      	movs	r2, #8
 8000d3a:	409a      	lsls	r2, r3
 8000d3c:	4211      	tst	r1, r2
 8000d3e:	d0db      	beq.n	8000cf8 <HAL_DMA_IRQHandler+0x40>
 8000d40:	072b      	lsls	r3, r5, #28
 8000d42:	d5d9      	bpl.n	8000cf8 <HAL_DMA_IRQHandler+0x40>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d44:	6823      	ldr	r3, [r4, #0]
 8000d46:	220e      	movs	r2, #14
 8000d48:	4393      	bics	r3, r2
 8000d4a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d4c:	320e      	adds	r2, #14
 8000d4e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000d50:	401a      	ands	r2, r3
 8000d52:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000d54:	2301      	movs	r3, #1
 8000d56:	001c      	movs	r4, r3
 8000d58:	4094      	lsls	r4, r2
 8000d5a:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d5c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8000d5e:	2225      	movs	r2, #37	; 0x25
 8000d60:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8000d62:	3323      	adds	r3, #35	; 0x23
 8000d64:	2200      	movs	r2, #0
 8000d66:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8000d68:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0c4      	beq.n	8000cf8 <HAL_DMA_IRQHandler+0x40>
      hdma->XferErrorCallback(hdma);
 8000d6e:	4798      	blx	r3
  return;
 8000d70:	e7c2      	b.n	8000cf8 <HAL_DMA_IRQHandler+0x40>

08000d72 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8000d72:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8000d74:	4770      	bx	lr
	...

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7a:	46c6      	mov	lr, r8
 8000d7c:	b500      	push	{lr}
  uint32_t position = 0x00U;
 8000d7e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d80:	e038      	b.n	8000df4 <HAL_GPIO_Init+0x7c>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d82:	2605      	movs	r6, #5
 8000d84:	e000      	b.n	8000d88 <HAL_GPIO_Init+0x10>
 8000d86:	2600      	movs	r6, #0
 8000d88:	40ae      	lsls	r6, r5
 8000d8a:	0035      	movs	r5, r6
 8000d8c:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d8e:	3402      	adds	r4, #2
 8000d90:	00a4      	lsls	r4, r4, #2
 8000d92:	4e58      	ldr	r6, [pc, #352]	; (8000ef4 <HAL_GPIO_Init+0x17c>)
 8000d94:	51a5      	str	r5, [r4, r6]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d96:	4c58      	ldr	r4, [pc, #352]	; (8000ef8 <HAL_GPIO_Init+0x180>)
 8000d98:	6825      	ldr	r5, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	43d4      	mvns	r4, r2
 8000d9e:	002e      	movs	r6, r5
 8000da0:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000da2:	684a      	ldr	r2, [r1, #4]
 8000da4:	03d2      	lsls	r2, r2, #15
 8000da6:	d502      	bpl.n	8000dae <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000da8:	4642      	mov	r2, r8
 8000daa:	4315      	orrs	r5, r2
 8000dac:	002e      	movs	r6, r5
        }
        EXTI->IMR = temp;
 8000dae:	4d52      	ldr	r5, [pc, #328]	; (8000ef8 <HAL_GPIO_Init+0x180>)
 8000db0:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8000db2:	686d      	ldr	r5, [r5, #4]
        temp &= ~((uint32_t)iocurrent);
 8000db4:	002e      	movs	r6, r5
 8000db6:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000db8:	684a      	ldr	r2, [r1, #4]
 8000dba:	0392      	lsls	r2, r2, #14
 8000dbc:	d502      	bpl.n	8000dc4 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000dbe:	4642      	mov	r2, r8
 8000dc0:	4315      	orrs	r5, r2
 8000dc2:	002e      	movs	r6, r5
        }
        EXTI->EMR = temp;
 8000dc4:	4d4c      	ldr	r5, [pc, #304]	; (8000ef8 <HAL_GPIO_Init+0x180>)
 8000dc6:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dc8:	68ad      	ldr	r5, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 8000dca:	002e      	movs	r6, r5
 8000dcc:	4026      	ands	r6, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dce:	684a      	ldr	r2, [r1, #4]
 8000dd0:	02d2      	lsls	r2, r2, #11
 8000dd2:	d502      	bpl.n	8000dda <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000dd4:	4642      	mov	r2, r8
 8000dd6:	4315      	orrs	r5, r2
 8000dd8:	002e      	movs	r6, r5
        }
        EXTI->RTSR = temp;
 8000dda:	4d47      	ldr	r5, [pc, #284]	; (8000ef8 <HAL_GPIO_Init+0x180>)
 8000ddc:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8000dde:	68ed      	ldr	r5, [r5, #12]
        temp &= ~((uint32_t)iocurrent);
 8000de0:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000de2:	684a      	ldr	r2, [r1, #4]
 8000de4:	0292      	lsls	r2, r2, #10
 8000de6:	d502      	bpl.n	8000dee <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000de8:	4642      	mov	r2, r8
 8000dea:	432a      	orrs	r2, r5
 8000dec:	0014      	movs	r4, r2
        }
        EXTI->FTSR = temp;
 8000dee:	4a42      	ldr	r2, [pc, #264]	; (8000ef8 <HAL_GPIO_Init+0x180>)
 8000df0:	60d4      	str	r4, [r2, #12]
      }
    }
    position++;
 8000df2:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8000df4:	680a      	ldr	r2, [r1, #0]
 8000df6:	0014      	movs	r4, r2
 8000df8:	40dc      	lsrs	r4, r3
 8000dfa:	d077      	beq.n	8000eec <HAL_GPIO_Init+0x174>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000dfc:	2401      	movs	r4, #1
 8000dfe:	409c      	lsls	r4, r3
 8000e00:	4022      	ands	r2, r4
 8000e02:	4690      	mov	r8, r2
    if(iocurrent)
 8000e04:	d0f5      	beq.n	8000df2 <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000e06:	684d      	ldr	r5, [r1, #4]
 8000e08:	2d02      	cmp	r5, #2
 8000e0a:	d001      	beq.n	8000e10 <HAL_GPIO_Init+0x98>
 8000e0c:	2d12      	cmp	r5, #18
 8000e0e:	d10e      	bne.n	8000e2e <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 8000e10:	08dd      	lsrs	r5, r3, #3
 8000e12:	3508      	adds	r5, #8
 8000e14:	00ad      	lsls	r5, r5, #2
 8000e16:	582f      	ldr	r7, [r5, r0]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000e18:	2607      	movs	r6, #7
 8000e1a:	401e      	ands	r6, r3
 8000e1c:	00b6      	lsls	r6, r6, #2
 8000e1e:	220f      	movs	r2, #15
 8000e20:	40b2      	lsls	r2, r6
 8000e22:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8000e24:	690a      	ldr	r2, [r1, #16]
 8000e26:	40b2      	lsls	r2, r6
 8000e28:	0016      	movs	r6, r2
 8000e2a:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000e2c:	502e      	str	r6, [r5, r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e2e:	684d      	ldr	r5, [r1, #4]
 8000e30:	1e6e      	subs	r6, r5, #1
 8000e32:	2e01      	cmp	r6, #1
 8000e34:	d903      	bls.n	8000e3e <HAL_GPIO_Init+0xc6>
 8000e36:	2d11      	cmp	r5, #17
 8000e38:	d001      	beq.n	8000e3e <HAL_GPIO_Init+0xc6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e3a:	2d12      	cmp	r5, #18
 8000e3c:	d112      	bne.n	8000e64 <HAL_GPIO_Init+0xec>
        temp = GPIOx->OSPEEDR;
 8000e3e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e40:	005f      	lsls	r7, r3, #1
 8000e42:	2603      	movs	r6, #3
 8000e44:	40be      	lsls	r6, r7
 8000e46:	43b5      	bics	r5, r6
 8000e48:	002e      	movs	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e4a:	68cd      	ldr	r5, [r1, #12]
 8000e4c:	40bd      	lsls	r5, r7
 8000e4e:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000e50:	6085      	str	r5, [r0, #8]
        temp= GPIOx->OTYPER;
 8000e52:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e54:	43a5      	bics	r5, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e56:	684a      	ldr	r2, [r1, #4]
 8000e58:	0916      	lsrs	r6, r2, #4
 8000e5a:	2401      	movs	r4, #1
 8000e5c:	4034      	ands	r4, r6
 8000e5e:	409c      	lsls	r4, r3
 8000e60:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8000e62:	6044      	str	r4, [r0, #4]
      temp = GPIOx->MODER;
 8000e64:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e66:	005e      	lsls	r6, r3, #1
 8000e68:	2403      	movs	r4, #3
 8000e6a:	0025      	movs	r5, r4
 8000e6c:	40b5      	lsls	r5, r6
 8000e6e:	43ed      	mvns	r5, r5
 8000e70:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e72:	684a      	ldr	r2, [r1, #4]
 8000e74:	4014      	ands	r4, r2
 8000e76:	40b4      	lsls	r4, r6
 8000e78:	433c      	orrs	r4, r7
      GPIOx->MODER = temp;
 8000e7a:	6004      	str	r4, [r0, #0]
      temp = GPIOx->PUPDR;
 8000e7c:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e7e:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8000e80:	688c      	ldr	r4, [r1, #8]
 8000e82:	40b4      	lsls	r4, r6
 8000e84:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000e86:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000e88:	684a      	ldr	r2, [r1, #4]
 8000e8a:	00d2      	lsls	r2, r2, #3
 8000e8c:	d5b1      	bpl.n	8000df2 <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	4d1b      	ldr	r5, [pc, #108]	; (8000efc <HAL_GPIO_Init+0x184>)
 8000e90:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8000e92:	2601      	movs	r6, #1
 8000e94:	4334      	orrs	r4, r6
 8000e96:	636c      	str	r4, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e98:	089c      	lsrs	r4, r3, #2
 8000e9a:	1ca5      	adds	r5, r4, #2
 8000e9c:	00ad      	lsls	r5, r5, #2
 8000e9e:	4e15      	ldr	r6, [pc, #84]	; (8000ef4 <HAL_GPIO_Init+0x17c>)
 8000ea0:	59af      	ldr	r7, [r5, r6]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000ea2:	2603      	movs	r6, #3
 8000ea4:	401e      	ands	r6, r3
 8000ea6:	00b5      	lsls	r5, r6, #2
 8000ea8:	260f      	movs	r6, #15
 8000eaa:	40ae      	lsls	r6, r5
 8000eac:	43b7      	bics	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000eae:	26a0      	movs	r6, #160	; 0xa0
 8000eb0:	05f6      	lsls	r6, r6, #23
 8000eb2:	42b0      	cmp	r0, r6
 8000eb4:	d100      	bne.n	8000eb8 <HAL_GPIO_Init+0x140>
 8000eb6:	e766      	b.n	8000d86 <HAL_GPIO_Init+0xe>
 8000eb8:	4e11      	ldr	r6, [pc, #68]	; (8000f00 <HAL_GPIO_Init+0x188>)
 8000eba:	42b0      	cmp	r0, r6
 8000ebc:	d00e      	beq.n	8000edc <HAL_GPIO_Init+0x164>
 8000ebe:	4e11      	ldr	r6, [pc, #68]	; (8000f04 <HAL_GPIO_Init+0x18c>)
 8000ec0:	42b0      	cmp	r0, r6
 8000ec2:	d00d      	beq.n	8000ee0 <HAL_GPIO_Init+0x168>
 8000ec4:	4e10      	ldr	r6, [pc, #64]	; (8000f08 <HAL_GPIO_Init+0x190>)
 8000ec6:	42b0      	cmp	r0, r6
 8000ec8:	d00c      	beq.n	8000ee4 <HAL_GPIO_Init+0x16c>
 8000eca:	4e10      	ldr	r6, [pc, #64]	; (8000f0c <HAL_GPIO_Init+0x194>)
 8000ecc:	42b0      	cmp	r0, r6
 8000ece:	d00b      	beq.n	8000ee8 <HAL_GPIO_Init+0x170>
 8000ed0:	4e0f      	ldr	r6, [pc, #60]	; (8000f10 <HAL_GPIO_Init+0x198>)
 8000ed2:	42b0      	cmp	r0, r6
 8000ed4:	d100      	bne.n	8000ed8 <HAL_GPIO_Init+0x160>
 8000ed6:	e754      	b.n	8000d82 <HAL_GPIO_Init+0xa>
 8000ed8:	2606      	movs	r6, #6
 8000eda:	e755      	b.n	8000d88 <HAL_GPIO_Init+0x10>
 8000edc:	2601      	movs	r6, #1
 8000ede:	e753      	b.n	8000d88 <HAL_GPIO_Init+0x10>
 8000ee0:	2602      	movs	r6, #2
 8000ee2:	e751      	b.n	8000d88 <HAL_GPIO_Init+0x10>
 8000ee4:	2603      	movs	r6, #3
 8000ee6:	e74f      	b.n	8000d88 <HAL_GPIO_Init+0x10>
 8000ee8:	2604      	movs	r6, #4
 8000eea:	e74d      	b.n	8000d88 <HAL_GPIO_Init+0x10>
  }
}
 8000eec:	bc04      	pop	{r2}
 8000eee:	4690      	mov	r8, r2
 8000ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	40010000 	.word	0x40010000
 8000ef8:	40010400 	.word	0x40010400
 8000efc:	40021000 	.word	0x40021000
 8000f00:	50000400 	.word	0x50000400
 8000f04:	50000800 	.word	0x50000800
 8000f08:	50000c00 	.word	0x50000c00
 8000f0c:	50001000 	.word	0x50001000
 8000f10:	50001c00 	.word	0x50001c00

08000f14 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f14:	6903      	ldr	r3, [r0, #16]
 8000f16:	420b      	tst	r3, r1
 8000f18:	d101      	bne.n	8000f1e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f1a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000f1c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8000f1e:	2001      	movs	r0, #1
 8000f20:	e7fc      	b.n	8000f1c <HAL_GPIO_ReadPin+0x8>

08000f22 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d101      	bne.n	8000f2a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 8000f26:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8000f28:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000f2a:	6181      	str	r1, [r0, #24]
 8000f2c:	e7fc      	b.n	8000f28 <HAL_GPIO_WritePin+0x6>
	...

08000f30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f30:	b510      	push	{r4, lr}
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8000f34:	68d9      	ldr	r1, [r3, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f36:	230c      	movs	r3, #12
 8000f38:	400b      	ands	r3, r1
 8000f3a:	2b08      	cmp	r3, #8
 8000f3c:	d042      	beq.n	8000fc4 <HAL_RCC_GetSysClockFreq+0x94>
 8000f3e:	2b0c      	cmp	r3, #12
 8000f40:	d011      	beq.n	8000f66 <HAL_RCC_GetSysClockFreq+0x36>
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	d009      	beq.n	8000f5a <HAL_RCC_GetSysClockFreq+0x2a>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	0b52      	lsrs	r2, r2, #13
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	4013      	ands	r3, r2
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000f50:	3301      	adds	r3, #1
 8000f52:	2080      	movs	r0, #128	; 0x80
 8000f54:	0200      	lsls	r0, r0, #8
 8000f56:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8000f58:	bd10      	pop	{r4, pc}
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	06db      	lsls	r3, r3, #27
 8000f60:	d532      	bpl.n	8000fc8 <HAL_RCC_GetSysClockFreq+0x98>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000f62:	481b      	ldr	r0, [pc, #108]	; (8000fd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000f64:	e7f8      	b.n	8000f58 <HAL_RCC_GetSysClockFreq+0x28>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000f66:	0c8a      	lsrs	r2, r1, #18
 8000f68:	230f      	movs	r3, #15
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	4a19      	ldr	r2, [pc, #100]	; (8000fd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000f6e:	5cd0      	ldrb	r0, [r2, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000f70:	0d89      	lsrs	r1, r1, #22
 8000f72:	2203      	movs	r2, #3
 8000f74:	4011      	ands	r1, r2
 8000f76:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	03db      	lsls	r3, r3, #15
 8000f7e:	d40d      	bmi.n	8000f9c <HAL_RCC_GetSysClockFreq+0x6c>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	06db      	lsls	r3, r3, #27
 8000f86:	d513      	bpl.n	8000fb0 <HAL_RCC_GetSysClockFreq+0x80>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8000f88:	0142      	lsls	r2, r0, #5
 8000f8a:	1a12      	subs	r2, r2, r0
 8000f8c:	0193      	lsls	r3, r2, #6
 8000f8e:	1a9b      	subs	r3, r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	181b      	adds	r3, r3, r0
 8000f94:	0218      	lsls	r0, r3, #8
 8000f96:	f7ff f8bf 	bl	8000118 <__udivsi3>
 8000f9a:	e7dd      	b.n	8000f58 <HAL_RCC_GetSysClockFreq+0x28>
        pllvco = (HSE_VALUE * pllm) / plld;
 8000f9c:	0142      	lsls	r2, r0, #5
 8000f9e:	1a12      	subs	r2, r2, r0
 8000fa0:	0193      	lsls	r3, r2, #6
 8000fa2:	1a9b      	subs	r3, r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	181b      	adds	r3, r3, r0
 8000fa8:	0258      	lsls	r0, r3, #9
 8000faa:	f7ff f8b5 	bl	8000118 <__udivsi3>
 8000fae:	e7d3      	b.n	8000f58 <HAL_RCC_GetSysClockFreq+0x28>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000fb0:	0142      	lsls	r2, r0, #5
 8000fb2:	1a12      	subs	r2, r2, r0
 8000fb4:	0193      	lsls	r3, r2, #6
 8000fb6:	1a9b      	subs	r3, r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	181b      	adds	r3, r3, r0
 8000fbc:	0298      	lsls	r0, r3, #10
 8000fbe:	f7ff f8ab 	bl	8000118 <__udivsi3>
 8000fc2:	e7c9      	b.n	8000f58 <HAL_RCC_GetSysClockFreq+0x28>
      sysclockfreq = HSE_VALUE;
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8000fc6:	e7c7      	b.n	8000f58 <HAL_RCC_GetSysClockFreq+0x28>
        sysclockfreq =  HSI_VALUE;
 8000fc8:	4804      	ldr	r0, [pc, #16]	; (8000fdc <HAL_RCC_GetSysClockFreq+0xac>)
  return sysclockfreq;
 8000fca:	e7c5      	b.n	8000f58 <HAL_RCC_GetSysClockFreq+0x28>
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	003d0900 	.word	0x003d0900
 8000fd4:	080034a8 	.word	0x080034a8
 8000fd8:	007a1200 	.word	0x007a1200
 8000fdc:	00f42400 	.word	0x00f42400

08000fe0 <HAL_RCC_OscConfig>:
{
 8000fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	1e04      	subs	r4, r0, #0
  if(RCC_OscInitStruct == NULL)
 8000fe6:	d100      	bne.n	8000fea <HAL_RCC_OscConfig+0xa>
 8000fe8:	e29f      	b.n	800152a <HAL_RCC_OscConfig+0x54a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fea:	4bc4      	ldr	r3, [pc, #784]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 8000fec:	68da      	ldr	r2, [r3, #12]
 8000fee:	250c      	movs	r5, #12
 8000ff0:	4015      	ands	r5, r2
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	2680      	movs	r6, #128	; 0x80
 8000ff6:	0276      	lsls	r6, r6, #9
 8000ff8:	4016      	ands	r6, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffa:	6803      	ldr	r3, [r0, #0]
 8000ffc:	07db      	lsls	r3, r3, #31
 8000ffe:	d536      	bpl.n	800106e <HAL_RCC_OscConfig+0x8e>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001000:	2d08      	cmp	r5, #8
 8001002:	d02c      	beq.n	800105e <HAL_RCC_OscConfig+0x7e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001004:	2d0c      	cmp	r5, #12
 8001006:	d028      	beq.n	800105a <HAL_RCC_OscConfig+0x7a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001008:	6863      	ldr	r3, [r4, #4]
 800100a:	2280      	movs	r2, #128	; 0x80
 800100c:	0252      	lsls	r2, r2, #9
 800100e:	4293      	cmp	r3, r2
 8001010:	d055      	beq.n	80010be <HAL_RCC_OscConfig+0xde>
 8001012:	22a0      	movs	r2, #160	; 0xa0
 8001014:	02d2      	lsls	r2, r2, #11
 8001016:	4293      	cmp	r3, r2
 8001018:	d058      	beq.n	80010cc <HAL_RCC_OscConfig+0xec>
 800101a:	4bb8      	ldr	r3, [pc, #736]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	49b8      	ldr	r1, [pc, #736]	; (8001300 <HAL_RCC_OscConfig+0x320>)
 8001020:	400a      	ands	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	2180      	movs	r1, #128	; 0x80
 8001028:	0249      	lsls	r1, r1, #9
 800102a:	400a      	ands	r2, r1
 800102c:	9201      	str	r2, [sp, #4]
 800102e:	9a01      	ldr	r2, [sp, #4]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	49b4      	ldr	r1, [pc, #720]	; (8001304 <HAL_RCC_OscConfig+0x324>)
 8001034:	400a      	ands	r2, r1
 8001036:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001038:	6863      	ldr	r3, [r4, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d052      	beq.n	80010e4 <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 800103e:	f7ff fa37 	bl	80004b0 <HAL_GetTick>
 8001042:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001044:	4bad      	ldr	r3, [pc, #692]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	039b      	lsls	r3, r3, #14
 800104a:	d410      	bmi.n	800106e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800104c:	f7ff fa30 	bl	80004b0 <HAL_GetTick>
 8001050:	1bc0      	subs	r0, r0, r7
 8001052:	2864      	cmp	r0, #100	; 0x64
 8001054:	d9f6      	bls.n	8001044 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
 8001056:	2003      	movs	r0, #3
 8001058:	e268      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800105a:	2e00      	cmp	r6, #0
 800105c:	d0d4      	beq.n	8001008 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105e:	4ba7      	ldr	r3, [pc, #668]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	039b      	lsls	r3, r3, #14
 8001064:	d503      	bpl.n	800106e <HAL_RCC_OscConfig+0x8e>
 8001066:	6863      	ldr	r3, [r4, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d100      	bne.n	800106e <HAL_RCC_OscConfig+0x8e>
 800106c:	e260      	b.n	8001530 <HAL_RCC_OscConfig+0x550>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106e:	6823      	ldr	r3, [r4, #0]
 8001070:	079b      	lsls	r3, r3, #30
 8001072:	d56c      	bpl.n	800114e <HAL_RCC_OscConfig+0x16e>
    hsi_state = RCC_OscInitStruct->HSIState;
 8001074:	68e3      	ldr	r3, [r4, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001076:	069a      	lsls	r2, r3, #26
 8001078:	d505      	bpl.n	8001086 <HAL_RCC_OscConfig+0xa6>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800107a:	48a0      	ldr	r0, [pc, #640]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 800107c:	6802      	ldr	r2, [r0, #0]
 800107e:	2120      	movs	r1, #32
 8001080:	430a      	orrs	r2, r1
 8001082:	6002      	str	r2, [r0, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001084:	438b      	bics	r3, r1
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001086:	2d04      	cmp	r5, #4
 8001088:	d03c      	beq.n	8001104 <HAL_RCC_OscConfig+0x124>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800108a:	2d0c      	cmp	r5, #12
 800108c:	d038      	beq.n	8001100 <HAL_RCC_OscConfig+0x120>
      if(hsi_state != RCC_HSI_OFF)
 800108e:	2b00      	cmp	r3, #0
 8001090:	d100      	bne.n	8001094 <HAL_RCC_OscConfig+0xb4>
 8001092:	e0ae      	b.n	80011f2 <HAL_RCC_OscConfig+0x212>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001094:	4999      	ldr	r1, [pc, #612]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 8001096:	680a      	ldr	r2, [r1, #0]
 8001098:	2009      	movs	r0, #9
 800109a:	4382      	bics	r2, r0
 800109c:	4313      	orrs	r3, r2
 800109e:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80010a0:	f7ff fa06 	bl	80004b0 <HAL_GetTick>
 80010a4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010a6:	4b95      	ldr	r3, [pc, #596]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	075b      	lsls	r3, r3, #29
 80010ac:	d500      	bpl.n	80010b0 <HAL_RCC_OscConfig+0xd0>
 80010ae:	e097      	b.n	80011e0 <HAL_RCC_OscConfig+0x200>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010b0:	f7ff f9fe 	bl	80004b0 <HAL_GetTick>
 80010b4:	1b80      	subs	r0, r0, r6
 80010b6:	2802      	cmp	r0, #2
 80010b8:	d9f5      	bls.n	80010a6 <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 80010ba:	2003      	movs	r0, #3
 80010bc:	e236      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010be:	4a8f      	ldr	r2, [pc, #572]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 80010c0:	6811      	ldr	r1, [r2, #0]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	025b      	lsls	r3, r3, #9
 80010c6:	430b      	orrs	r3, r1
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e7b5      	b.n	8001038 <HAL_RCC_OscConfig+0x58>
 80010cc:	4b8b      	ldr	r3, [pc, #556]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 80010ce:	6819      	ldr	r1, [r3, #0]
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	02d2      	lsls	r2, r2, #11
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	6819      	ldr	r1, [r3, #0]
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	430a      	orrs	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	e7a9      	b.n	8001038 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 80010e4:	f7ff f9e4 	bl	80004b0 <HAL_GetTick>
 80010e8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010ea:	4b84      	ldr	r3, [pc, #528]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	039b      	lsls	r3, r3, #14
 80010f0:	d5bd      	bpl.n	800106e <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f2:	f7ff f9dd 	bl	80004b0 <HAL_GetTick>
 80010f6:	1bc0      	subs	r0, r0, r7
 80010f8:	2864      	cmp	r0, #100	; 0x64
 80010fa:	d9f6      	bls.n	80010ea <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 80010fc:	2003      	movs	r0, #3
 80010fe:	e215      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001100:	2e00      	cmp	r6, #0
 8001102:	d1c4      	bne.n	800108e <HAL_RCC_OscConfig+0xae>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001104:	4a7d      	ldr	r2, [pc, #500]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 8001106:	6812      	ldr	r2, [r2, #0]
 8001108:	0752      	lsls	r2, r2, #29
 800110a:	d502      	bpl.n	8001112 <HAL_RCC_OscConfig+0x132>
 800110c:	2b00      	cmp	r3, #0
 800110e:	d100      	bne.n	8001112 <HAL_RCC_OscConfig+0x132>
 8001110:	e210      	b.n	8001534 <HAL_RCC_OscConfig+0x554>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001112:	4e7a      	ldr	r6, [pc, #488]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 8001114:	6872      	ldr	r2, [r6, #4]
 8001116:	497c      	ldr	r1, [pc, #496]	; (8001308 <HAL_RCC_OscConfig+0x328>)
 8001118:	400a      	ands	r2, r1
 800111a:	6921      	ldr	r1, [r4, #16]
 800111c:	0209      	lsls	r1, r1, #8
 800111e:	430a      	orrs	r2, r1
 8001120:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001122:	6832      	ldr	r2, [r6, #0]
 8001124:	2109      	movs	r1, #9
 8001126:	438a      	bics	r2, r1
 8001128:	4313      	orrs	r3, r2
 800112a:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800112c:	f7ff ff00 	bl	8000f30 <HAL_RCC_GetSysClockFreq>
 8001130:	68f2      	ldr	r2, [r6, #12]
 8001132:	0912      	lsrs	r2, r2, #4
 8001134:	230f      	movs	r3, #15
 8001136:	4013      	ands	r3, r2
 8001138:	4a74      	ldr	r2, [pc, #464]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 800113a:	5cd3      	ldrb	r3, [r2, r3]
 800113c:	40d8      	lsrs	r0, r3
 800113e:	4b74      	ldr	r3, [pc, #464]	; (8001310 <HAL_RCC_OscConfig+0x330>)
 8001140:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff f980 	bl	8000448 <HAL_InitTick>
      if(status != HAL_OK)
 8001148:	2800      	cmp	r0, #0
 800114a:	d000      	beq.n	800114e <HAL_RCC_OscConfig+0x16e>
 800114c:	e1ee      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800114e:	6823      	ldr	r3, [r4, #0]
 8001150:	06db      	lsls	r3, r3, #27
 8001152:	d52c      	bpl.n	80011ae <HAL_RCC_OscConfig+0x1ce>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001154:	2d00      	cmp	r5, #0
 8001156:	d15f      	bne.n	8001218 <HAL_RCC_OscConfig+0x238>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001158:	4b68      	ldr	r3, [pc, #416]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	059b      	lsls	r3, r3, #22
 800115e:	d503      	bpl.n	8001168 <HAL_RCC_OscConfig+0x188>
 8001160:	69e3      	ldr	r3, [r4, #28]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d100      	bne.n	8001168 <HAL_RCC_OscConfig+0x188>
 8001166:	e1e7      	b.n	8001538 <HAL_RCC_OscConfig+0x558>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001168:	4a64      	ldr	r2, [pc, #400]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 800116a:	6853      	ldr	r3, [r2, #4]
 800116c:	4969      	ldr	r1, [pc, #420]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800116e:	400b      	ands	r3, r1
 8001170:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001172:	430b      	orrs	r3, r1
 8001174:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001176:	6853      	ldr	r3, [r2, #4]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	0a1b      	lsrs	r3, r3, #8
 800117c:	6a21      	ldr	r1, [r4, #32]
 800117e:	0609      	lsls	r1, r1, #24
 8001180:	430b      	orrs	r3, r1
 8001182:	6053      	str	r3, [r2, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001184:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001186:	0b59      	lsrs	r1, r3, #13
 8001188:	3101      	adds	r1, #1
 800118a:	2380      	movs	r3, #128	; 0x80
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001190:	68d1      	ldr	r1, [r2, #12]
 8001192:	0909      	lsrs	r1, r1, #4
 8001194:	220f      	movs	r2, #15
 8001196:	400a      	ands	r2, r1
 8001198:	495c      	ldr	r1, [pc, #368]	; (800130c <HAL_RCC_OscConfig+0x32c>)
 800119a:	5c8a      	ldrb	r2, [r1, r2]
 800119c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800119e:	4a5c      	ldr	r2, [pc, #368]	; (8001310 <HAL_RCC_OscConfig+0x330>)
 80011a0:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff f950 	bl	8000448 <HAL_InitTick>
        if(status != HAL_OK)
 80011a8:	2800      	cmp	r0, #0
 80011aa:	d000      	beq.n	80011ae <HAL_RCC_OscConfig+0x1ce>
 80011ac:	e1be      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	071b      	lsls	r3, r3, #28
 80011b2:	d57d      	bpl.n	80012b0 <HAL_RCC_OscConfig+0x2d0>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011b4:	6963      	ldr	r3, [r4, #20]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d067      	beq.n	800128a <HAL_RCC_OscConfig+0x2aa>
      __HAL_RCC_LSI_ENABLE();
 80011ba:	4a50      	ldr	r2, [pc, #320]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 80011bc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80011be:	2101      	movs	r1, #1
 80011c0:	430b      	orrs	r3, r1
 80011c2:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 80011c4:	f7ff f974 	bl	80004b0 <HAL_GetTick>
 80011c8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011ca:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 80011cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011ce:	079b      	lsls	r3, r3, #30
 80011d0:	d46e      	bmi.n	80012b0 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d2:	f7ff f96d 	bl	80004b0 <HAL_GetTick>
 80011d6:	1b80      	subs	r0, r0, r6
 80011d8:	2802      	cmp	r0, #2
 80011da:	d9f6      	bls.n	80011ca <HAL_RCC_OscConfig+0x1ea>
          return HAL_TIMEOUT;
 80011dc:	2003      	movs	r0, #3
 80011de:	e1a5      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e0:	4946      	ldr	r1, [pc, #280]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 80011e2:	684b      	ldr	r3, [r1, #4]
 80011e4:	4a48      	ldr	r2, [pc, #288]	; (8001308 <HAL_RCC_OscConfig+0x328>)
 80011e6:	4013      	ands	r3, r2
 80011e8:	6922      	ldr	r2, [r4, #16]
 80011ea:	0212      	lsls	r2, r2, #8
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
 80011f0:	e7ad      	b.n	800114e <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 80011f2:	4a42      	ldr	r2, [pc, #264]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 80011f4:	6813      	ldr	r3, [r2, #0]
 80011f6:	2101      	movs	r1, #1
 80011f8:	438b      	bics	r3, r1
 80011fa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80011fc:	f7ff f958 	bl	80004b0 <HAL_GetTick>
 8001200:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001202:	4b3e      	ldr	r3, [pc, #248]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	075b      	lsls	r3, r3, #29
 8001208:	d5a1      	bpl.n	800114e <HAL_RCC_OscConfig+0x16e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800120a:	f7ff f951 	bl	80004b0 <HAL_GetTick>
 800120e:	1b80      	subs	r0, r0, r6
 8001210:	2802      	cmp	r0, #2
 8001212:	d9f6      	bls.n	8001202 <HAL_RCC_OscConfig+0x222>
            return HAL_TIMEOUT;
 8001214:	2003      	movs	r0, #3
 8001216:	e189      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001218:	69e3      	ldr	r3, [r4, #28]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d022      	beq.n	8001264 <HAL_RCC_OscConfig+0x284>
        __HAL_RCC_MSI_ENABLE();
 800121e:	4a37      	ldr	r2, [pc, #220]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 8001220:	6811      	ldr	r1, [r2, #0]
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	430b      	orrs	r3, r1
 8001228:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800122a:	f7ff f941 	bl	80004b0 <HAL_GetTick>
 800122e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001230:	4b32      	ldr	r3, [pc, #200]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	059b      	lsls	r3, r3, #22
 8001236:	d406      	bmi.n	8001246 <HAL_RCC_OscConfig+0x266>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001238:	f7ff f93a 	bl	80004b0 <HAL_GetTick>
 800123c:	1b80      	subs	r0, r0, r6
 800123e:	2802      	cmp	r0, #2
 8001240:	d9f6      	bls.n	8001230 <HAL_RCC_OscConfig+0x250>
            return HAL_TIMEOUT;
 8001242:	2003      	movs	r0, #3
 8001244:	e172      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001246:	4a2d      	ldr	r2, [pc, #180]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 8001248:	6853      	ldr	r3, [r2, #4]
 800124a:	4932      	ldr	r1, [pc, #200]	; (8001314 <HAL_RCC_OscConfig+0x334>)
 800124c:	400b      	ands	r3, r1
 800124e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001250:	430b      	orrs	r3, r1
 8001252:	6053      	str	r3, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001254:	6853      	ldr	r3, [r2, #4]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	6a21      	ldr	r1, [r4, #32]
 800125c:	0609      	lsls	r1, r1, #24
 800125e:	430b      	orrs	r3, r1
 8001260:	6053      	str	r3, [r2, #4]
 8001262:	e7a4      	b.n	80011ae <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_MSI_DISABLE();
 8001264:	4a25      	ldr	r2, [pc, #148]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 8001266:	6813      	ldr	r3, [r2, #0]
 8001268:	492b      	ldr	r1, [pc, #172]	; (8001318 <HAL_RCC_OscConfig+0x338>)
 800126a:	400b      	ands	r3, r1
 800126c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800126e:	f7ff f91f 	bl	80004b0 <HAL_GetTick>
 8001272:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001274:	4b21      	ldr	r3, [pc, #132]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	059b      	lsls	r3, r3, #22
 800127a:	d598      	bpl.n	80011ae <HAL_RCC_OscConfig+0x1ce>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800127c:	f7ff f918 	bl	80004b0 <HAL_GetTick>
 8001280:	1b80      	subs	r0, r0, r6
 8001282:	2802      	cmp	r0, #2
 8001284:	d9f6      	bls.n	8001274 <HAL_RCC_OscConfig+0x294>
            return HAL_TIMEOUT;
 8001286:	2003      	movs	r0, #3
 8001288:	e150      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_LSI_DISABLE();
 800128a:	4a1c      	ldr	r2, [pc, #112]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 800128c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800128e:	2101      	movs	r1, #1
 8001290:	438b      	bics	r3, r1
 8001292:	6513      	str	r3, [r2, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001294:	f7ff f90c 	bl	80004b0 <HAL_GetTick>
 8001298:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 800129c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800129e:	079b      	lsls	r3, r3, #30
 80012a0:	d506      	bpl.n	80012b0 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012a2:	f7ff f905 	bl	80004b0 <HAL_GetTick>
 80012a6:	1b80      	subs	r0, r0, r6
 80012a8:	2802      	cmp	r0, #2
 80012aa:	d9f6      	bls.n	800129a <HAL_RCC_OscConfig+0x2ba>
          return HAL_TIMEOUT;
 80012ac:	2003      	movs	r0, #3
 80012ae:	e13d      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	075b      	lsls	r3, r3, #29
 80012b4:	d400      	bmi.n	80012b8 <HAL_RCC_OscConfig+0x2d8>
 80012b6:	e08c      	b.n	80013d2 <HAL_RCC_OscConfig+0x3f2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012b8:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 80012ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	d41b      	bmi.n	80012f8 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c0:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 80012c2:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	055b      	lsls	r3, r3, #21
 80012c8:	430b      	orrs	r3, r1
 80012ca:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 80012cc:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <HAL_RCC_OscConfig+0x33c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	05db      	lsls	r3, r3, #23
 80012d4:	d526      	bpl.n	8001324 <HAL_RCC_OscConfig+0x344>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d6:	68a3      	ldr	r3, [r4, #8]
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	0052      	lsls	r2, r2, #1
 80012dc:	4293      	cmp	r3, r2
 80012de:	d035      	beq.n	800134c <HAL_RCC_OscConfig+0x36c>
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d14b      	bne.n	800137c <HAL_RCC_OscConfig+0x39c>
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_RCC_OscConfig+0x31c>)
 80012e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012e8:	490b      	ldr	r1, [pc, #44]	; (8001318 <HAL_RCC_OscConfig+0x338>)
 80012ea:	400a      	ands	r2, r1
 80012ec:	651a      	str	r2, [r3, #80]	; 0x50
 80012ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012f0:	490b      	ldr	r1, [pc, #44]	; (8001320 <HAL_RCC_OscConfig+0x340>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	651a      	str	r2, [r3, #80]	; 0x50
 80012f6:	e02f      	b.n	8001358 <HAL_RCC_OscConfig+0x378>
    FlagStatus       pwrclkchanged = RESET;
 80012f8:	2600      	movs	r6, #0
 80012fa:	e7e8      	b.n	80012ce <HAL_RCC_OscConfig+0x2ee>
 80012fc:	40021000 	.word	0x40021000
 8001300:	fffeffff 	.word	0xfffeffff
 8001304:	fffbffff 	.word	0xfffbffff
 8001308:	ffffe0ff 	.word	0xffffe0ff
 800130c:	080034b4 	.word	0x080034b4
 8001310:	20000004 	.word	0x20000004
 8001314:	ffff1fff 	.word	0xffff1fff
 8001318:	fffffeff 	.word	0xfffffeff
 800131c:	40007000 	.word	0x40007000
 8001320:	fffffbff 	.word	0xfffffbff
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001324:	4a88      	ldr	r2, [pc, #544]	; (8001548 <HAL_RCC_OscConfig+0x568>)
 8001326:	6811      	ldr	r1, [r2, #0]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	430b      	orrs	r3, r1
 800132e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001330:	f7ff f8be 	bl	80004b0 <HAL_GetTick>
 8001334:	0007      	movs	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001336:	4b84      	ldr	r3, [pc, #528]	; (8001548 <HAL_RCC_OscConfig+0x568>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	05db      	lsls	r3, r3, #23
 800133c:	d4cb      	bmi.n	80012d6 <HAL_RCC_OscConfig+0x2f6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133e:	f7ff f8b7 	bl	80004b0 <HAL_GetTick>
 8001342:	1bc0      	subs	r0, r0, r7
 8001344:	2864      	cmp	r0, #100	; 0x64
 8001346:	d9f6      	bls.n	8001336 <HAL_RCC_OscConfig+0x356>
          return HAL_TIMEOUT;
 8001348:	2003      	movs	r0, #3
 800134a:	e0ef      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134c:	4a7f      	ldr	r2, [pc, #508]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 800134e:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	430b      	orrs	r3, r1
 8001356:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001358:	68a3      	ldr	r3, [r4, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d028      	beq.n	80013b0 <HAL_RCC_OscConfig+0x3d0>
      tickstart = HAL_GetTick();
 800135e:	f7ff f8a7 	bl	80004b0 <HAL_GetTick>
 8001362:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001364:	4b79      	ldr	r3, [pc, #484]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 8001366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001368:	059b      	lsls	r3, r3, #22
 800136a:	d430      	bmi.n	80013ce <HAL_RCC_OscConfig+0x3ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136c:	f7ff f8a0 	bl	80004b0 <HAL_GetTick>
 8001370:	1bc0      	subs	r0, r0, r7
 8001372:	4b77      	ldr	r3, [pc, #476]	; (8001550 <HAL_RCC_OscConfig+0x570>)
 8001374:	4298      	cmp	r0, r3
 8001376:	d9f5      	bls.n	8001364 <HAL_RCC_OscConfig+0x384>
          return HAL_TIMEOUT;
 8001378:	2003      	movs	r0, #3
 800137a:	e0d7      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137c:	22a0      	movs	r2, #160	; 0xa0
 800137e:	00d2      	lsls	r2, r2, #3
 8001380:	4293      	cmp	r3, r2
 8001382:	d009      	beq.n	8001398 <HAL_RCC_OscConfig+0x3b8>
 8001384:	4b71      	ldr	r3, [pc, #452]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 8001386:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001388:	4972      	ldr	r1, [pc, #456]	; (8001554 <HAL_RCC_OscConfig+0x574>)
 800138a:	400a      	ands	r2, r1
 800138c:	651a      	str	r2, [r3, #80]	; 0x50
 800138e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001390:	4971      	ldr	r1, [pc, #452]	; (8001558 <HAL_RCC_OscConfig+0x578>)
 8001392:	400a      	ands	r2, r1
 8001394:	651a      	str	r2, [r3, #80]	; 0x50
 8001396:	e7df      	b.n	8001358 <HAL_RCC_OscConfig+0x378>
 8001398:	4b6c      	ldr	r3, [pc, #432]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 800139a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800139c:	3a01      	subs	r2, #1
 800139e:	3aff      	subs	r2, #255	; 0xff
 80013a0:	430a      	orrs	r2, r1
 80013a2:	651a      	str	r2, [r3, #80]	; 0x50
 80013a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80013a6:	2280      	movs	r2, #128	; 0x80
 80013a8:	0052      	lsls	r2, r2, #1
 80013aa:	430a      	orrs	r2, r1
 80013ac:	651a      	str	r2, [r3, #80]	; 0x50
 80013ae:	e7d3      	b.n	8001358 <HAL_RCC_OscConfig+0x378>
      tickstart = HAL_GetTick();
 80013b0:	f7ff f87e 	bl	80004b0 <HAL_GetTick>
 80013b4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013b6:	4b65      	ldr	r3, [pc, #404]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 80013b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013ba:	059b      	lsls	r3, r3, #22
 80013bc:	d507      	bpl.n	80013ce <HAL_RCC_OscConfig+0x3ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff f877 	bl	80004b0 <HAL_GetTick>
 80013c2:	1bc0      	subs	r0, r0, r7
 80013c4:	4b62      	ldr	r3, [pc, #392]	; (8001550 <HAL_RCC_OscConfig+0x570>)
 80013c6:	4298      	cmp	r0, r3
 80013c8:	d9f5      	bls.n	80013b6 <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 80013ca:	2003      	movs	r0, #3
 80013cc:	e0ae      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
    if(pwrclkchanged == SET)
 80013ce:	2e01      	cmp	r6, #1
 80013d0:	d021      	beq.n	8001416 <HAL_RCC_OscConfig+0x436>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013d2:	6823      	ldr	r3, [r4, #0]
 80013d4:	069b      	lsls	r3, r3, #26
 80013d6:	d53c      	bpl.n	8001452 <HAL_RCC_OscConfig+0x472>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80013d8:	69a3      	ldr	r3, [r4, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d021      	beq.n	8001422 <HAL_RCC_OscConfig+0x442>
        __HAL_RCC_HSI48_ENABLE();
 80013de:	4b5b      	ldr	r3, [pc, #364]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 80013e0:	6899      	ldr	r1, [r3, #8]
 80013e2:	2001      	movs	r0, #1
 80013e4:	4301      	orrs	r1, r0
 80013e6:	6099      	str	r1, [r3, #8]
 80013e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013ea:	4302      	orrs	r2, r0
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34
 80013ee:	4a5b      	ldr	r2, [pc, #364]	; (800155c <HAL_RCC_OscConfig+0x57c>)
 80013f0:	6a11      	ldr	r1, [r2, #32]
 80013f2:	2380      	movs	r3, #128	; 0x80
 80013f4:	019b      	lsls	r3, r3, #6
 80013f6:	430b      	orrs	r3, r1
 80013f8:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80013fa:	f7ff f859 	bl	80004b0 <HAL_GetTick>
 80013fe:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001400:	4b52      	ldr	r3, [pc, #328]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	079b      	lsls	r3, r3, #30
 8001406:	d424      	bmi.n	8001452 <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001408:	f7ff f852 	bl	80004b0 <HAL_GetTick>
 800140c:	1b80      	subs	r0, r0, r6
 800140e:	2802      	cmp	r0, #2
 8001410:	d9f6      	bls.n	8001400 <HAL_RCC_OscConfig+0x420>
            return HAL_TIMEOUT;
 8001412:	2003      	movs	r0, #3
 8001414:	e08a      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001416:	4a4d      	ldr	r2, [pc, #308]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 8001418:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800141a:	4951      	ldr	r1, [pc, #324]	; (8001560 <HAL_RCC_OscConfig+0x580>)
 800141c:	400b      	ands	r3, r1
 800141e:	6393      	str	r3, [r2, #56]	; 0x38
 8001420:	e7d7      	b.n	80013d2 <HAL_RCC_OscConfig+0x3f2>
        __HAL_RCC_HSI48_DISABLE();
 8001422:	4a4a      	ldr	r2, [pc, #296]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 8001424:	6893      	ldr	r3, [r2, #8]
 8001426:	2101      	movs	r1, #1
 8001428:	438b      	bics	r3, r1
 800142a:	6093      	str	r3, [r2, #8]
 800142c:	4a4b      	ldr	r2, [pc, #300]	; (800155c <HAL_RCC_OscConfig+0x57c>)
 800142e:	6a13      	ldr	r3, [r2, #32]
 8001430:	494c      	ldr	r1, [pc, #304]	; (8001564 <HAL_RCC_OscConfig+0x584>)
 8001432:	400b      	ands	r3, r1
 8001434:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001436:	f7ff f83b 	bl	80004b0 <HAL_GetTick>
 800143a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800143c:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	079b      	lsls	r3, r3, #30
 8001442:	d506      	bpl.n	8001452 <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001444:	f7ff f834 	bl	80004b0 <HAL_GetTick>
 8001448:	1b80      	subs	r0, r0, r6
 800144a:	2802      	cmp	r0, #2
 800144c:	d9f6      	bls.n	800143c <HAL_RCC_OscConfig+0x45c>
            return HAL_TIMEOUT;
 800144e:	2003      	movs	r0, #3
 8001450:	e06c      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001452:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001454:	2b00      	cmp	r3, #0
 8001456:	d100      	bne.n	800145a <HAL_RCC_OscConfig+0x47a>
 8001458:	e070      	b.n	800153c <HAL_RCC_OscConfig+0x55c>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800145a:	2d0c      	cmp	r5, #12
 800145c:	d049      	beq.n	80014f2 <HAL_RCC_OscConfig+0x512>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800145e:	2b02      	cmp	r3, #2
 8001460:	d012      	beq.n	8001488 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_DISABLE();
 8001462:	4a3a      	ldr	r2, [pc, #232]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 8001464:	6813      	ldr	r3, [r2, #0]
 8001466:	4940      	ldr	r1, [pc, #256]	; (8001568 <HAL_RCC_OscConfig+0x588>)
 8001468:	400b      	ands	r3, r1
 800146a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800146c:	f7ff f820 	bl	80004b0 <HAL_GetTick>
 8001470:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001472:	4b36      	ldr	r3, [pc, #216]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	019b      	lsls	r3, r3, #6
 8001478:	d539      	bpl.n	80014ee <HAL_RCC_OscConfig+0x50e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147a:	f7ff f819 	bl	80004b0 <HAL_GetTick>
 800147e:	1b00      	subs	r0, r0, r4
 8001480:	2802      	cmp	r0, #2
 8001482:	d9f6      	bls.n	8001472 <HAL_RCC_OscConfig+0x492>
            return HAL_TIMEOUT;
 8001484:	2003      	movs	r0, #3
 8001486:	e051      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_DISABLE();
 8001488:	4a30      	ldr	r2, [pc, #192]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 800148a:	6813      	ldr	r3, [r2, #0]
 800148c:	4936      	ldr	r1, [pc, #216]	; (8001568 <HAL_RCC_OscConfig+0x588>)
 800148e:	400b      	ands	r3, r1
 8001490:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001492:	f7ff f80d 	bl	80004b0 <HAL_GetTick>
 8001496:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001498:	4b2c      	ldr	r3, [pc, #176]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	019b      	lsls	r3, r3, #6
 800149e:	d506      	bpl.n	80014ae <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a0:	f7ff f806 	bl	80004b0 <HAL_GetTick>
 80014a4:	1b40      	subs	r0, r0, r5
 80014a6:	2802      	cmp	r0, #2
 80014a8:	d9f6      	bls.n	8001498 <HAL_RCC_OscConfig+0x4b8>
            return HAL_TIMEOUT;
 80014aa:	2003      	movs	r0, #3
 80014ac:	e03e      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ae:	4927      	ldr	r1, [pc, #156]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 80014b0:	68cb      	ldr	r3, [r1, #12]
 80014b2:	4a2e      	ldr	r2, [pc, #184]	; (800156c <HAL_RCC_OscConfig+0x58c>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80014ba:	4302      	orrs	r2, r0
 80014bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80014be:	4302      	orrs	r2, r0
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60cb      	str	r3, [r1, #12]
        __HAL_RCC_PLL_ENABLE();
 80014c4:	680a      	ldr	r2, [r1, #0]
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	045b      	lsls	r3, r3, #17
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 80014ce:	f7fe ffef 	bl	80004b0 <HAL_GetTick>
 80014d2:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80014d4:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	019b      	lsls	r3, r3, #6
 80014da:	d406      	bmi.n	80014ea <HAL_RCC_OscConfig+0x50a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014dc:	f7fe ffe8 	bl	80004b0 <HAL_GetTick>
 80014e0:	1b00      	subs	r0, r0, r4
 80014e2:	2802      	cmp	r0, #2
 80014e4:	d9f6      	bls.n	80014d4 <HAL_RCC_OscConfig+0x4f4>
            return HAL_TIMEOUT;
 80014e6:	2003      	movs	r0, #3
 80014e8:	e020      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 80014ea:	2000      	movs	r0, #0
 80014ec:	e01e      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
 80014ee:	2000      	movs	r0, #0
 80014f0:	e01c      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d024      	beq.n	8001540 <HAL_RCC_OscConfig+0x560>
        pll_config = RCC->CFGR;
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_RCC_OscConfig+0x56c>)
 80014f8:	68da      	ldr	r2, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	025b      	lsls	r3, r3, #9
 80014fe:	4013      	ands	r3, r2
 8001500:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001502:	428b      	cmp	r3, r1
 8001504:	d001      	beq.n	800150a <HAL_RCC_OscConfig+0x52a>
          return HAL_ERROR;
 8001506:	2001      	movs	r0, #1
 8001508:	e010      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800150a:	23f0      	movs	r3, #240	; 0xf0
 800150c:	039b      	lsls	r3, r3, #14
 800150e:	4013      	ands	r3, r2
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001510:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001512:	428b      	cmp	r3, r1
 8001514:	d001      	beq.n	800151a <HAL_RCC_OscConfig+0x53a>
          return HAL_ERROR;
 8001516:	2001      	movs	r0, #1
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800151a:	23c0      	movs	r3, #192	; 0xc0
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	401a      	ands	r2, r3
 8001520:	6b63      	ldr	r3, [r4, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001522:	429a      	cmp	r2, r3
 8001524:	d00e      	beq.n	8001544 <HAL_RCC_OscConfig+0x564>
          return HAL_ERROR;
 8001526:	2001      	movs	r0, #1
 8001528:	e000      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
    return HAL_ERROR;
 800152a:	2001      	movs	r0, #1
}
 800152c:	b003      	add	sp, #12
 800152e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8001530:	2001      	movs	r0, #1
 8001532:	e7fb      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8001534:	2001      	movs	r0, #1
 8001536:	e7f9      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8001538:	2001      	movs	r0, #1
 800153a:	e7f7      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 800153c:	2000      	movs	r0, #0
 800153e:	e7f5      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
        return HAL_ERROR;
 8001540:	2001      	movs	r0, #1
 8001542:	e7f3      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 8001544:	2000      	movs	r0, #0
 8001546:	e7f1      	b.n	800152c <HAL_RCC_OscConfig+0x54c>
 8001548:	40007000 	.word	0x40007000
 800154c:	40021000 	.word	0x40021000
 8001550:	00001388 	.word	0x00001388
 8001554:	fffffeff 	.word	0xfffffeff
 8001558:	fffffbff 	.word	0xfffffbff
 800155c:	40010000 	.word	0x40010000
 8001560:	efffffff 	.word	0xefffffff
 8001564:	ffffdfff 	.word	0xffffdfff
 8001568:	feffffff 	.word	0xfeffffff
 800156c:	ff02ffff 	.word	0xff02ffff

08001570 <HAL_RCC_ClockConfig>:
{
 8001570:	b570      	push	{r4, r5, r6, lr}
 8001572:	0004      	movs	r4, r0
 8001574:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001576:	2800      	cmp	r0, #0
 8001578:	d100      	bne.n	800157c <HAL_RCC_ClockConfig+0xc>
 800157a:	e0ba      	b.n	80016f2 <HAL_RCC_ClockConfig+0x182>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800157c:	4b5f      	ldr	r3, [pc, #380]	; (80016fc <HAL_RCC_ClockConfig+0x18c>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	2301      	movs	r3, #1
 8001582:	4013      	ands	r3, r2
 8001584:	428b      	cmp	r3, r1
 8001586:	d20b      	bcs.n	80015a0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001588:	495c      	ldr	r1, [pc, #368]	; (80016fc <HAL_RCC_ClockConfig+0x18c>)
 800158a:	680b      	ldr	r3, [r1, #0]
 800158c:	2201      	movs	r2, #1
 800158e:	4393      	bics	r3, r2
 8001590:	432b      	orrs	r3, r5
 8001592:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001594:	680b      	ldr	r3, [r1, #0]
 8001596:	401a      	ands	r2, r3
 8001598:	42aa      	cmp	r2, r5
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 800159c:	2001      	movs	r0, #1
 800159e:	e0a9      	b.n	80016f4 <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015a0:	6823      	ldr	r3, [r4, #0]
 80015a2:	079b      	lsls	r3, r3, #30
 80015a4:	d506      	bpl.n	80015b4 <HAL_RCC_ClockConfig+0x44>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015a6:	4a56      	ldr	r2, [pc, #344]	; (8001700 <HAL_RCC_ClockConfig+0x190>)
 80015a8:	68d3      	ldr	r3, [r2, #12]
 80015aa:	21f0      	movs	r1, #240	; 0xf0
 80015ac:	438b      	bics	r3, r1
 80015ae:	68a1      	ldr	r1, [r4, #8]
 80015b0:	430b      	orrs	r3, r1
 80015b2:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	07db      	lsls	r3, r3, #31
 80015b8:	d564      	bpl.n	8001684 <HAL_RCC_ClockConfig+0x114>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ba:	6863      	ldr	r3, [r4, #4]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d009      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x64>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d029      	beq.n	8001618 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d02d      	beq.n	8001624 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015c8:	4a4d      	ldr	r2, [pc, #308]	; (8001700 <HAL_RCC_ClockConfig+0x190>)
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	0592      	lsls	r2, r2, #22
 80015ce:	d406      	bmi.n	80015de <HAL_RCC_ClockConfig+0x6e>
        return HAL_ERROR;
 80015d0:	2001      	movs	r0, #1
 80015d2:	e08f      	b.n	80016f4 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015d4:	4a4a      	ldr	r2, [pc, #296]	; (8001700 <HAL_RCC_ClockConfig+0x190>)
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	0392      	lsls	r2, r2, #14
 80015da:	d400      	bmi.n	80015de <HAL_RCC_ClockConfig+0x6e>
 80015dc:	e08b      	b.n	80016f6 <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015de:	4948      	ldr	r1, [pc, #288]	; (8001700 <HAL_RCC_ClockConfig+0x190>)
 80015e0:	68ca      	ldr	r2, [r1, #12]
 80015e2:	2003      	movs	r0, #3
 80015e4:	4382      	bics	r2, r0
 80015e6:	4313      	orrs	r3, r2
 80015e8:	60cb      	str	r3, [r1, #12]
    tickstart = HAL_GetTick();
 80015ea:	f7fe ff61 	bl	80004b0 <HAL_GetTick>
 80015ee:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f0:	6863      	ldr	r3, [r4, #4]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d01c      	beq.n	8001630 <HAL_RCC_ClockConfig+0xc0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d028      	beq.n	800164c <HAL_RCC_ClockConfig+0xdc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d034      	beq.n	8001668 <HAL_RCC_ClockConfig+0xf8>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80015fe:	4b40      	ldr	r3, [pc, #256]	; (8001700 <HAL_RCC_ClockConfig+0x190>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	220c      	movs	r2, #12
 8001604:	421a      	tst	r2, r3
 8001606:	d03d      	beq.n	8001684 <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001608:	f7fe ff52 	bl	80004b0 <HAL_GetTick>
 800160c:	1b80      	subs	r0, r0, r6
 800160e:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <HAL_RCC_ClockConfig+0x194>)
 8001610:	4298      	cmp	r0, r3
 8001612:	d9f4      	bls.n	80015fe <HAL_RCC_ClockConfig+0x8e>
          return HAL_TIMEOUT;
 8001614:	2003      	movs	r0, #3
 8001616:	e06d      	b.n	80016f4 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001618:	4a39      	ldr	r2, [pc, #228]	; (8001700 <HAL_RCC_ClockConfig+0x190>)
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	0192      	lsls	r2, r2, #6
 800161e:	d4de      	bmi.n	80015de <HAL_RCC_ClockConfig+0x6e>
        return HAL_ERROR;
 8001620:	2001      	movs	r0, #1
 8001622:	e067      	b.n	80016f4 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001624:	4a36      	ldr	r2, [pc, #216]	; (8001700 <HAL_RCC_ClockConfig+0x190>)
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	0752      	lsls	r2, r2, #29
 800162a:	d4d8      	bmi.n	80015de <HAL_RCC_ClockConfig+0x6e>
        return HAL_ERROR;
 800162c:	2001      	movs	r0, #1
 800162e:	e061      	b.n	80016f4 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001630:	4b33      	ldr	r3, [pc, #204]	; (8001700 <HAL_RCC_ClockConfig+0x190>)
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	230c      	movs	r3, #12
 8001636:	4013      	ands	r3, r2
 8001638:	2b08      	cmp	r3, #8
 800163a:	d023      	beq.n	8001684 <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800163c:	f7fe ff38 	bl	80004b0 <HAL_GetTick>
 8001640:	1b80      	subs	r0, r0, r6
 8001642:	4b30      	ldr	r3, [pc, #192]	; (8001704 <HAL_RCC_ClockConfig+0x194>)
 8001644:	4298      	cmp	r0, r3
 8001646:	d9f3      	bls.n	8001630 <HAL_RCC_ClockConfig+0xc0>
          return HAL_TIMEOUT;
 8001648:	2003      	movs	r0, #3
 800164a:	e053      	b.n	80016f4 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800164c:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_RCC_ClockConfig+0x190>)
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	230c      	movs	r3, #12
 8001652:	4013      	ands	r3, r2
 8001654:	2b0c      	cmp	r3, #12
 8001656:	d015      	beq.n	8001684 <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001658:	f7fe ff2a 	bl	80004b0 <HAL_GetTick>
 800165c:	1b80      	subs	r0, r0, r6
 800165e:	4b29      	ldr	r3, [pc, #164]	; (8001704 <HAL_RCC_ClockConfig+0x194>)
 8001660:	4298      	cmp	r0, r3
 8001662:	d9f3      	bls.n	800164c <HAL_RCC_ClockConfig+0xdc>
          return HAL_TIMEOUT;
 8001664:	2003      	movs	r0, #3
 8001666:	e045      	b.n	80016f4 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001668:	4b25      	ldr	r3, [pc, #148]	; (8001700 <HAL_RCC_ClockConfig+0x190>)
 800166a:	68da      	ldr	r2, [r3, #12]
 800166c:	230c      	movs	r3, #12
 800166e:	4013      	ands	r3, r2
 8001670:	2b04      	cmp	r3, #4
 8001672:	d007      	beq.n	8001684 <HAL_RCC_ClockConfig+0x114>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001674:	f7fe ff1c 	bl	80004b0 <HAL_GetTick>
 8001678:	1b80      	subs	r0, r0, r6
 800167a:	4b22      	ldr	r3, [pc, #136]	; (8001704 <HAL_RCC_ClockConfig+0x194>)
 800167c:	4298      	cmp	r0, r3
 800167e:	d9f3      	bls.n	8001668 <HAL_RCC_ClockConfig+0xf8>
          return HAL_TIMEOUT;
 8001680:	2003      	movs	r0, #3
 8001682:	e037      	b.n	80016f4 <HAL_RCC_ClockConfig+0x184>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001684:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <HAL_RCC_ClockConfig+0x18c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2301      	movs	r3, #1
 800168a:	4013      	ands	r3, r2
 800168c:	42ab      	cmp	r3, r5
 800168e:	d90b      	bls.n	80016a8 <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001690:	491a      	ldr	r1, [pc, #104]	; (80016fc <HAL_RCC_ClockConfig+0x18c>)
 8001692:	680b      	ldr	r3, [r1, #0]
 8001694:	2201      	movs	r2, #1
 8001696:	4393      	bics	r3, r2
 8001698:	432b      	orrs	r3, r5
 800169a:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800169c:	680b      	ldr	r3, [r1, #0]
 800169e:	401a      	ands	r2, r3
 80016a0:	42aa      	cmp	r2, r5
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 80016a4:	2001      	movs	r0, #1
 80016a6:	e025      	b.n	80016f4 <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	075b      	lsls	r3, r3, #29
 80016ac:	d506      	bpl.n	80016bc <HAL_RCC_ClockConfig+0x14c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ae:	4a14      	ldr	r2, [pc, #80]	; (8001700 <HAL_RCC_ClockConfig+0x190>)
 80016b0:	68d3      	ldr	r3, [r2, #12]
 80016b2:	4915      	ldr	r1, [pc, #84]	; (8001708 <HAL_RCC_ClockConfig+0x198>)
 80016b4:	400b      	ands	r3, r1
 80016b6:	68e1      	ldr	r1, [r4, #12]
 80016b8:	430b      	orrs	r3, r1
 80016ba:	60d3      	str	r3, [r2, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	071b      	lsls	r3, r3, #28
 80016c0:	d507      	bpl.n	80016d2 <HAL_RCC_ClockConfig+0x162>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016c2:	490f      	ldr	r1, [pc, #60]	; (8001700 <HAL_RCC_ClockConfig+0x190>)
 80016c4:	68cb      	ldr	r3, [r1, #12]
 80016c6:	4a11      	ldr	r2, [pc, #68]	; (800170c <HAL_RCC_ClockConfig+0x19c>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	6922      	ldr	r2, [r4, #16]
 80016cc:	00d2      	lsls	r2, r2, #3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60cb      	str	r3, [r1, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016d2:	f7ff fc2d 	bl	8000f30 <HAL_RCC_GetSysClockFreq>
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_RCC_ClockConfig+0x190>)
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	0912      	lsrs	r2, r2, #4
 80016dc:	230f      	movs	r3, #15
 80016de:	4013      	ands	r3, r2
 80016e0:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <HAL_RCC_ClockConfig+0x1a0>)
 80016e2:	5cd3      	ldrb	r3, [r2, r3]
 80016e4:	40d8      	lsrs	r0, r3
 80016e6:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCC_ClockConfig+0x1a4>)
 80016e8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7fe feac 	bl	8000448 <HAL_InitTick>
 80016f0:	e000      	b.n	80016f4 <HAL_RCC_ClockConfig+0x184>
    return HAL_ERROR;
 80016f2:	2001      	movs	r0, #1
}
 80016f4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80016f6:	2001      	movs	r0, #1
 80016f8:	e7fc      	b.n	80016f4 <HAL_RCC_ClockConfig+0x184>
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	40022000 	.word	0x40022000
 8001700:	40021000 	.word	0x40021000
 8001704:	00001388 	.word	0x00001388
 8001708:	fffff8ff 	.word	0xfffff8ff
 800170c:	ffffc7ff 	.word	0xffffc7ff
 8001710:	080034b4 	.word	0x080034b4
 8001714:	20000004 	.word	0x20000004

08001718 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001718:	4b01      	ldr	r3, [pc, #4]	; (8001720 <HAL_RCC_GetHCLKFreq+0x8>)
 800171a:	6818      	ldr	r0, [r3, #0]
}
 800171c:	4770      	bx	lr
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	20000004 	.word	0x20000004

08001724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001724:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001726:	f7ff fff7 	bl	8001718 <HAL_RCC_GetHCLKFreq>
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <HAL_RCC_GetPCLK1Freq+0x18>)
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	0a12      	lsrs	r2, r2, #8
 8001730:	2307      	movs	r3, #7
 8001732:	4013      	ands	r3, r2
 8001734:	4a02      	ldr	r2, [pc, #8]	; (8001740 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001736:	5cd3      	ldrb	r3, [r2, r3]
 8001738:	40d8      	lsrs	r0, r3
}
 800173a:	bd10      	pop	{r4, pc}
 800173c:	40021000 	.word	0x40021000
 8001740:	080034c4 	.word	0x080034c4

08001744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001744:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001746:	f7ff ffe7 	bl	8001718 <HAL_RCC_GetHCLKFreq>
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <HAL_RCC_GetPCLK2Freq+0x18>)
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	0ad2      	lsrs	r2, r2, #11
 8001750:	2307      	movs	r3, #7
 8001752:	4013      	ands	r3, r2
 8001754:	4a02      	ldr	r2, [pc, #8]	; (8001760 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	40d8      	lsrs	r0, r3
}
 800175a:	bd10      	pop	{r4, pc}
 800175c:	40021000 	.word	0x40021000
 8001760:	080034c4 	.word	0x080034c4

08001764 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001764:	b570      	push	{r4, r5, r6, lr}
 8001766:	0004      	movs	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001768:	2382      	movs	r3, #130	; 0x82
 800176a:	011b      	lsls	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800176c:	6802      	ldr	r2, [r0, #0]
 800176e:	421a      	tst	r2, r3
 8001770:	d05a      	beq.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001772:	4b75      	ldr	r3, [pc, #468]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	d500      	bpl.n	800177c <HAL_RCCEx_PeriphCLKConfig+0x18>
 800177a:	e09d      	b.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800177c:	4a72      	ldr	r2, [pc, #456]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800177e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8001780:	2380      	movs	r3, #128	; 0x80
 8001782:	055b      	lsls	r3, r3, #21
 8001784:	430b      	orrs	r3, r1
 8001786:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8001788:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800178a:	4b70      	ldr	r3, [pc, #448]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	05db      	lsls	r3, r3, #23
 8001790:	d400      	bmi.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8001792:	e093      	b.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x158>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001794:	4b6c      	ldr	r3, [pc, #432]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	23c0      	movs	r3, #192	; 0xc0
 800179a:	039b      	lsls	r3, r3, #14
 800179c:	401a      	ands	r2, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800179e:	6861      	ldr	r1, [r4, #4]
 80017a0:	400b      	ands	r3, r1
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d100      	bne.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80017a6:	e09e      	b.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x182>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80017a8:	23c0      	movs	r3, #192	; 0xc0
 80017aa:	029b      	lsls	r3, r3, #10
 80017ac:	000a      	movs	r2, r1
 80017ae:	401a      	ands	r2, r3
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d100      	bne.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80017b4:	e09f      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80017b6:	4b64      	ldr	r3, [pc, #400]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80017b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017ba:	22c0      	movs	r2, #192	; 0xc0
 80017bc:	0292      	lsls	r2, r2, #10
 80017be:	4013      	ands	r3, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80017c0:	d01f      	beq.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80017c2:	4011      	ands	r1, r2
 80017c4:	4299      	cmp	r1, r3
 80017c6:	d002      	beq.n	80017ce <HAL_RCCEx_PeriphCLKConfig+0x6a>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80017c8:	6822      	ldr	r2, [r4, #0]
 80017ca:	0692      	lsls	r2, r2, #26
 80017cc:	d408      	bmi.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80017ce:	22c0      	movs	r2, #192	; 0xc0
 80017d0:	0292      	lsls	r2, r2, #10
 80017d2:	68a1      	ldr	r1, [r4, #8]
 80017d4:	400a      	ands	r2, r1
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d013      	beq.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x9e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	051b      	lsls	r3, r3, #20
 80017de:	d510      	bpl.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x9e>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80017e0:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80017e2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80017e4:	4a5a      	ldr	r2, [pc, #360]	; (8001950 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80017e6:	4002      	ands	r2, r0

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80017e8:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	0309      	lsls	r1, r1, #12
 80017ee:	4331      	orrs	r1, r6
 80017f0:	6519      	str	r1, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017f2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80017f4:	4e57      	ldr	r6, [pc, #348]	; (8001954 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80017f6:	4031      	ands	r1, r6
 80017f8:	6519      	str	r1, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80017fa:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80017fc:	05c3      	lsls	r3, r0, #23
 80017fe:	d500      	bpl.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001800:	e080      	b.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001802:	6863      	ldr	r3, [r4, #4]
 8001804:	22c0      	movs	r2, #192	; 0xc0
 8001806:	0292      	lsls	r2, r2, #10
 8001808:	0019      	movs	r1, r3
 800180a:	4011      	ands	r1, r2
 800180c:	4291      	cmp	r1, r2
 800180e:	d100      	bne.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0xae>
 8001810:	e088      	b.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8001812:	494d      	ldr	r1, [pc, #308]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001814:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8001816:	22c0      	movs	r2, #192	; 0xc0
 8001818:	0292      	lsls	r2, r2, #10
 800181a:	6860      	ldr	r0, [r4, #4]
 800181c:	4002      	ands	r2, r0
 800181e:	4313      	orrs	r3, r2
 8001820:	650b      	str	r3, [r1, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001822:	2d01      	cmp	r5, #1
 8001824:	d100      	bne.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8001826:	e087      	b.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	07db      	lsls	r3, r3, #31
 800182c:	d506      	bpl.n	800183c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800182e:	4a46      	ldr	r2, [pc, #280]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001830:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001832:	2103      	movs	r1, #3
 8001834:	438b      	bics	r3, r1
 8001836:	68e1      	ldr	r1, [r4, #12]
 8001838:	430b      	orrs	r3, r1
 800183a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	079b      	lsls	r3, r3, #30
 8001840:	d506      	bpl.n	8001850 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001842:	4a41      	ldr	r2, [pc, #260]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001844:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001846:	210c      	movs	r1, #12
 8001848:	438b      	bics	r3, r1
 800184a:	6921      	ldr	r1, [r4, #16]
 800184c:	430b      	orrs	r3, r1
 800184e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	075b      	lsls	r3, r3, #29
 8001854:	d506      	bpl.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001856:	4a3c      	ldr	r2, [pc, #240]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001858:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800185a:	493f      	ldr	r1, [pc, #252]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800185c:	400b      	ands	r3, r1
 800185e:	6961      	ldr	r1, [r4, #20]
 8001860:	430b      	orrs	r3, r1
 8001862:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	071b      	lsls	r3, r3, #28
 8001868:	d506      	bpl.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800186a:	4a37      	ldr	r2, [pc, #220]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800186c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800186e:	493b      	ldr	r1, [pc, #236]	; (800195c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001870:	400b      	ands	r3, r1
 8001872:	69a1      	ldr	r1, [r4, #24]
 8001874:	430b      	orrs	r3, r1
 8001876:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	05db      	lsls	r3, r3, #23
 800187c:	d506      	bpl.n	800188c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800187e:	4a32      	ldr	r2, [pc, #200]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001880:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001882:	4933      	ldr	r1, [pc, #204]	; (8001950 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001884:	400b      	ands	r3, r1
 8001886:	69e1      	ldr	r1, [r4, #28]
 8001888:	430b      	orrs	r3, r1
 800188a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	065b      	lsls	r3, r3, #25
 8001890:	d506      	bpl.n	80018a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001892:	4a2d      	ldr	r2, [pc, #180]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001894:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001896:	4932      	ldr	r1, [pc, #200]	; (8001960 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001898:	400b      	ands	r3, r1
 800189a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800189c:	430b      	orrs	r3, r1
 800189e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	061b      	lsls	r3, r3, #24
 80018a4:	d54e      	bpl.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80018a6:	4a28      	ldr	r2, [pc, #160]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018a8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80018aa:	492e      	ldr	r1, [pc, #184]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80018ac:	400b      	ands	r3, r1
 80018ae:	6a21      	ldr	r1, [r4, #32]
 80018b0:	430b      	orrs	r3, r1
 80018b2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 80018b4:	2000      	movs	r0, #0
}
 80018b6:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 80018b8:	2500      	movs	r5, #0
 80018ba:	e766      	b.n	800178a <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018bc:	4a23      	ldr	r2, [pc, #140]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80018be:	6811      	ldr	r1, [r2, #0]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	430b      	orrs	r3, r1
 80018c6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80018c8:	f7fe fdf2 	bl	80004b0 <HAL_GetTick>
 80018cc:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ce:	4b1f      	ldr	r3, [pc, #124]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	05db      	lsls	r3, r3, #23
 80018d4:	d500      	bpl.n	80018d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 80018d6:	e75d      	b.n	8001794 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d8:	f7fe fdea 	bl	80004b0 <HAL_GetTick>
 80018dc:	1b80      	subs	r0, r0, r6
 80018de:	2864      	cmp	r0, #100	; 0x64
 80018e0:	d9f5      	bls.n	80018ce <HAL_RCCEx_PeriphCLKConfig+0x16a>
          return HAL_TIMEOUT;
 80018e2:	2003      	movs	r0, #3
 80018e4:	e7e7      	b.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80018e6:	23c0      	movs	r3, #192	; 0xc0
 80018e8:	039b      	lsls	r3, r3, #14
 80018ea:	68a0      	ldr	r0, [r4, #8]
 80018ec:	4003      	ands	r3, r0
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d000      	beq.n	80018f4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80018f2:	e759      	b.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80018f4:	e75f      	b.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	039b      	lsls	r3, r3, #14
 80018fc:	d400      	bmi.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80018fe:	e75a      	b.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
          return HAL_ERROR;
 8001900:	2001      	movs	r0, #1
 8001902:	e7d8      	b.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
        tickstart = HAL_GetTick();
 8001904:	f7fe fdd4 	bl	80004b0 <HAL_GetTick>
 8001908:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800190a:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800190c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800190e:	059b      	lsls	r3, r3, #22
 8001910:	d500      	bpl.n	8001914 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 8001912:	e776      	b.n	8001802 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001914:	f7fe fdcc 	bl	80004b0 <HAL_GetTick>
 8001918:	1b80      	subs	r0, r0, r6
 800191a:	4b13      	ldr	r3, [pc, #76]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800191c:	4298      	cmp	r0, r3
 800191e:	d9f4      	bls.n	800190a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
            return HAL_TIMEOUT;
 8001920:	2003      	movs	r0, #3
 8001922:	e7c8      	b.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001924:	4908      	ldr	r1, [pc, #32]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001926:	680a      	ldr	r2, [r1, #0]
 8001928:	4810      	ldr	r0, [pc, #64]	; (800196c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800192a:	4002      	ands	r2, r0
 800192c:	20c0      	movs	r0, #192	; 0xc0
 800192e:	0380      	lsls	r0, r0, #14
 8001930:	4003      	ands	r3, r0
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]
 8001936:	e76c      	b.n	8001812 <HAL_RCCEx_PeriphCLKConfig+0xae>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001938:	000a      	movs	r2, r1
 800193a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800193c:	490c      	ldr	r1, [pc, #48]	; (8001970 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 800193e:	400b      	ands	r3, r1
 8001940:	6393      	str	r3, [r2, #56]	; 0x38
 8001942:	e771      	b.n	8001828 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  return HAL_OK;
 8001944:	2000      	movs	r0, #0
 8001946:	e7b6      	b.n	80018b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001948:	40021000 	.word	0x40021000
 800194c:	40007000 	.word	0x40007000
 8001950:	fffcffff 	.word	0xfffcffff
 8001954:	fff7ffff 	.word	0xfff7ffff
 8001958:	fffff3ff 	.word	0xfffff3ff
 800195c:	ffffcfff 	.word	0xffffcfff
 8001960:	fbffffff 	.word	0xfbffffff
 8001964:	fff3ffff 	.word	0xfff3ffff
 8001968:	00001388 	.word	0x00001388
 800196c:	ffcfffff 	.word	0xffcfffff
 8001970:	efffffff 	.word	0xefffffff

08001974 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001974:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001976:	2280      	movs	r2, #128	; 0x80
 8001978:	05d2      	lsls	r2, r2, #23
 800197a:	4290      	cmp	r0, r2
 800197c:	d008      	beq.n	8001990 <TIM_Base_SetConfig+0x1c>
 800197e:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <TIM_Base_SetConfig+0x60>)
 8001980:	4290      	cmp	r0, r2
 8001982:	d005      	beq.n	8001990 <TIM_Base_SetConfig+0x1c>
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <TIM_Base_SetConfig+0x64>)
 8001986:	4290      	cmp	r0, r2
 8001988:	d002      	beq.n	8001990 <TIM_Base_SetConfig+0x1c>
 800198a:	4a14      	ldr	r2, [pc, #80]	; (80019dc <TIM_Base_SetConfig+0x68>)
 800198c:	4290      	cmp	r0, r2
 800198e:	d103      	bne.n	8001998 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001990:	2270      	movs	r2, #112	; 0x70
 8001992:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8001994:	684a      	ldr	r2, [r1, #4]
 8001996:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	05d2      	lsls	r2, r2, #23
 800199c:	4290      	cmp	r0, r2
 800199e:	d008      	beq.n	80019b2 <TIM_Base_SetConfig+0x3e>
 80019a0:	4a0c      	ldr	r2, [pc, #48]	; (80019d4 <TIM_Base_SetConfig+0x60>)
 80019a2:	4290      	cmp	r0, r2
 80019a4:	d005      	beq.n	80019b2 <TIM_Base_SetConfig+0x3e>
 80019a6:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <TIM_Base_SetConfig+0x64>)
 80019a8:	4290      	cmp	r0, r2
 80019aa:	d002      	beq.n	80019b2 <TIM_Base_SetConfig+0x3e>
 80019ac:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <TIM_Base_SetConfig+0x68>)
 80019ae:	4290      	cmp	r0, r2
 80019b0:	d103      	bne.n	80019ba <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <TIM_Base_SetConfig+0x6c>)
 80019b4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019b6:	68ca      	ldr	r2, [r1, #12]
 80019b8:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019ba:	2280      	movs	r2, #128	; 0x80
 80019bc:	4393      	bics	r3, r2
 80019be:	690a      	ldr	r2, [r1, #16]
 80019c0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80019c2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019c4:	688b      	ldr	r3, [r1, #8]
 80019c6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019c8:	680b      	ldr	r3, [r1, #0]
 80019ca:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019cc:	2301      	movs	r3, #1
 80019ce:	6143      	str	r3, [r0, #20]
}
 80019d0:	4770      	bx	lr
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	40000400 	.word	0x40000400
 80019d8:	40010800 	.word	0x40010800
 80019dc:	40011400 	.word	0x40011400
 80019e0:	fffffcff 	.word	0xfffffcff

080019e4 <HAL_TIM_Base_Init>:
{
 80019e4:	b570      	push	{r4, r5, r6, lr}
 80019e6:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80019e8:	d014      	beq.n	8001a14 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80019ea:	2339      	movs	r3, #57	; 0x39
 80019ec:	5cc3      	ldrb	r3, [r0, r3]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00a      	beq.n	8001a08 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80019f2:	2539      	movs	r5, #57	; 0x39
 80019f4:	2302      	movs	r3, #2
 80019f6:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f8:	1d21      	adds	r1, r4, #4
 80019fa:	6820      	ldr	r0, [r4, #0]
 80019fc:	f7ff ffba 	bl	8001974 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001a00:	2301      	movs	r3, #1
 8001a02:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8001a04:	2000      	movs	r0, #0
}
 8001a06:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001a08:	3338      	adds	r3, #56	; 0x38
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001a0e:	f001 fa11 	bl	8002e34 <HAL_TIM_Base_MspInit>
 8001a12:	e7ee      	b.n	80019f2 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8001a14:	2001      	movs	r0, #1
 8001a16:	e7f6      	b.n	8001a06 <HAL_TIM_Base_Init+0x22>

08001a18 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8001a18:	2339      	movs	r3, #57	; 0x39
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a1e:	6802      	ldr	r2, [r0, #0]
 8001a20:	6891      	ldr	r1, [r2, #8]
 8001a22:	3b32      	subs	r3, #50	; 0x32
 8001a24:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d003      	beq.n	8001a32 <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 8001a2a:	6813      	ldr	r3, [r2, #0]
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	430b      	orrs	r3, r1
 8001a30:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001a32:	2339      	movs	r3, #57	; 0x39
 8001a34:	2201      	movs	r2, #1
 8001a36:	54c2      	strb	r2, [r0, r3]
}
 8001a38:	2000      	movs	r0, #0
 8001a3a:	4770      	bx	lr

08001a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a3e:	2338      	movs	r3, #56	; 0x38
 8001a40:	5cc3      	ldrb	r3, [r0, r3]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d01b      	beq.n	8001a7e <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8001a46:	2638      	movs	r6, #56	; 0x38
 8001a48:	2301      	movs	r3, #1
 8001a4a:	469c      	mov	ip, r3
 8001a4c:	5583      	strb	r3, [r0, r6]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a4e:	2739      	movs	r7, #57	; 0x39
 8001a50:	3301      	adds	r3, #1
 8001a52:	55c3      	strb	r3, [r0, r7]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a54:	6802      	ldr	r2, [r0, #0]
 8001a56:	6854      	ldr	r4, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001a58:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a5a:	2570      	movs	r5, #112	; 0x70
 8001a5c:	43ac      	bics	r4, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a5e:	680d      	ldr	r5, [r1, #0]
 8001a60:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001a62:	2580      	movs	r5, #128	; 0x80
 8001a64:	43ab      	bics	r3, r5
 8001a66:	001d      	movs	r5, r3
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a68:	684b      	ldr	r3, [r1, #4]
 8001a6a:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a6c:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001a6e:	6802      	ldr	r2, [r0, #0]
 8001a70:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001a72:	4663      	mov	r3, ip
 8001a74:	55c3      	strb	r3, [r0, r7]

  __HAL_UNLOCK(htim);
 8001a76:	2300      	movs	r3, #0
 8001a78:	5583      	strb	r3, [r0, r6]

  return HAL_OK;
 8001a7a:	2000      	movs	r0, #0
}
 8001a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8001a7e:	2002      	movs	r0, #2
 8001a80:	e7fc      	b.n	8001a7c <HAL_TIMEx_MasterConfigSynchronization+0x40>
	...

08001a84 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a84:	6802      	ldr	r2, [r0, #0]
 8001a86:	6813      	ldr	r3, [r2, #0]
 8001a88:	4906      	ldr	r1, [pc, #24]	; (8001aa4 <UART_EndRxTransfer+0x20>)
 8001a8a:	400b      	ands	r3, r1
 8001a8c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a8e:	6802      	ldr	r2, [r0, #0]
 8001a90:	6893      	ldr	r3, [r2, #8]
 8001a92:	3123      	adds	r1, #35	; 0x23
 8001a94:	31ff      	adds	r1, #255	; 0xff
 8001a96:	438b      	bics	r3, r1
 8001a98:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001aa2:	4770      	bx	lr
 8001aa4:	fffffedf 	.word	0xfffffedf

08001aa8 <HAL_UART_Receive_IT>:
{
 8001aa8:	b530      	push	{r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8001aaa:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	d16d      	bne.n	8001b8c <HAL_UART_Receive_IT+0xe4>
    if ((pData == NULL) || (Size == 0U))
 8001ab0:	2900      	cmp	r1, #0
 8001ab2:	d100      	bne.n	8001ab6 <HAL_UART_Receive_IT+0xe>
 8001ab4:	e06c      	b.n	8001b90 <HAL_UART_Receive_IT+0xe8>
 8001ab6:	2a00      	cmp	r2, #0
 8001ab8:	d100      	bne.n	8001abc <HAL_UART_Receive_IT+0x14>
 8001aba:	e06b      	b.n	8001b94 <HAL_UART_Receive_IT+0xec>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001abc:	6883      	ldr	r3, [r0, #8]
 8001abe:	2480      	movs	r4, #128	; 0x80
 8001ac0:	0164      	lsls	r4, r4, #5
 8001ac2:	42a3      	cmp	r3, r4
 8001ac4:	d01a      	beq.n	8001afc <HAL_UART_Receive_IT+0x54>
    __HAL_LOCK(huart);
 8001ac6:	2470      	movs	r4, #112	; 0x70
 8001ac8:	5d04      	ldrb	r4, [r0, r4]
 8001aca:	2c01      	cmp	r4, #1
 8001acc:	d064      	beq.n	8001b98 <HAL_UART_Receive_IT+0xf0>
 8001ace:	2470      	movs	r4, #112	; 0x70
 8001ad0:	2501      	movs	r5, #1
 8001ad2:	5505      	strb	r5, [r0, r4]
    huart->pRxBuffPtr  = pData;
 8001ad4:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 8001ad6:	2158      	movs	r1, #88	; 0x58
 8001ad8:	5242      	strh	r2, [r0, r1]
    huart->RxXferCount = Size;
 8001ada:	3102      	adds	r1, #2
 8001adc:	5242      	strh	r2, [r0, r1]
    huart->RxISR       = NULL;
 8001ade:	2200      	movs	r2, #0
 8001ae0:	6602      	str	r2, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	0152      	lsls	r2, r2, #5
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00f      	beq.n	8001b0a <HAL_UART_Receive_IT+0x62>
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d11c      	bne.n	8001b28 <HAL_UART_Receive_IT+0x80>
 8001aee:	6903      	ldr	r3, [r0, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d115      	bne.n	8001b20 <HAL_UART_Receive_IT+0x78>
 8001af4:	335c      	adds	r3, #92	; 0x5c
 8001af6:	22ff      	movs	r2, #255	; 0xff
 8001af8:	52c2      	strh	r2, [r0, r3]
 8001afa:	e01c      	b.n	8001b36 <HAL_UART_Receive_IT+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001afc:	6904      	ldr	r4, [r0, #16]
 8001afe:	2c00      	cmp	r4, #0
 8001b00:	d1e1      	bne.n	8001ac6 <HAL_UART_Receive_IT+0x1e>
      if ((((uint32_t)pData) & 1) != 0)
 8001b02:	07cc      	lsls	r4, r1, #31
 8001b04:	d5df      	bpl.n	8001ac6 <HAL_UART_Receive_IT+0x1e>
        return  HAL_ERROR;
 8001b06:	2001      	movs	r0, #1
 8001b08:	e041      	b.n	8001b8e <HAL_UART_Receive_IT+0xe6>
    UART_MASK_COMPUTATION(huart);
 8001b0a:	6903      	ldr	r3, [r0, #16]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d103      	bne.n	8001b18 <HAL_UART_Receive_IT+0x70>
 8001b10:	335c      	adds	r3, #92	; 0x5c
 8001b12:	4a22      	ldr	r2, [pc, #136]	; (8001b9c <HAL_UART_Receive_IT+0xf4>)
 8001b14:	52c2      	strh	r2, [r0, r3]
 8001b16:	e00e      	b.n	8001b36 <HAL_UART_Receive_IT+0x8e>
 8001b18:	235c      	movs	r3, #92	; 0x5c
 8001b1a:	22ff      	movs	r2, #255	; 0xff
 8001b1c:	52c2      	strh	r2, [r0, r3]
 8001b1e:	e00a      	b.n	8001b36 <HAL_UART_Receive_IT+0x8e>
 8001b20:	235c      	movs	r3, #92	; 0x5c
 8001b22:	227f      	movs	r2, #127	; 0x7f
 8001b24:	52c2      	strh	r2, [r0, r3]
 8001b26:	e006      	b.n	8001b36 <HAL_UART_Receive_IT+0x8e>
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	0552      	lsls	r2, r2, #21
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d01c      	beq.n	8001b6a <HAL_UART_Receive_IT+0xc2>
 8001b30:	235c      	movs	r3, #92	; 0x5c
 8001b32:	2200      	movs	r2, #0
 8001b34:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b3a:	3322      	adds	r3, #34	; 0x22
 8001b3c:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b3e:	6802      	ldr	r2, [r0, #0]
 8001b40:	6893      	ldr	r3, [r2, #8]
 8001b42:	2101      	movs	r1, #1
 8001b44:	430b      	orrs	r3, r1
 8001b46:	6093      	str	r3, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	015b      	lsls	r3, r3, #5
 8001b4c:	6882      	ldr	r2, [r0, #8]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d016      	beq.n	8001b80 <HAL_UART_Receive_IT+0xd8>
      huart->RxISR = UART_RxISR_8BIT;
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <HAL_UART_Receive_IT+0xf8>)
 8001b54:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_UNLOCK(huart);
 8001b56:	2370      	movs	r3, #112	; 0x70
 8001b58:	2200      	movs	r2, #0
 8001b5a:	54c2      	strb	r2, [r0, r3]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001b5c:	6802      	ldr	r2, [r0, #0]
 8001b5e:	6811      	ldr	r1, [r2, #0]
 8001b60:	33b0      	adds	r3, #176	; 0xb0
 8001b62:	430b      	orrs	r3, r1
 8001b64:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8001b66:	2000      	movs	r0, #0
 8001b68:	e011      	b.n	8001b8e <HAL_UART_Receive_IT+0xe6>
    UART_MASK_COMPUTATION(huart);
 8001b6a:	6903      	ldr	r3, [r0, #16]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d103      	bne.n	8001b78 <HAL_UART_Receive_IT+0xd0>
 8001b70:	335c      	adds	r3, #92	; 0x5c
 8001b72:	227f      	movs	r2, #127	; 0x7f
 8001b74:	52c2      	strh	r2, [r0, r3]
 8001b76:	e7de      	b.n	8001b36 <HAL_UART_Receive_IT+0x8e>
 8001b78:	235c      	movs	r3, #92	; 0x5c
 8001b7a:	223f      	movs	r2, #63	; 0x3f
 8001b7c:	52c2      	strh	r2, [r0, r3]
 8001b7e:	e7da      	b.n	8001b36 <HAL_UART_Receive_IT+0x8e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b80:	6903      	ldr	r3, [r0, #16]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1e5      	bne.n	8001b52 <HAL_UART_Receive_IT+0xaa>
      huart->RxISR = UART_RxISR_16BIT;
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <HAL_UART_Receive_IT+0xfc>)
 8001b88:	6603      	str	r3, [r0, #96]	; 0x60
 8001b8a:	e7e4      	b.n	8001b56 <HAL_UART_Receive_IT+0xae>
    return HAL_BUSY;
 8001b8c:	2002      	movs	r0, #2
}
 8001b8e:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8001b90:	2001      	movs	r0, #1
 8001b92:	e7fc      	b.n	8001b8e <HAL_UART_Receive_IT+0xe6>
 8001b94:	2001      	movs	r0, #1
 8001b96:	e7fa      	b.n	8001b8e <HAL_UART_Receive_IT+0xe6>
    __HAL_LOCK(huart);
 8001b98:	2002      	movs	r0, #2
 8001b9a:	e7f8      	b.n	8001b8e <HAL_UART_Receive_IT+0xe6>
 8001b9c:	000001ff 	.word	0x000001ff
 8001ba0:	08001c75 	.word	0x08001c75
 8001ba4:	08001cd9 	.word	0x08001cd9

08001ba8 <HAL_UART_Abort>:
{
 8001ba8:	b510      	push	{r4, lr}
 8001baa:	0004      	movs	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8001bac:	6802      	ldr	r2, [r0, #0]
 8001bae:	6813      	ldr	r3, [r2, #0]
 8001bb0:	4928      	ldr	r1, [pc, #160]	; (8001c54 <HAL_UART_Abort+0xac>)
 8001bb2:	400b      	ands	r3, r1
 8001bb4:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bb6:	6802      	ldr	r2, [r0, #0]
 8001bb8:	6893      	ldr	r3, [r2, #8]
 8001bba:	31e3      	adds	r1, #227	; 0xe3
 8001bbc:	31ff      	adds	r1, #255	; 0xff
 8001bbe:	438b      	bics	r3, r1
 8001bc0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8001bc2:	6803      	ldr	r3, [r0, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	0612      	lsls	r2, r2, #24
 8001bc8:	d50d      	bpl.n	8001be6 <HAL_UART_Abort+0x3e>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001bca:	689a      	ldr	r2, [r3, #8]
 8001bcc:	317f      	adds	r1, #127	; 0x7f
 8001bce:	438a      	bics	r2, r1
 8001bd0:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 8001bd2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d006      	beq.n	8001be6 <HAL_UART_Abort+0x3e>
      huart->hdmatx->XferAbortCallback = NULL;
 8001bd8:	2200      	movs	r2, #0
 8001bda:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8001bdc:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8001bde:	f7ff f820 	bl	8000c22 <HAL_DMA_Abort>
 8001be2:	2800      	cmp	r0, #0
 8001be4:	d124      	bne.n	8001c30 <HAL_UART_Abort+0x88>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	0652      	lsls	r2, r2, #25
 8001bec:	d50d      	bpl.n	8001c0a <HAL_UART_Abort+0x62>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	2140      	movs	r1, #64	; 0x40
 8001bf2:	438a      	bics	r2, r1
 8001bf4:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 8001bf6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <HAL_UART_Abort+0x62>
      huart->hdmarx->XferAbortCallback = NULL;
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	639a      	str	r2, [r3, #56]	; 0x38
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8001c00:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001c02:	f7ff f80e 	bl	8000c22 <HAL_DMA_Abort>
 8001c06:	2800      	cmp	r0, #0
 8001c08:	d11b      	bne.n	8001c42 <HAL_UART_Abort+0x9a>
  huart->TxXferCount = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	2252      	movs	r2, #82	; 0x52
 8001c0e:	52a3      	strh	r3, [r4, r2]
  huart->RxXferCount = 0U;
 8001c10:	3208      	adds	r2, #8
 8001c12:	52a3      	strh	r3, [r4, r2]
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8001c14:	6822      	ldr	r2, [r4, #0]
 8001c16:	210f      	movs	r1, #15
 8001c18:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001c1a:	6821      	ldr	r1, [r4, #0]
 8001c1c:	698a      	ldr	r2, [r1, #24]
 8001c1e:	2008      	movs	r0, #8
 8001c20:	4302      	orrs	r2, r0
 8001c22:	618a      	str	r2, [r1, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8001c24:	2220      	movs	r2, #32
 8001c26:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001c28:	67a2      	str	r2, [r4, #120]	; 0x78
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2a:	67e3      	str	r3, [r4, #124]	; 0x7c
  return HAL_OK;
 8001c2c:	2000      	movs	r0, #0
}
 8001c2e:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8001c30:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001c32:	f7ff f89e 	bl	8000d72 <HAL_DMA_GetError>
 8001c36:	2820      	cmp	r0, #32
 8001c38:	d1d5      	bne.n	8001be6 <HAL_UART_Abort+0x3e>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001c3a:	2310      	movs	r3, #16
 8001c3c:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8001c3e:	381d      	subs	r0, #29
 8001c40:	e7f5      	b.n	8001c2e <HAL_UART_Abort+0x86>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8001c42:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001c44:	f7ff f895 	bl	8000d72 <HAL_DMA_GetError>
 8001c48:	2820      	cmp	r0, #32
 8001c4a:	d1de      	bne.n	8001c0a <HAL_UART_Abort+0x62>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001c4c:	2310      	movs	r3, #16
 8001c4e:	67e3      	str	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8001c50:	381d      	subs	r0, #29
 8001c52:	e7ec      	b.n	8001c2e <HAL_UART_Abort+0x86>
 8001c54:	fffffe1f 	.word	0xfffffe1f

08001c58 <HAL_UART_TxCpltCallback>:
}
 8001c58:	4770      	bx	lr

08001c5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001c5a:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001c5c:	6802      	ldr	r2, [r0, #0]
 8001c5e:	6813      	ldr	r3, [r2, #0]
 8001c60:	2140      	movs	r1, #64	; 0x40
 8001c62:	438b      	bics	r3, r1
 8001c64:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001c66:	2320      	movs	r3, #32
 8001c68:	6743      	str	r3, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	6643      	str	r3, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001c6e:	f7ff fff3 	bl	8001c58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001c72:	bd10      	pop	{r4, pc}

08001c74 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8001c74:	b510      	push	{r4, lr}
  uint16_t uhMask = huart->Mask;
 8001c76:	235c      	movs	r3, #92	; 0x5c
 8001c78:	5ac3      	ldrh	r3, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c7a:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8001c7c:	2a22      	cmp	r2, #34	; 0x22
 8001c7e:	d005      	beq.n	8001c8c <UART_RxISR_8BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001c80:	6802      	ldr	r2, [r0, #0]
 8001c82:	6993      	ldr	r3, [r2, #24]
 8001c84:	2108      	movs	r1, #8
 8001c86:	430b      	orrs	r3, r1
 8001c88:	6193      	str	r3, [r2, #24]
  }
}
 8001c8a:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001c8c:	6802      	ldr	r2, [r0, #0]
 8001c8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4013      	ands	r3, r2
 8001c94:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001c96:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8001c98:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001c9e:	225a      	movs	r2, #90	; 0x5a
 8001ca0:	5a83      	ldrh	r3, [r0, r2]
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8001ca8:	5a83      	ldrh	r3, [r0, r2]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1ec      	bne.n	8001c8a <UART_RxISR_8BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cb0:	6802      	ldr	r2, [r0, #0]
 8001cb2:	6813      	ldr	r3, [r2, #0]
 8001cb4:	4907      	ldr	r1, [pc, #28]	; (8001cd4 <UART_RxISR_8BIT+0x60>)
 8001cb6:	400b      	ands	r3, r1
 8001cb8:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cba:	6802      	ldr	r2, [r0, #0]
 8001cbc:	6893      	ldr	r3, [r2, #8]
 8001cbe:	3123      	adds	r1, #35	; 0x23
 8001cc0:	31ff      	adds	r1, #255	; 0xff
 8001cc2:	438b      	bics	r3, r1
 8001cc4:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8001cc6:	2320      	movs	r3, #32
 8001cc8:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8001cce:	f000 ff11 	bl	8002af4 <HAL_UART_RxCpltCallback>
 8001cd2:	e7da      	b.n	8001c8a <UART_RxISR_8BIT+0x16>
 8001cd4:	fffffedf 	.word	0xfffffedf

08001cd8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8001cd8:	b510      	push	{r4, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8001cda:	235c      	movs	r3, #92	; 0x5c
 8001cdc:	5ac2      	ldrh	r2, [r0, r3]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001cde:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001ce0:	2b22      	cmp	r3, #34	; 0x22
 8001ce2:	d005      	beq.n	8001cf0 <UART_RxISR_16BIT+0x18>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001ce4:	6802      	ldr	r2, [r0, #0]
 8001ce6:	6993      	ldr	r3, [r2, #24]
 8001ce8:	2108      	movs	r1, #8
 8001cea:	430b      	orrs	r3, r1
 8001cec:	6193      	str	r3, [r2, #24]
  }
}
 8001cee:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001cf0:	6803      	ldr	r3, [r0, #0]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001cf8:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 8001cfa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001d00:	225a      	movs	r2, #90	; 0x5a
 8001d02:	5a83      	ldrh	r3, [r0, r2]
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8001d0a:	5a83      	ldrh	r3, [r0, r2]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1ed      	bne.n	8001cee <UART_RxISR_16BIT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d12:	6802      	ldr	r2, [r0, #0]
 8001d14:	6813      	ldr	r3, [r2, #0]
 8001d16:	4908      	ldr	r1, [pc, #32]	; (8001d38 <UART_RxISR_16BIT+0x60>)
 8001d18:	400b      	ands	r3, r1
 8001d1a:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d1c:	6802      	ldr	r2, [r0, #0]
 8001d1e:	6893      	ldr	r3, [r2, #8]
 8001d20:	3123      	adds	r1, #35	; 0x23
 8001d22:	31ff      	adds	r1, #255	; 0xff
 8001d24:	438b      	bics	r3, r1
 8001d26:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8001d28:	2320      	movs	r3, #32
 8001d2a:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 8001d30:	f000 fee0 	bl	8002af4 <HAL_UART_RxCpltCallback>
 8001d34:	e7db      	b.n	8001cee <UART_RxISR_16BIT+0x16>
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	fffffedf 	.word	0xfffffedf

08001d3c <HAL_UART_ErrorCallback>:
}
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_UART_IRQHandler>:
{
 8001d40:	b570      	push	{r4, r5, r6, lr}
 8001d42:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001d44:	6801      	ldr	r1, [r0, #0]
 8001d46:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d48:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d4a:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8001d4c:	220f      	movs	r2, #15
 8001d4e:	401a      	ands	r2, r3
  if (errorflags == 0U)
 8001d50:	d10a      	bne.n	8001d68 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001d52:	069e      	lsls	r6, r3, #26
 8001d54:	d508      	bpl.n	8001d68 <HAL_UART_IRQHandler+0x28>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001d56:	0686      	lsls	r6, r0, #26
 8001d58:	d506      	bpl.n	8001d68 <HAL_UART_IRQHandler+0x28>
      if (huart->RxISR != NULL)
 8001d5a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d100      	bne.n	8001d62 <HAL_UART_IRQHandler+0x22>
 8001d60:	e089      	b.n	8001e76 <HAL_UART_IRQHandler+0x136>
        huart->RxISR(huart);
 8001d62:	0020      	movs	r0, r4
 8001d64:	4798      	blx	r3
 8001d66:	e086      	b.n	8001e76 <HAL_UART_IRQHandler+0x136>
  if ((errorflags != 0U)
 8001d68:	2a00      	cmp	r2, #0
 8001d6a:	d06b      	beq.n	8001e44 <HAL_UART_IRQHandler+0x104>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	402a      	ands	r2, r5
 8001d70:	d103      	bne.n	8001d7a <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8001d72:	2690      	movs	r6, #144	; 0x90
 8001d74:	0076      	lsls	r6, r6, #1
 8001d76:	4230      	tst	r0, r6
 8001d78:	d064      	beq.n	8001e44 <HAL_UART_IRQHandler+0x104>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001d7a:	07dd      	lsls	r5, r3, #31
 8001d7c:	d506      	bpl.n	8001d8c <HAL_UART_IRQHandler+0x4c>
 8001d7e:	05c5      	lsls	r5, r0, #23
 8001d80:	d504      	bpl.n	8001d8c <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001d82:	2501      	movs	r5, #1
 8001d84:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d86:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001d88:	4329      	orrs	r1, r5
 8001d8a:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d8c:	0799      	lsls	r1, r3, #30
 8001d8e:	d508      	bpl.n	8001da2 <HAL_UART_IRQHandler+0x62>
 8001d90:	2a00      	cmp	r2, #0
 8001d92:	d006      	beq.n	8001da2 <HAL_UART_IRQHandler+0x62>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001d94:	6821      	ldr	r1, [r4, #0]
 8001d96:	2502      	movs	r5, #2
 8001d98:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d9a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001d9c:	3502      	adds	r5, #2
 8001d9e:	4329      	orrs	r1, r5
 8001da0:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001da2:	0759      	lsls	r1, r3, #29
 8001da4:	d508      	bpl.n	8001db8 <HAL_UART_IRQHandler+0x78>
 8001da6:	2a00      	cmp	r2, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_UART_IRQHandler+0x78>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001daa:	6821      	ldr	r1, [r4, #0]
 8001dac:	2504      	movs	r5, #4
 8001dae:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001db0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001db2:	3d02      	subs	r5, #2
 8001db4:	4329      	orrs	r1, r5
 8001db6:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001db8:	0719      	lsls	r1, r3, #28
 8001dba:	d509      	bpl.n	8001dd0 <HAL_UART_IRQHandler+0x90>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001dbc:	0681      	lsls	r1, r0, #26
 8001dbe:	d401      	bmi.n	8001dc4 <HAL_UART_IRQHandler+0x84>
 8001dc0:	2a00      	cmp	r2, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_UART_IRQHandler+0x90>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001dc4:	6822      	ldr	r2, [r4, #0]
 8001dc6:	2108      	movs	r1, #8
 8001dc8:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001dca:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dd0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001dd2:	2a00      	cmp	r2, #0
 8001dd4:	d04f      	beq.n	8001e76 <HAL_UART_IRQHandler+0x136>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001dd6:	069b      	lsls	r3, r3, #26
 8001dd8:	d506      	bpl.n	8001de8 <HAL_UART_IRQHandler+0xa8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001dda:	0683      	lsls	r3, r0, #26
 8001ddc:	d504      	bpl.n	8001de8 <HAL_UART_IRQHandler+0xa8>
        if (huart->RxISR != NULL)
 8001dde:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_UART_IRQHandler+0xa8>
          huart->RxISR(huart);
 8001de4:	0020      	movs	r0, r4
 8001de6:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8001de8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	065b      	lsls	r3, r3, #25
 8001df0:	d401      	bmi.n	8001df6 <HAL_UART_IRQHandler+0xb6>
 8001df2:	0713      	lsls	r3, r2, #28
 8001df4:	d520      	bpl.n	8001e38 <HAL_UART_IRQHandler+0xf8>
        UART_EndRxTransfer(huart);
 8001df6:	0020      	movs	r0, r4
 8001df8:	f7ff fe44 	bl	8001a84 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dfc:	6823      	ldr	r3, [r4, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	0652      	lsls	r2, r2, #25
 8001e02:	d515      	bpl.n	8001e30 <HAL_UART_IRQHandler+0xf0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	2140      	movs	r1, #64	; 0x40
 8001e08:	438a      	bics	r2, r1
 8001e0a:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001e0c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00a      	beq.n	8001e28 <HAL_UART_IRQHandler+0xe8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e12:	4a1b      	ldr	r2, [pc, #108]	; (8001e80 <HAL_UART_IRQHandler+0x140>)
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e16:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001e18:	f7fe ff27 	bl	8000c6a <HAL_DMA_Abort_IT>
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	d02a      	beq.n	8001e76 <HAL_UART_IRQHandler+0x136>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e20:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001e22:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001e24:	4798      	blx	r3
 8001e26:	e026      	b.n	8001e76 <HAL_UART_IRQHandler+0x136>
            HAL_UART_ErrorCallback(huart);
 8001e28:	0020      	movs	r0, r4
 8001e2a:	f7ff ff87 	bl	8001d3c <HAL_UART_ErrorCallback>
 8001e2e:	e022      	b.n	8001e76 <HAL_UART_IRQHandler+0x136>
          HAL_UART_ErrorCallback(huart);
 8001e30:	0020      	movs	r0, r4
 8001e32:	f7ff ff83 	bl	8001d3c <HAL_UART_ErrorCallback>
 8001e36:	e01e      	b.n	8001e76 <HAL_UART_IRQHandler+0x136>
        HAL_UART_ErrorCallback(huart);
 8001e38:	0020      	movs	r0, r4
 8001e3a:	f7ff ff7f 	bl	8001d3c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001e42:	e018      	b.n	8001e76 <HAL_UART_IRQHandler+0x136>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001e44:	02da      	lsls	r2, r3, #11
 8001e46:	d501      	bpl.n	8001e4c <HAL_UART_IRQHandler+0x10c>
 8001e48:	026a      	lsls	r2, r5, #9
 8001e4a:	d409      	bmi.n	8001e60 <HAL_UART_IRQHandler+0x120>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8001e4c:	061a      	lsls	r2, r3, #24
 8001e4e:	d50e      	bpl.n	8001e6e <HAL_UART_IRQHandler+0x12e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001e50:	0602      	lsls	r2, r0, #24
 8001e52:	d50c      	bpl.n	8001e6e <HAL_UART_IRQHandler+0x12e>
    if (huart->TxISR != NULL)
 8001e54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00d      	beq.n	8001e76 <HAL_UART_IRQHandler+0x136>
      huart->TxISR(huart);
 8001e5a:	0020      	movs	r0, r4
 8001e5c:	4798      	blx	r3
 8001e5e:	e00a      	b.n	8001e76 <HAL_UART_IRQHandler+0x136>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	035b      	lsls	r3, r3, #13
 8001e64:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8001e66:	0020      	movs	r0, r4
 8001e68:	f000 fb5e 	bl	8002528 <HAL_UARTEx_WakeupCallback>
    return;
 8001e6c:	e003      	b.n	8001e76 <HAL_UART_IRQHandler+0x136>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8001e6e:	065b      	lsls	r3, r3, #25
 8001e70:	d501      	bpl.n	8001e76 <HAL_UART_IRQHandler+0x136>
 8001e72:	0643      	lsls	r3, r0, #25
 8001e74:	d400      	bmi.n	8001e78 <HAL_UART_IRQHandler+0x138>
}
 8001e76:	bd70      	pop	{r4, r5, r6, pc}
    UART_EndTransmit_IT(huart);
 8001e78:	0020      	movs	r0, r4
 8001e7a:	f7ff feee 	bl	8001c5a <UART_EndTransmit_IT>
    return;
 8001e7e:	e7fa      	b.n	8001e76 <HAL_UART_IRQHandler+0x136>
 8001e80:	08001e85 	.word	0x08001e85

08001e84 <UART_DMAAbortOnError>:
{
 8001e84:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001e86:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	225a      	movs	r2, #90	; 0x5a
 8001e8c:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8001e8e:	3a08      	subs	r2, #8
 8001e90:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8001e92:	f7ff ff53 	bl	8001d3c <HAL_UART_ErrorCallback>
}
 8001e96:	bd10      	pop	{r4, pc}

08001e98 <UART_SetConfig>:
{
 8001e98:	b5d0      	push	{r4, r6, r7, lr}
 8001e9a:	0004      	movs	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8001e9c:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001e9e:	6883      	ldr	r3, [r0, #8]
 8001ea0:	6902      	ldr	r2, [r0, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	6942      	ldr	r2, [r0, #20]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	69c2      	ldr	r2, [r0, #28]
 8001eaa:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001eac:	680a      	ldr	r2, [r1, #0]
 8001eae:	48ba      	ldr	r0, [pc, #744]	; (8002198 <UART_SetConfig+0x300>)
 8001eb0:	4002      	ands	r2, r0
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eb6:	6822      	ldr	r2, [r4, #0]
 8001eb8:	6853      	ldr	r3, [r2, #4]
 8001eba:	49b8      	ldr	r1, [pc, #736]	; (800219c <UART_SetConfig+0x304>)
 8001ebc:	400b      	ands	r3, r1
 8001ebe:	68e1      	ldr	r1, [r4, #12]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001ec4:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001ec6:	6822      	ldr	r2, [r4, #0]
 8001ec8:	4bb5      	ldr	r3, [pc, #724]	; (80021a0 <UART_SetConfig+0x308>)
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d001      	beq.n	8001ed2 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 8001ece:	6a23      	ldr	r3, [r4, #32]
 8001ed0:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001ed2:	6893      	ldr	r3, [r2, #8]
 8001ed4:	48b3      	ldr	r0, [pc, #716]	; (80021a4 <UART_SetConfig+0x30c>)
 8001ed6:	4003      	ands	r3, r0
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001edc:	6823      	ldr	r3, [r4, #0]
 8001ede:	4ab2      	ldr	r2, [pc, #712]	; (80021a8 <UART_SetConfig+0x310>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d01c      	beq.n	8001f1e <UART_SetConfig+0x86>
 8001ee4:	4ab1      	ldr	r2, [pc, #708]	; (80021ac <UART_SetConfig+0x314>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02d      	beq.n	8001f46 <UART_SetConfig+0xae>
 8001eea:	4ab1      	ldr	r2, [pc, #708]	; (80021b0 <UART_SetConfig+0x318>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d05f      	beq.n	8001fb0 <UART_SetConfig+0x118>
 8001ef0:	4ab0      	ldr	r2, [pc, #704]	; (80021b4 <UART_SetConfig+0x31c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d05e      	beq.n	8001fb4 <UART_SetConfig+0x11c>
 8001ef6:	4aaa      	ldr	r2, [pc, #680]	; (80021a0 <UART_SetConfig+0x308>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d039      	beq.n	8001f70 <UART_SetConfig+0xd8>
 8001efc:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8001efe:	49a8      	ldr	r1, [pc, #672]	; (80021a0 <UART_SetConfig+0x308>)
 8001f00:	428b      	cmp	r3, r1
 8001f02:	d05b      	beq.n	8001fbc <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	69e1      	ldr	r1, [r4, #28]
 8001f0a:	4299      	cmp	r1, r3
 8001f0c:	d100      	bne.n	8001f10 <UART_SetConfig+0x78>
 8001f0e:	e090      	b.n	8002032 <UART_SetConfig+0x19a>
    switch (clocksource)
 8001f10:	2a08      	cmp	r2, #8
 8001f12:	d900      	bls.n	8001f16 <UART_SetConfig+0x7e>
 8001f14:	e171      	b.n	80021fa <UART_SetConfig+0x362>
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	4ba7      	ldr	r3, [pc, #668]	; (80021b8 <UART_SetConfig+0x320>)
 8001f1a:	589b      	ldr	r3, [r3, r2]
 8001f1c:	469f      	mov	pc, r3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f1e:	4aa7      	ldr	r2, [pc, #668]	; (80021bc <UART_SetConfig+0x324>)
 8001f20:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001f22:	2203      	movs	r2, #3
 8001f24:	400a      	ands	r2, r1
 8001f26:	2a01      	cmp	r2, #1
 8001f28:	d009      	beq.n	8001f3e <UART_SetConfig+0xa6>
 8001f2a:	2a00      	cmp	r2, #0
 8001f2c:	d005      	beq.n	8001f3a <UART_SetConfig+0xa2>
 8001f2e:	2a02      	cmp	r2, #2
 8001f30:	d03a      	beq.n	8001fa8 <UART_SetConfig+0x110>
 8001f32:	2a03      	cmp	r2, #3
 8001f34:	d005      	beq.n	8001f42 <UART_SetConfig+0xaa>
 8001f36:	2210      	movs	r2, #16
 8001f38:	e7e1      	b.n	8001efe <UART_SetConfig+0x66>
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	e7df      	b.n	8001efe <UART_SetConfig+0x66>
 8001f3e:	2204      	movs	r2, #4
 8001f40:	e7dd      	b.n	8001efe <UART_SetConfig+0x66>
 8001f42:	2208      	movs	r2, #8
 8001f44:	e7db      	b.n	8001efe <UART_SetConfig+0x66>
 8001f46:	4a9d      	ldr	r2, [pc, #628]	; (80021bc <UART_SetConfig+0x324>)
 8001f48:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	2a04      	cmp	r2, #4
 8001f50:	d00a      	beq.n	8001f68 <UART_SetConfig+0xd0>
 8001f52:	d905      	bls.n	8001f60 <UART_SetConfig+0xc8>
 8001f54:	2a08      	cmp	r2, #8
 8001f56:	d029      	beq.n	8001fac <UART_SetConfig+0x114>
 8001f58:	2a0c      	cmp	r2, #12
 8001f5a:	d107      	bne.n	8001f6c <UART_SetConfig+0xd4>
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	e7ce      	b.n	8001efe <UART_SetConfig+0x66>
 8001f60:	2a00      	cmp	r2, #0
 8001f62:	d103      	bne.n	8001f6c <UART_SetConfig+0xd4>
 8001f64:	2200      	movs	r2, #0
 8001f66:	e7ca      	b.n	8001efe <UART_SetConfig+0x66>
 8001f68:	2204      	movs	r2, #4
 8001f6a:	e7c8      	b.n	8001efe <UART_SetConfig+0x66>
 8001f6c:	2210      	movs	r2, #16
 8001f6e:	e7c6      	b.n	8001efe <UART_SetConfig+0x66>
 8001f70:	4a92      	ldr	r2, [pc, #584]	; (80021bc <UART_SetConfig+0x324>)
 8001f72:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f74:	21c0      	movs	r1, #192	; 0xc0
 8001f76:	0109      	lsls	r1, r1, #4
 8001f78:	400a      	ands	r2, r1
 8001f7a:	2180      	movs	r1, #128	; 0x80
 8001f7c:	00c9      	lsls	r1, r1, #3
 8001f7e:	428a      	cmp	r2, r1
 8001f80:	d00e      	beq.n	8001fa0 <UART_SetConfig+0x108>
 8001f82:	d909      	bls.n	8001f98 <UART_SetConfig+0x100>
 8001f84:	2180      	movs	r1, #128	; 0x80
 8001f86:	0109      	lsls	r1, r1, #4
 8001f88:	428a      	cmp	r2, r1
 8001f8a:	d015      	beq.n	8001fb8 <UART_SetConfig+0x120>
 8001f8c:	21c0      	movs	r1, #192	; 0xc0
 8001f8e:	0109      	lsls	r1, r1, #4
 8001f90:	428a      	cmp	r2, r1
 8001f92:	d107      	bne.n	8001fa4 <UART_SetConfig+0x10c>
 8001f94:	2208      	movs	r2, #8
 8001f96:	e7b2      	b.n	8001efe <UART_SetConfig+0x66>
 8001f98:	2a00      	cmp	r2, #0
 8001f9a:	d103      	bne.n	8001fa4 <UART_SetConfig+0x10c>
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	e7ae      	b.n	8001efe <UART_SetConfig+0x66>
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	e7ac      	b.n	8001efe <UART_SetConfig+0x66>
 8001fa4:	2210      	movs	r2, #16
 8001fa6:	e7aa      	b.n	8001efe <UART_SetConfig+0x66>
 8001fa8:	2202      	movs	r2, #2
 8001faa:	e7a8      	b.n	8001efe <UART_SetConfig+0x66>
 8001fac:	2202      	movs	r2, #2
 8001fae:	e7a6      	b.n	8001efe <UART_SetConfig+0x66>
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	e7a4      	b.n	8001efe <UART_SetConfig+0x66>
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	e7a2      	b.n	8001efe <UART_SetConfig+0x66>
 8001fb8:	2202      	movs	r2, #2
 8001fba:	e7a0      	b.n	8001efe <UART_SetConfig+0x66>
    switch (clocksource)
 8001fbc:	2a02      	cmp	r2, #2
 8001fbe:	d02d      	beq.n	800201c <UART_SetConfig+0x184>
 8001fc0:	d907      	bls.n	8001fd2 <UART_SetConfig+0x13a>
 8001fc2:	2a04      	cmp	r2, #4
 8001fc4:	d030      	beq.n	8002028 <UART_SetConfig+0x190>
 8001fc6:	2a08      	cmp	r2, #8
 8001fc8:	d000      	beq.n	8001fcc <UART_SetConfig+0x134>
 8001fca:	e119      	b.n	8002200 <UART_SetConfig+0x368>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001fcc:	2080      	movs	r0, #128	; 0x80
 8001fce:	0200      	lsls	r0, r0, #8
 8001fd0:	e007      	b.n	8001fe2 <UART_SetConfig+0x14a>
    switch (clocksource)
 8001fd2:	2a00      	cmp	r2, #0
 8001fd4:	d000      	beq.n	8001fd8 <UART_SetConfig+0x140>
 8001fd6:	e113      	b.n	8002200 <UART_SetConfig+0x368>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8001fd8:	f7ff fba4 	bl	8001724 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8001fdc:	2800      	cmp	r0, #0
 8001fde:	d100      	bne.n	8001fe2 <UART_SetConfig+0x14a>
 8001fe0:	e110      	b.n	8002204 <UART_SetConfig+0x36c>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001fe2:	6862      	ldr	r2, [r4, #4]
 8001fe4:	0053      	lsls	r3, r2, #1
 8001fe6:	189b      	adds	r3, r3, r2
 8001fe8:	4283      	cmp	r3, r0
 8001fea:	d900      	bls.n	8001fee <UART_SetConfig+0x156>
 8001fec:	e10c      	b.n	8002208 <UART_SetConfig+0x370>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001fee:	0313      	lsls	r3, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001ff0:	4283      	cmp	r3, r0
 8001ff2:	d200      	bcs.n	8001ff6 <UART_SetConfig+0x15e>
 8001ff4:	e10a      	b.n	800220c <UART_SetConfig+0x374>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8001ff6:	0e07      	lsrs	r7, r0, #24
 8001ff8:	0206      	lsls	r6, r0, #8
 8001ffa:	0850      	lsrs	r0, r2, #1
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	1980      	adds	r0, r0, r6
 8002000:	4179      	adcs	r1, r7
 8002002:	2300      	movs	r3, #0
 8002004:	f7fe f914 	bl	8000230 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002008:	4b6d      	ldr	r3, [pc, #436]	; (80021c0 <UART_SetConfig+0x328>)
 800200a:	18c2      	adds	r2, r0, r3
 800200c:	4b6d      	ldr	r3, [pc, #436]	; (80021c4 <UART_SetConfig+0x32c>)
 800200e:	429a      	cmp	r2, r3
 8002010:	d900      	bls.n	8002014 <UART_SetConfig+0x17c>
 8002012:	e0fd      	b.n	8002210 <UART_SetConfig+0x378>
          huart->Instance->BRR = usartdiv;
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	60d8      	str	r0, [r3, #12]
 8002018:	2000      	movs	r0, #0
 800201a:	e085      	b.n	8002128 <UART_SetConfig+0x290>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800201c:	4b67      	ldr	r3, [pc, #412]	; (80021bc <UART_SetConfig+0x324>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	06db      	lsls	r3, r3, #27
 8002022:	d404      	bmi.n	800202e <UART_SetConfig+0x196>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002024:	4868      	ldr	r0, [pc, #416]	; (80021c8 <UART_SetConfig+0x330>)
 8002026:	e7dc      	b.n	8001fe2 <UART_SetConfig+0x14a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002028:	f7fe ff82 	bl	8000f30 <HAL_RCC_GetSysClockFreq>
        break;
 800202c:	e7d6      	b.n	8001fdc <UART_SetConfig+0x144>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800202e:	4867      	ldr	r0, [pc, #412]	; (80021cc <UART_SetConfig+0x334>)
 8002030:	e7d7      	b.n	8001fe2 <UART_SetConfig+0x14a>
    switch (clocksource)
 8002032:	2a08      	cmp	r2, #8
 8002034:	d862      	bhi.n	80020fc <UART_SetConfig+0x264>
 8002036:	0092      	lsls	r2, r2, #2
 8002038:	4b65      	ldr	r3, [pc, #404]	; (80021d0 <UART_SetConfig+0x338>)
 800203a:	589b      	ldr	r3, [r3, r2]
 800203c:	469f      	mov	pc, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800203e:	f7ff fb71 	bl	8001724 <HAL_RCC_GetPCLK1Freq>
 8002042:	0040      	lsls	r0, r0, #1
 8002044:	6863      	ldr	r3, [r4, #4]
 8002046:	085b      	lsrs	r3, r3, #1
 8002048:	18c0      	adds	r0, r0, r3
 800204a:	6861      	ldr	r1, [r4, #4]
 800204c:	f7fe f864 	bl	8000118 <__udivsi3>
 8002050:	0403      	lsls	r3, r0, #16
 8002052:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002054:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002056:	495f      	ldr	r1, [pc, #380]	; (80021d4 <UART_SetConfig+0x33c>)
 8002058:	001a      	movs	r2, r3
 800205a:	3a10      	subs	r2, #16
 800205c:	428a      	cmp	r2, r1
 800205e:	d900      	bls.n	8002062 <UART_SetConfig+0x1ca>
 8002060:	e0d8      	b.n	8002214 <UART_SetConfig+0x37c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002062:	220f      	movs	r2, #15
 8002064:	0019      	movs	r1, r3
 8002066:	4391      	bics	r1, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002068:	085b      	lsrs	r3, r3, #1
 800206a:	3a08      	subs	r2, #8
 800206c:	4013      	ands	r3, r2
 800206e:	430b      	orrs	r3, r1
      huart->Instance->BRR = brrtemp;
 8002070:	6822      	ldr	r2, [r4, #0]
 8002072:	60d3      	str	r3, [r2, #12]
 8002074:	e058      	b.n	8002128 <UART_SetConfig+0x290>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002076:	f7ff fb65 	bl	8001744 <HAL_RCC_GetPCLK2Freq>
 800207a:	0040      	lsls	r0, r0, #1
 800207c:	6863      	ldr	r3, [r4, #4]
 800207e:	085b      	lsrs	r3, r3, #1
 8002080:	18c0      	adds	r0, r0, r3
 8002082:	6861      	ldr	r1, [r4, #4]
 8002084:	f7fe f848 	bl	8000118 <__udivsi3>
 8002088:	0403      	lsls	r3, r0, #16
 800208a:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800208c:	2000      	movs	r0, #0
        break;
 800208e:	e7e2      	b.n	8002056 <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002090:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <UART_SetConfig+0x324>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	06db      	lsls	r3, r3, #27
 8002096:	d50b      	bpl.n	80020b0 <UART_SetConfig+0x218>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002098:	6863      	ldr	r3, [r4, #4]
 800209a:	0858      	lsrs	r0, r3, #1
 800209c:	4b4e      	ldr	r3, [pc, #312]	; (80021d8 <UART_SetConfig+0x340>)
 800209e:	469c      	mov	ip, r3
 80020a0:	4460      	add	r0, ip
 80020a2:	6861      	ldr	r1, [r4, #4]
 80020a4:	f7fe f838 	bl	8000118 <__udivsi3>
 80020a8:	0403      	lsls	r3, r0, #16
 80020aa:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80020ac:	2000      	movs	r0, #0
 80020ae:	e7d2      	b.n	8002056 <UART_SetConfig+0x1be>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80020b0:	6863      	ldr	r3, [r4, #4]
 80020b2:	0858      	lsrs	r0, r3, #1
 80020b4:	4b49      	ldr	r3, [pc, #292]	; (80021dc <UART_SetConfig+0x344>)
 80020b6:	469c      	mov	ip, r3
 80020b8:	4460      	add	r0, ip
 80020ba:	6861      	ldr	r1, [r4, #4]
 80020bc:	f7fe f82c 	bl	8000118 <__udivsi3>
 80020c0:	0403      	lsls	r3, r0, #16
 80020c2:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80020c4:	2000      	movs	r0, #0
 80020c6:	e7c6      	b.n	8002056 <UART_SetConfig+0x1be>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80020c8:	f7fe ff32 	bl	8000f30 <HAL_RCC_GetSysClockFreq>
 80020cc:	0040      	lsls	r0, r0, #1
 80020ce:	6863      	ldr	r3, [r4, #4]
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	18c0      	adds	r0, r0, r3
 80020d4:	6861      	ldr	r1, [r4, #4]
 80020d6:	f7fe f81f 	bl	8000118 <__udivsi3>
 80020da:	0403      	lsls	r3, r0, #16
 80020dc:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80020de:	2000      	movs	r0, #0
        break;
 80020e0:	e7b9      	b.n	8002056 <UART_SetConfig+0x1be>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80020e2:	6863      	ldr	r3, [r4, #4]
 80020e4:	0858      	lsrs	r0, r3, #1
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	025b      	lsls	r3, r3, #9
 80020ea:	469c      	mov	ip, r3
 80020ec:	4460      	add	r0, ip
 80020ee:	6861      	ldr	r1, [r4, #4]
 80020f0:	f7fe f812 	bl	8000118 <__udivsi3>
 80020f4:	0403      	lsls	r3, r0, #16
 80020f6:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80020f8:	2000      	movs	r0, #0
        break;
 80020fa:	e7ac      	b.n	8002056 <UART_SetConfig+0x1be>
        ret = HAL_ERROR;
 80020fc:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80020fe:	2300      	movs	r3, #0
 8002100:	e7a9      	b.n	8002056 <UART_SetConfig+0x1be>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002102:	f7ff fb0f 	bl	8001724 <HAL_RCC_GetPCLK1Freq>
 8002106:	6863      	ldr	r3, [r4, #4]
 8002108:	085b      	lsrs	r3, r3, #1
 800210a:	18c0      	adds	r0, r0, r3
 800210c:	6861      	ldr	r1, [r4, #4]
 800210e:	f7fe f803 	bl	8000118 <__udivsi3>
 8002112:	0403      	lsls	r3, r0, #16
 8002114:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002116:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002118:	492e      	ldr	r1, [pc, #184]	; (80021d4 <UART_SetConfig+0x33c>)
 800211a:	001a      	movs	r2, r3
 800211c:	3a10      	subs	r2, #16
 800211e:	428a      	cmp	r2, r1
 8002120:	d900      	bls.n	8002124 <UART_SetConfig+0x28c>
 8002122:	e079      	b.n	8002218 <UART_SetConfig+0x380>
      huart->Instance->BRR = usartdiv;
 8002124:	6822      	ldr	r2, [r4, #0]
 8002126:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8002128:	2300      	movs	r3, #0
 800212a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800212c:	6663      	str	r3, [r4, #100]	; 0x64
}
 800212e:	bdd0      	pop	{r4, r6, r7, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002130:	f7ff fb08 	bl	8001744 <HAL_RCC_GetPCLK2Freq>
 8002134:	6863      	ldr	r3, [r4, #4]
 8002136:	085b      	lsrs	r3, r3, #1
 8002138:	18c0      	adds	r0, r0, r3
 800213a:	6861      	ldr	r1, [r4, #4]
 800213c:	f7fd ffec 	bl	8000118 <__udivsi3>
 8002140:	0403      	lsls	r3, r0, #16
 8002142:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002144:	2000      	movs	r0, #0
        break;
 8002146:	e7e7      	b.n	8002118 <UART_SetConfig+0x280>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002148:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <UART_SetConfig+0x324>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	06db      	lsls	r3, r3, #27
 800214e:	d50b      	bpl.n	8002168 <UART_SetConfig+0x2d0>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8002150:	6863      	ldr	r3, [r4, #4]
 8002152:	0858      	lsrs	r0, r3, #1
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <UART_SetConfig+0x334>)
 8002156:	469c      	mov	ip, r3
 8002158:	4460      	add	r0, ip
 800215a:	6861      	ldr	r1, [r4, #4]
 800215c:	f7fd ffdc 	bl	8000118 <__udivsi3>
 8002160:	0403      	lsls	r3, r0, #16
 8002162:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002164:	2000      	movs	r0, #0
 8002166:	e7d7      	b.n	8002118 <UART_SetConfig+0x280>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002168:	6863      	ldr	r3, [r4, #4]
 800216a:	0858      	lsrs	r0, r3, #1
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <UART_SetConfig+0x330>)
 800216e:	469c      	mov	ip, r3
 8002170:	4460      	add	r0, ip
 8002172:	6861      	ldr	r1, [r4, #4]
 8002174:	f7fd ffd0 	bl	8000118 <__udivsi3>
 8002178:	0403      	lsls	r3, r0, #16
 800217a:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800217c:	2000      	movs	r0, #0
 800217e:	e7cb      	b.n	8002118 <UART_SetConfig+0x280>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002180:	f7fe fed6 	bl	8000f30 <HAL_RCC_GetSysClockFreq>
 8002184:	6863      	ldr	r3, [r4, #4]
 8002186:	085b      	lsrs	r3, r3, #1
 8002188:	18c0      	adds	r0, r0, r3
 800218a:	6861      	ldr	r1, [r4, #4]
 800218c:	f7fd ffc4 	bl	8000118 <__udivsi3>
 8002190:	0403      	lsls	r3, r0, #16
 8002192:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 8002194:	2000      	movs	r0, #0
        break;
 8002196:	e7bf      	b.n	8002118 <UART_SetConfig+0x280>
 8002198:	efff69f3 	.word	0xefff69f3
 800219c:	ffffcfff 	.word	0xffffcfff
 80021a0:	40004800 	.word	0x40004800
 80021a4:	fffff4ff 	.word	0xfffff4ff
 80021a8:	40013800 	.word	0x40013800
 80021ac:	40004400 	.word	0x40004400
 80021b0:	40004c00 	.word	0x40004c00
 80021b4:	40005000 	.word	0x40005000
 80021b8:	08003460 	.word	0x08003460
 80021bc:	40021000 	.word	0x40021000
 80021c0:	fffffd00 	.word	0xfffffd00
 80021c4:	000ffcff 	.word	0x000ffcff
 80021c8:	00f42400 	.word	0x00f42400
 80021cc:	003d0900 	.word	0x003d0900
 80021d0:	08003484 	.word	0x08003484
 80021d4:	0000ffef 	.word	0x0000ffef
 80021d8:	007a1200 	.word	0x007a1200
 80021dc:	01e84800 	.word	0x01e84800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80021e0:	6863      	ldr	r3, [r4, #4]
 80021e2:	0858      	lsrs	r0, r3, #1
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	469c      	mov	ip, r3
 80021ea:	4460      	add	r0, ip
 80021ec:	6861      	ldr	r1, [r4, #4]
 80021ee:	f7fd ff93 	bl	8000118 <__udivsi3>
 80021f2:	0403      	lsls	r3, r0, #16
 80021f4:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80021f6:	2000      	movs	r0, #0
        break;
 80021f8:	e78e      	b.n	8002118 <UART_SetConfig+0x280>
        ret = HAL_ERROR;
 80021fa:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80021fc:	2300      	movs	r3, #0
 80021fe:	e78b      	b.n	8002118 <UART_SetConfig+0x280>
        ret = HAL_ERROR;
 8002200:	2001      	movs	r0, #1
 8002202:	e791      	b.n	8002128 <UART_SetConfig+0x290>
 8002204:	2000      	movs	r0, #0
 8002206:	e78f      	b.n	8002128 <UART_SetConfig+0x290>
        ret = HAL_ERROR;
 8002208:	2001      	movs	r0, #1
 800220a:	e78d      	b.n	8002128 <UART_SetConfig+0x290>
 800220c:	2001      	movs	r0, #1
 800220e:	e78b      	b.n	8002128 <UART_SetConfig+0x290>
          ret = HAL_ERROR;
 8002210:	2001      	movs	r0, #1
 8002212:	e789      	b.n	8002128 <UART_SetConfig+0x290>
      ret = HAL_ERROR;
 8002214:	2001      	movs	r0, #1
 8002216:	e787      	b.n	8002128 <UART_SetConfig+0x290>
      ret = HAL_ERROR;
 8002218:	2001      	movs	r0, #1
 800221a:	e785      	b.n	8002128 <UART_SetConfig+0x290>

0800221c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800221c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800221e:	07db      	lsls	r3, r3, #31
 8002220:	d506      	bpl.n	8002230 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002222:	6802      	ldr	r2, [r0, #0]
 8002224:	6853      	ldr	r3, [r2, #4]
 8002226:	492c      	ldr	r1, [pc, #176]	; (80022d8 <UART_AdvFeatureConfig+0xbc>)
 8002228:	400b      	ands	r3, r1
 800222a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800222c:	430b      	orrs	r3, r1
 800222e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002230:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002232:	079b      	lsls	r3, r3, #30
 8002234:	d506      	bpl.n	8002244 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002236:	6802      	ldr	r2, [r0, #0]
 8002238:	6853      	ldr	r3, [r2, #4]
 800223a:	4928      	ldr	r1, [pc, #160]	; (80022dc <UART_AdvFeatureConfig+0xc0>)
 800223c:	400b      	ands	r3, r1
 800223e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002240:	430b      	orrs	r3, r1
 8002242:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002244:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002246:	075b      	lsls	r3, r3, #29
 8002248:	d506      	bpl.n	8002258 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800224a:	6802      	ldr	r2, [r0, #0]
 800224c:	6853      	ldr	r3, [r2, #4]
 800224e:	4924      	ldr	r1, [pc, #144]	; (80022e0 <UART_AdvFeatureConfig+0xc4>)
 8002250:	400b      	ands	r3, r1
 8002252:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002254:	430b      	orrs	r3, r1
 8002256:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002258:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800225a:	071b      	lsls	r3, r3, #28
 800225c:	d506      	bpl.n	800226c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800225e:	6802      	ldr	r2, [r0, #0]
 8002260:	6853      	ldr	r3, [r2, #4]
 8002262:	4920      	ldr	r1, [pc, #128]	; (80022e4 <UART_AdvFeatureConfig+0xc8>)
 8002264:	400b      	ands	r3, r1
 8002266:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002268:	430b      	orrs	r3, r1
 800226a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800226c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800226e:	06db      	lsls	r3, r3, #27
 8002270:	d506      	bpl.n	8002280 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002272:	6802      	ldr	r2, [r0, #0]
 8002274:	6893      	ldr	r3, [r2, #8]
 8002276:	491c      	ldr	r1, [pc, #112]	; (80022e8 <UART_AdvFeatureConfig+0xcc>)
 8002278:	400b      	ands	r3, r1
 800227a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800227c:	430b      	orrs	r3, r1
 800227e:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002280:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002282:	069b      	lsls	r3, r3, #26
 8002284:	d506      	bpl.n	8002294 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002286:	6802      	ldr	r2, [r0, #0]
 8002288:	6893      	ldr	r3, [r2, #8]
 800228a:	4918      	ldr	r1, [pc, #96]	; (80022ec <UART_AdvFeatureConfig+0xd0>)
 800228c:	400b      	ands	r3, r1
 800228e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002290:	430b      	orrs	r3, r1
 8002292:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002294:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002296:	065b      	lsls	r3, r3, #25
 8002298:	d50b      	bpl.n	80022b2 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800229a:	6802      	ldr	r2, [r0, #0]
 800229c:	6853      	ldr	r3, [r2, #4]
 800229e:	4914      	ldr	r1, [pc, #80]	; (80022f0 <UART_AdvFeatureConfig+0xd4>)
 80022a0:	400b      	ands	r3, r1
 80022a2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80022a4:	430b      	orrs	r3, r1
 80022a6:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	035b      	lsls	r3, r3, #13
 80022ac:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d00a      	beq.n	80022c8 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80022b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80022b4:	061b      	lsls	r3, r3, #24
 80022b6:	d506      	bpl.n	80022c6 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80022b8:	6802      	ldr	r2, [r0, #0]
 80022ba:	6853      	ldr	r3, [r2, #4]
 80022bc:	490d      	ldr	r1, [pc, #52]	; (80022f4 <UART_AdvFeatureConfig+0xd8>)
 80022be:	400b      	ands	r3, r1
 80022c0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80022c2:	430b      	orrs	r3, r1
 80022c4:	6053      	str	r3, [r2, #4]
}
 80022c6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80022c8:	6802      	ldr	r2, [r0, #0]
 80022ca:	6853      	ldr	r3, [r2, #4]
 80022cc:	490a      	ldr	r1, [pc, #40]	; (80022f8 <UART_AdvFeatureConfig+0xdc>)
 80022ce:	400b      	ands	r3, r1
 80022d0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80022d2:	430b      	orrs	r3, r1
 80022d4:	6053      	str	r3, [r2, #4]
 80022d6:	e7ec      	b.n	80022b2 <UART_AdvFeatureConfig+0x96>
 80022d8:	fffdffff 	.word	0xfffdffff
 80022dc:	fffeffff 	.word	0xfffeffff
 80022e0:	fffbffff 	.word	0xfffbffff
 80022e4:	ffff7fff 	.word	0xffff7fff
 80022e8:	ffffefff 	.word	0xffffefff
 80022ec:	ffffdfff 	.word	0xffffdfff
 80022f0:	ffefffff 	.word	0xffefffff
 80022f4:	fff7ffff 	.word	0xfff7ffff
 80022f8:	ff9fffff 	.word	0xff9fffff

080022fc <UART_WaitOnFlagUntilTimeout>:
{
 80022fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fe:	46c6      	mov	lr, r8
 8002300:	b500      	push	{lr}
 8002302:	0006      	movs	r6, r0
 8002304:	000c      	movs	r4, r1
 8002306:	0017      	movs	r7, r2
 8002308:	4698      	mov	r8, r3
 800230a:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800230c:	6833      	ldr	r3, [r6, #0]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	4023      	ands	r3, r4
 8002312:	1b1b      	subs	r3, r3, r4
 8002314:	425a      	negs	r2, r3
 8002316:	4153      	adcs	r3, r2
 8002318:	42bb      	cmp	r3, r7
 800231a:	d11c      	bne.n	8002356 <UART_WaitOnFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800231c:	1c6b      	adds	r3, r5, #1
 800231e:	d0f5      	beq.n	800230c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002320:	f7fe f8c6 	bl	80004b0 <HAL_GetTick>
 8002324:	4643      	mov	r3, r8
 8002326:	1ac0      	subs	r0, r0, r3
 8002328:	42a8      	cmp	r0, r5
 800232a:	d801      	bhi.n	8002330 <UART_WaitOnFlagUntilTimeout+0x34>
 800232c:	2d00      	cmp	r5, #0
 800232e:	d1ed      	bne.n	800230c <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002330:	6832      	ldr	r2, [r6, #0]
 8002332:	6813      	ldr	r3, [r2, #0]
 8002334:	490a      	ldr	r1, [pc, #40]	; (8002360 <UART_WaitOnFlagUntilTimeout+0x64>)
 8002336:	400b      	ands	r3, r1
 8002338:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800233a:	6832      	ldr	r2, [r6, #0]
 800233c:	6893      	ldr	r3, [r2, #8]
 800233e:	31a3      	adds	r1, #163	; 0xa3
 8002340:	31ff      	adds	r1, #255	; 0xff
 8002342:	438b      	bics	r3, r1
 8002344:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002346:	2320      	movs	r3, #32
 8002348:	6773      	str	r3, [r6, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800234a:	67b3      	str	r3, [r6, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800234c:	3350      	adds	r3, #80	; 0x50
 800234e:	2200      	movs	r2, #0
 8002350:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8002352:	2003      	movs	r0, #3
 8002354:	e000      	b.n	8002358 <UART_WaitOnFlagUntilTimeout+0x5c>
  return HAL_OK;
 8002356:	2000      	movs	r0, #0
}
 8002358:	bc04      	pop	{r2}
 800235a:	4690      	mov	r8, r2
 800235c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	fffffe5f 	.word	0xfffffe5f

08002364 <HAL_UART_Transmit>:
{
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002366:	b085      	sub	sp, #20
 8002368:	0004      	movs	r4, r0
 800236a:	000e      	movs	r6, r1
 800236c:	0017      	movs	r7, r2
 800236e:	001d      	movs	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002370:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002372:	2b20      	cmp	r3, #32
 8002374:	d15f      	bne.n	8002436 <HAL_UART_Transmit+0xd2>
    if ((pData == NULL) || (Size == 0U))
 8002376:	2900      	cmp	r1, #0
 8002378:	d060      	beq.n	800243c <HAL_UART_Transmit+0xd8>
 800237a:	2a00      	cmp	r2, #0
 800237c:	d060      	beq.n	8002440 <HAL_UART_Transmit+0xdc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	015b      	lsls	r3, r3, #5
 8002382:	6882      	ldr	r2, [r0, #8]
 8002384:	429a      	cmp	r2, r3
 8002386:	d018      	beq.n	80023ba <HAL_UART_Transmit+0x56>
    __HAL_LOCK(huart);
 8002388:	2370      	movs	r3, #112	; 0x70
 800238a:	5ce3      	ldrb	r3, [r4, r3]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d059      	beq.n	8002444 <HAL_UART_Transmit+0xe0>
 8002390:	2370      	movs	r3, #112	; 0x70
 8002392:	2201      	movs	r2, #1
 8002394:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002396:	2300      	movs	r3, #0
 8002398:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800239a:	3321      	adds	r3, #33	; 0x21
 800239c:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 800239e:	f7fe f887 	bl	80004b0 <HAL_GetTick>
 80023a2:	9003      	str	r0, [sp, #12]
    huart->TxXferSize  = Size;
 80023a4:	2350      	movs	r3, #80	; 0x50
 80023a6:	52e7      	strh	r7, [r4, r3]
    huart->TxXferCount = Size;
 80023a8:	3302      	adds	r3, #2
 80023aa:	52e7      	strh	r7, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	015b      	lsls	r3, r3, #5
 80023b0:	68a2      	ldr	r2, [r4, #8]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d008      	beq.n	80023c8 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 80023b6:	2700      	movs	r7, #0
 80023b8:	e016      	b.n	80023e8 <HAL_UART_Transmit+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023ba:	6903      	ldr	r3, [r0, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d1e3      	bne.n	8002388 <HAL_UART_Transmit+0x24>
      if ((((uint32_t)pData) & 1) != 0)
 80023c0:	07cb      	lsls	r3, r1, #31
 80023c2:	d5e1      	bpl.n	8002388 <HAL_UART_Transmit+0x24>
        return  HAL_ERROR;
 80023c4:	2001      	movs	r0, #1
 80023c6:	e037      	b.n	8002438 <HAL_UART_Transmit+0xd4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c8:	6923      	ldr	r3, [r4, #16]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d021      	beq.n	8002412 <HAL_UART_Transmit+0xae>
      pdata16bits = NULL;
 80023ce:	2700      	movs	r7, #0
 80023d0:	e00a      	b.n	80023e8 <HAL_UART_Transmit+0x84>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023d2:	883b      	ldrh	r3, [r7, #0]
 80023d4:	6822      	ldr	r2, [r4, #0]
 80023d6:	05db      	lsls	r3, r3, #23
 80023d8:	0ddb      	lsrs	r3, r3, #23
 80023da:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 80023dc:	3702      	adds	r7, #2
      huart->TxXferCount--;
 80023de:	2252      	movs	r2, #82	; 0x52
 80023e0:	5aa3      	ldrh	r3, [r4, r2]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	52a3      	strh	r3, [r4, r2]
    while (huart->TxXferCount > 0U)
 80023e8:	2352      	movs	r3, #82	; 0x52
 80023ea:	5ae3      	ldrh	r3, [r4, r3]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d012      	beq.n	8002418 <HAL_UART_Transmit+0xb4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023f2:	9500      	str	r5, [sp, #0]
 80023f4:	9b03      	ldr	r3, [sp, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	2180      	movs	r1, #128	; 0x80
 80023fa:	0020      	movs	r0, r4
 80023fc:	f7ff ff7e 	bl	80022fc <UART_WaitOnFlagUntilTimeout>
 8002400:	2800      	cmp	r0, #0
 8002402:	d121      	bne.n	8002448 <HAL_UART_Transmit+0xe4>
      if (pdata8bits == NULL)
 8002404:	2e00      	cmp	r6, #0
 8002406:	d0e4      	beq.n	80023d2 <HAL_UART_Transmit+0x6e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002408:	7832      	ldrb	r2, [r6, #0]
 800240a:	6823      	ldr	r3, [r4, #0]
 800240c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800240e:	3601      	adds	r6, #1
 8002410:	e7e5      	b.n	80023de <HAL_UART_Transmit+0x7a>
      pdata16bits = (uint16_t *) pData;
 8002412:	0037      	movs	r7, r6
      pdata8bits  = NULL;
 8002414:	2600      	movs	r6, #0
 8002416:	e7e7      	b.n	80023e8 <HAL_UART_Transmit+0x84>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002418:	9500      	str	r5, [sp, #0]
 800241a:	9b03      	ldr	r3, [sp, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	2140      	movs	r1, #64	; 0x40
 8002420:	0020      	movs	r0, r4
 8002422:	f7ff ff6b 	bl	80022fc <UART_WaitOnFlagUntilTimeout>
 8002426:	2800      	cmp	r0, #0
 8002428:	d110      	bne.n	800244c <HAL_UART_Transmit+0xe8>
    huart->gState = HAL_UART_STATE_READY;
 800242a:	2320      	movs	r3, #32
 800242c:	6763      	str	r3, [r4, #116]	; 0x74
    __HAL_UNLOCK(huart);
 800242e:	3350      	adds	r3, #80	; 0x50
 8002430:	2200      	movs	r2, #0
 8002432:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8002434:	e000      	b.n	8002438 <HAL_UART_Transmit+0xd4>
    return HAL_BUSY;
 8002436:	2002      	movs	r0, #2
}
 8002438:	b005      	add	sp, #20
 800243a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 800243c:	2001      	movs	r0, #1
 800243e:	e7fb      	b.n	8002438 <HAL_UART_Transmit+0xd4>
 8002440:	2001      	movs	r0, #1
 8002442:	e7f9      	b.n	8002438 <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 8002444:	2002      	movs	r0, #2
 8002446:	e7f7      	b.n	8002438 <HAL_UART_Transmit+0xd4>
        return HAL_TIMEOUT;
 8002448:	2003      	movs	r0, #3
 800244a:	e7f5      	b.n	8002438 <HAL_UART_Transmit+0xd4>
      return HAL_TIMEOUT;
 800244c:	2003      	movs	r0, #3
 800244e:	e7f3      	b.n	8002438 <HAL_UART_Transmit+0xd4>

08002450 <UART_CheckIdleState>:
{
 8002450:	b530      	push	{r4, r5, lr}
 8002452:	b083      	sub	sp, #12
 8002454:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002456:	2300      	movs	r3, #0
 8002458:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800245a:	f7fe f829 	bl	80004b0 <HAL_GetTick>
 800245e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	071b      	lsls	r3, r3, #28
 8002466:	d40c      	bmi.n	8002482 <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	075b      	lsls	r3, r3, #29
 800246e:	d415      	bmi.n	800249c <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8002470:	2320      	movs	r3, #32
 8002472:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002474:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002476:	3350      	adds	r3, #80	; 0x50
 8002478:	2200      	movs	r2, #0
 800247a:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800247c:	2000      	movs	r0, #0
}
 800247e:	b003      	add	sp, #12
 8002480:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002482:	2180      	movs	r1, #128	; 0x80
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <UART_CheckIdleState+0x68>)
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	0003      	movs	r3, r0
 800248a:	2200      	movs	r2, #0
 800248c:	0389      	lsls	r1, r1, #14
 800248e:	0020      	movs	r0, r4
 8002490:	f7ff ff34 	bl	80022fc <UART_WaitOnFlagUntilTimeout>
 8002494:	2800      	cmp	r0, #0
 8002496:	d0e7      	beq.n	8002468 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002498:	2003      	movs	r0, #3
 800249a:	e7f0      	b.n	800247e <UART_CheckIdleState+0x2e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <UART_CheckIdleState+0x68>)
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	002b      	movs	r3, r5
 80024a4:	2200      	movs	r2, #0
 80024a6:	03c9      	lsls	r1, r1, #15
 80024a8:	0020      	movs	r0, r4
 80024aa:	f7ff ff27 	bl	80022fc <UART_WaitOnFlagUntilTimeout>
 80024ae:	2800      	cmp	r0, #0
 80024b0:	d0de      	beq.n	8002470 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 80024b2:	2003      	movs	r0, #3
 80024b4:	e7e3      	b.n	800247e <UART_CheckIdleState+0x2e>
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	01ffffff 	.word	0x01ffffff

080024bc <HAL_UART_Init>:
{
 80024bc:	b510      	push	{r4, lr}
 80024be:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80024c0:	d02e      	beq.n	8002520 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80024c2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d021      	beq.n	800250c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80024c8:	2324      	movs	r3, #36	; 0x24
 80024ca:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80024cc:	6822      	ldr	r2, [r4, #0]
 80024ce:	6813      	ldr	r3, [r2, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	438b      	bics	r3, r1
 80024d4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024d6:	0020      	movs	r0, r4
 80024d8:	f7ff fcde 	bl	8001e98 <UART_SetConfig>
 80024dc:	2801      	cmp	r0, #1
 80024de:	d014      	beq.n	800250a <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d118      	bne.n	8002518 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e6:	6822      	ldr	r2, [r4, #0]
 80024e8:	6853      	ldr	r3, [r2, #4]
 80024ea:	490e      	ldr	r1, [pc, #56]	; (8002524 <HAL_UART_Init+0x68>)
 80024ec:	400b      	ands	r3, r1
 80024ee:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024f0:	6822      	ldr	r2, [r4, #0]
 80024f2:	6893      	ldr	r3, [r2, #8]
 80024f4:	212a      	movs	r1, #42	; 0x2a
 80024f6:	438b      	bics	r3, r1
 80024f8:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80024fa:	6822      	ldr	r2, [r4, #0]
 80024fc:	6813      	ldr	r3, [r2, #0]
 80024fe:	3929      	subs	r1, #41	; 0x29
 8002500:	430b      	orrs	r3, r1
 8002502:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002504:	0020      	movs	r0, r4
 8002506:	f7ff ffa3 	bl	8002450 <UART_CheckIdleState>
}
 800250a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800250c:	3370      	adds	r3, #112	; 0x70
 800250e:	2200      	movs	r2, #0
 8002510:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8002512:	f000 fcbd 	bl	8002e90 <HAL_UART_MspInit>
 8002516:	e7d7      	b.n	80024c8 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8002518:	0020      	movs	r0, r4
 800251a:	f7ff fe7f 	bl	800221c <UART_AdvFeatureConfig>
 800251e:	e7e2      	b.n	80024e6 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8002520:	2001      	movs	r0, #1
 8002522:	e7f2      	b.n	800250a <HAL_UART_Init+0x4e>
 8002524:	ffffb7ff 	.word	0xffffb7ff

08002528 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002528:	4770      	bx	lr
	...

0800252c <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800252c:	b510      	push	{r4, lr}
 800252e:	b082      	sub	sp, #8
  ADC_ChannelConfTypeDef sConfig = {0};
 8002530:	2208      	movs	r2, #8
 8002532:	2100      	movs	r1, #0
 8002534:	4668      	mov	r0, sp
 8002536:	f000 fda8 	bl	800308a <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800253a:	481c      	ldr	r0, [pc, #112]	; (80025ac <MX_ADC_Init+0x80>)
 800253c:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <MX_ADC_Init+0x84>)
 800253e:	6003      	str	r3, [r0, #0]
  hadc.Init.OversamplingMode = ENABLE;
 8002540:	2201      	movs	r2, #1
 8002542:	63c2      	str	r2, [r0, #60]	; 0x3c
  hadc.Init.Oversample.Ratio = ADC_OVERSAMPLING_RATIO_4;
 8002544:	2104      	movs	r1, #4
 8002546:	6401      	str	r1, [r0, #64]	; 0x40
  hadc.Init.Oversample.RightBitShift = ADC_RIGHTBITSHIFT_2;
 8002548:	2340      	movs	r3, #64	; 0x40
 800254a:	6443      	str	r3, [r0, #68]	; 0x44
  hadc.Init.Oversample.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800254c:	2300      	movs	r3, #0
 800254e:	6483      	str	r3, [r0, #72]	; 0x48
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002550:	2480      	movs	r4, #128	; 0x80
 8002552:	05e4      	lsls	r4, r4, #23
 8002554:	6044      	str	r4, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002556:	6083      	str	r3, [r0, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_39CYCLES_5;
 8002558:	2405      	movs	r4, #5
 800255a:	6384      	str	r4, [r0, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800255c:	6102      	str	r2, [r0, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800255e:	60c3      	str	r3, [r0, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002560:	341b      	adds	r4, #27
 8002562:	5503      	strb	r3, [r0, r4]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002564:	3401      	adds	r4, #1
 8002566:	5503      	strb	r3, [r0, r4]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002568:	2480      	movs	r4, #128	; 0x80
 800256a:	00e4      	lsls	r4, r4, #3
 800256c:	6284      	str	r4, [r0, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800256e:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = ENABLE;
 8002570:	242c      	movs	r4, #44	; 0x2c
 8002572:	5502      	strb	r2, [r0, r4]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002574:	6141      	str	r1, [r0, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002576:	6303      	str	r3, [r0, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002578:	6183      	str	r3, [r0, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800257a:	6343      	str	r3, [r0, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800257c:	61c3      	str	r3, [r0, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800257e:	f7fd ffff 	bl	8000580 <HAL_ADC_Init>
 8002582:	2800      	cmp	r0, #0
 8002584:	d10c      	bne.n	80025a0 <MX_ADC_Init+0x74>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002586:	2301      	movs	r3, #1
 8002588:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	015b      	lsls	r3, r3, #5
 800258e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002590:	4669      	mov	r1, sp
 8002592:	4806      	ldr	r0, [pc, #24]	; (80025ac <MX_ADC_Init+0x80>)
 8002594:	f7fe f98c 	bl	80008b0 <HAL_ADC_ConfigChannel>
 8002598:	2800      	cmp	r0, #0
 800259a:	d104      	bne.n	80025a6 <MX_ADC_Init+0x7a>
  {
    Error_Handler();
  }

}
 800259c:	b002      	add	sp, #8
 800259e:	bd10      	pop	{r4, pc}
    Error_Handler();
 80025a0:	f000 fb48 	bl	8002c34 <Error_Handler>
 80025a4:	e7ef      	b.n	8002586 <MX_ADC_Init+0x5a>
    Error_Handler();
 80025a6:	f000 fb45 	bl	8002c34 <Error_Handler>
}
 80025aa:	e7f7      	b.n	800259c <MX_ADC_Init+0x70>
 80025ac:	200002f4 	.word	0x200002f4
 80025b0:	40012400 	.word	0x40012400

080025b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80025b4:	b510      	push	{r4, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ba:	2214      	movs	r2, #20
 80025bc:	2100      	movs	r1, #0
 80025be:	a801      	add	r0, sp, #4
 80025c0:	f000 fd63 	bl	800308a <memset>
  if(adcHandle->Instance==ADC1)
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_ADC_MspInit+0x80>)
 80025c6:	6822      	ldr	r2, [r4, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d001      	beq.n	80025d0 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80025cc:	b006      	add	sp, #24
 80025ce:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025d0:	4b19      	ldr	r3, [pc, #100]	; (8002638 <HAL_ADC_MspInit+0x84>)
 80025d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025d4:	2280      	movs	r2, #128	; 0x80
 80025d6:	0092      	lsls	r2, r2, #2
 80025d8:	430a      	orrs	r2, r1
 80025da:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025de:	2201      	movs	r2, #1
 80025e0:	4311      	orrs	r1, r2
 80025e2:	62d9      	str	r1, [r3, #44]	; 0x2c
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	4013      	ands	r3, r2
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025ec:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ee:	2303      	movs	r3, #3
 80025f0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	20a0      	movs	r0, #160	; 0xa0
 80025f4:	a901      	add	r1, sp, #4
 80025f6:	05c0      	lsls	r0, r0, #23
 80025f8:	f7fe fbbe 	bl	8000d78 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 80025fc:	480f      	ldr	r0, [pc, #60]	; (800263c <HAL_ADC_MspInit+0x88>)
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <HAL_ADC_MspInit+0x8c>)
 8002600:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 8002602:	2300      	movs	r3, #0
 8002604:	6043      	str	r3, [r0, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002606:	6083      	str	r3, [r0, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002608:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	6102      	str	r2, [r0, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800260e:	3280      	adds	r2, #128	; 0x80
 8002610:	6142      	str	r2, [r0, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002612:	2280      	movs	r2, #128	; 0x80
 8002614:	00d2      	lsls	r2, r2, #3
 8002616:	6182      	str	r2, [r0, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002618:	2220      	movs	r2, #32
 800261a:	61c2      	str	r2, [r0, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800261c:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800261e:	f7fe fa79 	bl	8000b14 <HAL_DMA_Init>
 8002622:	2800      	cmp	r0, #0
 8002624:	d103      	bne.n	800262e <HAL_ADC_MspInit+0x7a>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_ADC_MspInit+0x88>)
 8002628:	64e3      	str	r3, [r4, #76]	; 0x4c
 800262a:	629c      	str	r4, [r3, #40]	; 0x28
}
 800262c:	e7ce      	b.n	80025cc <HAL_ADC_MspInit+0x18>
      Error_Handler();
 800262e:	f000 fb01 	bl	8002c34 <Error_Handler>
 8002632:	e7f8      	b.n	8002626 <HAL_ADC_MspInit+0x72>
 8002634:	40012400 	.word	0x40012400
 8002638:	40021000 	.word	0x40021000
 800263c:	200002ac 	.word	0x200002ac
 8002640:	40020008 	.word	0x40020008

08002644 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002644:	b500      	push	{lr}
 8002646:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002648:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <MX_DMA_Init+0x3c>)
 800264a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800264c:	2301      	movs	r3, #1
 800264e:	4319      	orrs	r1, r3
 8002650:	6311      	str	r1, [r2, #48]	; 0x30
 8002652:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002654:	4013      	ands	r3, r2
 8002656:	9301      	str	r3, [sp, #4]
 8002658:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	2009      	movs	r0, #9
 8002660:	f7fe f9ea 	bl	8000a38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002664:	2009      	movs	r0, #9
 8002666:	f7fe fa17 	bl	8000a98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	200a      	movs	r0, #10
 8002670:	f7fe f9e2 	bl	8000a38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002674:	200a      	movs	r0, #10
 8002676:	f7fe fa0f 	bl	8000a98 <HAL_NVIC_EnableIRQ>

}
 800267a:	b003      	add	sp, #12
 800267c:	bd00      	pop	{pc}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	40021000 	.word	0x40021000

08002684 <NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002684:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <NVIC_SystemReset+0x14>)
 800268a:	4a04      	ldr	r2, [pc, #16]	; (800269c <NVIC_SystemReset+0x18>)
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	e7fd      	b.n	8002692 <NVIC_SystemReset+0xe>
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	e000ed00 	.word	0xe000ed00
 800269c:	05fa0004 	.word	0x05fa0004

080026a0 <disable_passthrough>:
	clean_rx_buffer();
}



static void disable_passthrough(){
 80026a0:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&ESP_UART, (uint8_t*) "+++", 3, HAL_MAX_DELAY);
 80026a2:	2301      	movs	r3, #1
 80026a4:	4c09      	ldr	r4, [pc, #36]	; (80026cc <disable_passthrough+0x2c>)
 80026a6:	425b      	negs	r3, r3
 80026a8:	2203      	movs	r2, #3
 80026aa:	4909      	ldr	r1, [pc, #36]	; (80026d0 <disable_passthrough+0x30>)
 80026ac:	0020      	movs	r0, r4
 80026ae:	f7ff fe59 	bl	8002364 <HAL_UART_Transmit>
	HAL_UART_Abort(&ESP_UART);
 80026b2:	0020      	movs	r0, r4
 80026b4:	f7ff fa78 	bl	8001ba8 <HAL_UART_Abort>
	HAL_UART_Receive_IT(&huart1, rx_buffer, RX_BUFFER_SIZE);
 80026b8:	2264      	movs	r2, #100	; 0x64
 80026ba:	4906      	ldr	r1, [pc, #24]	; (80026d4 <disable_passthrough+0x34>)
 80026bc:	0020      	movs	r0, r4
 80026be:	f7ff f9f3 	bl	8001aa8 <HAL_UART_Receive_IT>
	HAL_Delay(1100);
 80026c2:	4805      	ldr	r0, [pc, #20]	; (80026d8 <disable_passthrough+0x38>)
 80026c4:	f7fd fefa 	bl	80004bc <HAL_Delay>
}
 80026c8:	bd10      	pop	{r4, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	20000420 	.word	0x20000420
 80026d0:	080034cc 	.word	0x080034cc
 80026d4:	200001f4 	.word	0x200001f4
 80026d8:	0000044c 	.word	0x0000044c

080026dc <clean_rx_buffer>:
static void clean_rx_buffer(){
 80026dc:	b510      	push	{r4, lr}
	memset(rx_buffer, ' ', RX_BUFFER_SIZE);
 80026de:	2264      	movs	r2, #100	; 0x64
 80026e0:	2120      	movs	r1, #32
 80026e2:	4802      	ldr	r0, [pc, #8]	; (80026ec <clean_rx_buffer+0x10>)
 80026e4:	f000 fcd1 	bl	800308a <memset>
}
 80026e8:	bd10      	pop	{r4, pc}
 80026ea:	46c0      	nop			; (mov r8, r8)
 80026ec:	200001f4 	.word	0x200001f4

080026f0 <send_command>:
static void send_command(const char* data){
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	0005      	movs	r5, r0
	strcpy((char*)tx_buffer, data);
 80026f4:	4e12      	ldr	r6, [pc, #72]	; (8002740 <send_command+0x50>)
 80026f6:	0034      	movs	r4, r6
 80026f8:	3464      	adds	r4, #100	; 0x64
 80026fa:	0001      	movs	r1, r0
 80026fc:	0020      	movs	r0, r4
 80026fe:	f000 fd95 	bl	800322c <strcpy>
	strcat((char*)tx_buffer, "\r\n");
 8002702:	0020      	movs	r0, r4
 8002704:	f7fd fd00 	bl	8000108 <strlen>
 8002708:	1820      	adds	r0, r4, r0
 800270a:	2203      	movs	r2, #3
 800270c:	490d      	ldr	r1, [pc, #52]	; (8002744 <send_command+0x54>)
 800270e:	f000 fcb3 	bl	8003078 <memcpy>
	HAL_UART_Transmit(&ESP_UART, tx_buffer, strlen(data)+2, HAL_MAX_DELAY);
 8002712:	0028      	movs	r0, r5
 8002714:	f7fd fcf8 	bl	8000108 <strlen>
 8002718:	2301      	movs	r3, #1
 800271a:	3002      	adds	r0, #2
 800271c:	b282      	uxth	r2, r0
 800271e:	4d0a      	ldr	r5, [pc, #40]	; (8002748 <send_command+0x58>)
 8002720:	425b      	negs	r3, r3
 8002722:	0021      	movs	r1, r4
 8002724:	0028      	movs	r0, r5
 8002726:	f7ff fe1d 	bl	8002364 <HAL_UART_Transmit>
	HAL_UART_Abort(&ESP_UART);
 800272a:	0028      	movs	r0, r5
 800272c:	f7ff fa3c 	bl	8001ba8 <HAL_UART_Abort>
	HAL_UART_Receive_IT(&huart1, rx_buffer, RX_BUFFER_SIZE);
 8002730:	2264      	movs	r2, #100	; 0x64
 8002732:	0031      	movs	r1, r6
 8002734:	0028      	movs	r0, r5
 8002736:	f7ff f9b7 	bl	8001aa8 <HAL_UART_Receive_IT>
	clean_rx_buffer();
 800273a:	f7ff ffcf 	bl	80026dc <clean_rx_buffer>
}
 800273e:	bd70      	pop	{r4, r5, r6, pc}
 8002740:	200001f4 	.word	0x200001f4
 8002744:	080034d0 	.word	0x080034d0
 8002748:	20000420 	.word	0x20000420

0800274c <search_rx_buffer>:
static _Bool search_rx_buffer(const char *str){
 800274c:	b510      	push	{r4, lr}
 800274e:	0001      	movs	r1, r0
	return NULL != strstr((const char*)rx_buffer, str);
 8002750:	4803      	ldr	r0, [pc, #12]	; (8002760 <search_rx_buffer+0x14>)
 8002752:	f000 fd73 	bl	800323c <strstr>
 8002756:	1e43      	subs	r3, r0, #1
 8002758:	4198      	sbcs	r0, r3
 800275a:	b2c0      	uxtb	r0, r0
}
 800275c:	bd10      	pop	{r4, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	200001f4 	.word	0x200001f4

08002764 <wait_for_response>:
static void wait_for_response(const char* response, uint16_t timeout_ms){
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	0005      	movs	r5, r0
 8002768:	0008      	movs	r0, r1
	Task time_out_task = task_make(timeout_ms, (void*)NVIC_SystemReset);
 800276a:	490a      	ldr	r1, [pc, #40]	; (8002794 <wait_for_response+0x30>)
 800276c:	f000 faf8 	bl	8002d60 <task_make>
 8002770:	0004      	movs	r4, r0
	task_start(time_out_task);
 8002772:	f000 fb27 	bl	8002dc4 <task_start>
	while(!search_rx_buffer(response) && !task_state(time_out_task, NULL));
 8002776:	0028      	movs	r0, r5
 8002778:	f7ff ffe8 	bl	800274c <search_rx_buffer>
 800277c:	2800      	cmp	r0, #0
 800277e:	d105      	bne.n	800278c <wait_for_response+0x28>
 8002780:	2100      	movs	r1, #0
 8002782:	0020      	movs	r0, r4
 8002784:	f000 fafd 	bl	8002d82 <task_state>
 8002788:	2800      	cmp	r0, #0
 800278a:	d0f4      	beq.n	8002776 <wait_for_response+0x12>
	task_destroy(time_out_task);	//Uwaga! nie testowane
 800278c:	0020      	movs	r0, r4
 800278e:	f000 fb1c 	bl	8002dca <task_destroy>
}
 8002792:	bd70      	pop	{r4, r5, r6, pc}
 8002794:	08002685 	.word	0x08002685

08002798 <connect_to_server>:
	send_command("AT+CIPSEND");
	wait_for_response(">", 200);
	esp_status = Passthrough;
}

static void connect_to_server(){
 8002798:	b510      	push	{r4, lr}
	send_command("AT+CIPSTART=\"TCP\",\"192.168.0.143\",1337");
 800279a:	4806      	ldr	r0, [pc, #24]	; (80027b4 <connect_to_server+0x1c>)
 800279c:	f7ff ffa8 	bl	80026f0 <send_command>
	wait_for_response("OK", 1000);
 80027a0:	21fa      	movs	r1, #250	; 0xfa
 80027a2:	0089      	lsls	r1, r1, #2
 80027a4:	4804      	ldr	r0, [pc, #16]	; (80027b8 <connect_to_server+0x20>)
 80027a6:	f7ff ffdd 	bl	8002764 <wait_for_response>
	esp_status = Server_Connected;
 80027aa:	4b04      	ldr	r3, [pc, #16]	; (80027bc <connect_to_server+0x24>)
 80027ac:	2203      	movs	r2, #3
 80027ae:	701a      	strb	r2, [r3, #0]
}
 80027b0:	bd10      	pop	{r4, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	080034d4 	.word	0x080034d4
 80027b8:	080034fc 	.word	0x080034fc
 80027bc:	20000350 	.word	0x20000350

080027c0 <enable_passthrough>:
static void enable_passthrough(){
 80027c0:	b510      	push	{r4, lr}
	send_command("AT+CIPMODE=1");
 80027c2:	4807      	ldr	r0, [pc, #28]	; (80027e0 <enable_passthrough+0x20>)
 80027c4:	f7ff ff94 	bl	80026f0 <send_command>
	send_command("AT+CIPSEND");
 80027c8:	4806      	ldr	r0, [pc, #24]	; (80027e4 <enable_passthrough+0x24>)
 80027ca:	f7ff ff91 	bl	80026f0 <send_command>
	wait_for_response(">", 200);
 80027ce:	21c8      	movs	r1, #200	; 0xc8
 80027d0:	4805      	ldr	r0, [pc, #20]	; (80027e8 <enable_passthrough+0x28>)
 80027d2:	f7ff ffc7 	bl	8002764 <wait_for_response>
	esp_status = Passthrough;
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <enable_passthrough+0x2c>)
 80027d8:	2204      	movs	r2, #4
 80027da:	701a      	strb	r2, [r3, #0]
}
 80027dc:	bd10      	pop	{r4, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	08003500 	.word	0x08003500
 80027e4:	08003510 	.word	0x08003510
 80027e8:	0800351c 	.word	0x0800351c
 80027ec:	20000350 	.word	0x20000350

080027f0 <set_esp_status>:



static void set_esp_status(){
 80027f0:	b510      	push	{r4, lr}
	send_command("AT+CIPSTATUS");
 80027f2:	4814      	ldr	r0, [pc, #80]	; (8002844 <set_esp_status+0x54>)
 80027f4:	f7ff ff7c 	bl	80026f0 <send_command>
	wait_for_response("OK", 1000);
 80027f8:	21fa      	movs	r1, #250	; 0xfa
 80027fa:	0089      	lsls	r1, r1, #2
 80027fc:	4812      	ldr	r0, [pc, #72]	; (8002848 <set_esp_status+0x58>)
 80027fe:	f7ff ffb1 	bl	8002764 <wait_for_response>
	if (search_rx_buffer("STATUS:2") || search_rx_buffer("STATUS:4"))
 8002802:	4812      	ldr	r0, [pc, #72]	; (800284c <set_esp_status+0x5c>)
 8002804:	f7ff ffa2 	bl	800274c <search_rx_buffer>
 8002808:	2800      	cmp	r0, #0
 800280a:	d112      	bne.n	8002832 <set_esp_status+0x42>
 800280c:	4810      	ldr	r0, [pc, #64]	; (8002850 <set_esp_status+0x60>)
 800280e:	f7ff ff9d 	bl	800274c <search_rx_buffer>
 8002812:	2800      	cmp	r0, #0
 8002814:	d10d      	bne.n	8002832 <set_esp_status+0x42>
		esp_status = AP_Connected;
	else if (search_rx_buffer("STATUS:3"))
 8002816:	480f      	ldr	r0, [pc, #60]	; (8002854 <set_esp_status+0x64>)
 8002818:	f7ff ff98 	bl	800274c <search_rx_buffer>
 800281c:	2800      	cmp	r0, #0
 800281e:	d10c      	bne.n	800283a <set_esp_status+0x4a>
		esp_status = Server_Connected;
	else if (search_rx_buffer("STATUS:5"))
 8002820:	480d      	ldr	r0, [pc, #52]	; (8002858 <set_esp_status+0x68>)
 8002822:	f7ff ff93 	bl	800274c <search_rx_buffer>
 8002826:	2800      	cmp	r0, #0
 8002828:	d006      	beq.n	8002838 <set_esp_status+0x48>
		esp_status = AP_Disconnected;
 800282a:	4b0c      	ldr	r3, [pc, #48]	; (800285c <set_esp_status+0x6c>)
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
}
 8002830:	e002      	b.n	8002838 <set_esp_status+0x48>
		esp_status = AP_Connected;
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <set_esp_status+0x6c>)
 8002834:	2202      	movs	r2, #2
 8002836:	701a      	strb	r2, [r3, #0]
}
 8002838:	bd10      	pop	{r4, pc}
		esp_status = Server_Connected;
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <set_esp_status+0x6c>)
 800283c:	2203      	movs	r2, #3
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e7fa      	b.n	8002838 <set_esp_status+0x48>
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	08003520 	.word	0x08003520
 8002848:	080034fc 	.word	0x080034fc
 800284c:	08003530 	.word	0x08003530
 8002850:	0800353c 	.word	0x0800353c
 8002854:	08003548 	.word	0x08003548
 8002858:	08003554 	.word	0x08003554
 800285c:	20000350 	.word	0x20000350

08002860 <pair_device>:

static void pair_device(){
 8002860:	b500      	push	{lr}
 8002862:	b087      	sub	sp, #28
	char buffer[20];
	itoa((device_id*10000 + PAIRING), buffer, 10);
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <pair_device+0x24>)
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	4807      	ldr	r0, [pc, #28]	; (8002888 <pair_device+0x28>)
 800286a:	4358      	muls	r0, r3
 800286c:	4b07      	ldr	r3, [pc, #28]	; (800288c <pair_device+0x2c>)
 800286e:	469c      	mov	ip, r3
 8002870:	4460      	add	r0, ip
 8002872:	220a      	movs	r2, #10
 8002874:	a901      	add	r1, sp, #4
 8002876:	f000 fbe7 	bl	8003048 <itoa>
	send_command(buffer);
 800287a:	a801      	add	r0, sp, #4
 800287c:	f7ff ff38 	bl	80026f0 <send_command>
}
 8002880:	b007      	add	sp, #28
 8002882:	bd00      	pop	{pc}
 8002884:	20000274 	.word	0x20000274
 8002888:	00002710 	.word	0x00002710
 800288c:	0000270f 	.word	0x0000270f

08002890 <esp_power_on>:

void esp_set_id(uint32_t id){
	device_id = id;
}

void esp_power_on(){
 8002890:	b510      	push	{r4, lr}
	HAL_Delay(100);
 8002892:	2064      	movs	r0, #100	; 0x64
 8002894:	f7fd fe12 	bl	80004bc <HAL_Delay>
	ESP_PWR_GPIO_Port->BSRR = ESP_PWR_Pin;
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <esp_power_on+0x18>)
 800289a:	2280      	movs	r2, #128	; 0x80
 800289c:	619a      	str	r2, [r3, #24]
	HAL_Delay(3000);
 800289e:	4803      	ldr	r0, [pc, #12]	; (80028ac <esp_power_on+0x1c>)
 80028a0:	f7fd fe0c 	bl	80004bc <HAL_Delay>
}
 80028a4:	bd10      	pop	{r4, pc}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	50000800 	.word	0x50000800
 80028ac:	00000bb8 	.word	0x00000bb8

080028b0 <esp_send_data>:
void esp_restart(){
	ESP_PWR_GPIO_Port->BRR = ESP_PWR_Pin;
	esp_power_on();
}

void esp_send_data(const char* data){
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	0005      	movs	r5, r0
	strcpy((char*)tx_buffer, data);
 80028b4:	4c0c      	ldr	r4, [pc, #48]	; (80028e8 <esp_send_data+0x38>)
 80028b6:	3464      	adds	r4, #100	; 0x64
 80028b8:	0001      	movs	r1, r0
 80028ba:	0020      	movs	r0, r4
 80028bc:	f000 fcb6 	bl	800322c <strcpy>
	strcat((char*)tx_buffer, "\r\n");
 80028c0:	0020      	movs	r0, r4
 80028c2:	f7fd fc21 	bl	8000108 <strlen>
 80028c6:	1820      	adds	r0, r4, r0
 80028c8:	2203      	movs	r2, #3
 80028ca:	4908      	ldr	r1, [pc, #32]	; (80028ec <esp_send_data+0x3c>)
 80028cc:	f000 fbd4 	bl	8003078 <memcpy>
	HAL_UART_Transmit(&ESP_UART, tx_buffer, strlen(data)+2, HAL_MAX_DELAY);
 80028d0:	0028      	movs	r0, r5
 80028d2:	f7fd fc19 	bl	8000108 <strlen>
 80028d6:	2301      	movs	r3, #1
 80028d8:	3002      	adds	r0, #2
 80028da:	b282      	uxth	r2, r0
 80028dc:	425b      	negs	r3, r3
 80028de:	0021      	movs	r1, r4
 80028e0:	4803      	ldr	r0, [pc, #12]	; (80028f0 <esp_send_data+0x40>)
 80028e2:	f7ff fd3f 	bl	8002364 <HAL_UART_Transmit>
}
 80028e6:	bd70      	pop	{r4, r5, r6, pc}
 80028e8:	200001f4 	.word	0x200001f4
 80028ec:	080034d0 	.word	0x080034d0
 80028f0:	20000420 	.word	0x20000420

080028f4 <esp_initialize>:


void esp_initialize(){
 80028f4:	b510      	push	{r4, lr}

	if (esp_status == No_Status){
 80028f6:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <esp_initialize+0x40>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00c      	beq.n	8002918 <esp_initialize+0x24>
		disable_passthrough();
		set_esp_status();
	}
	if (esp_status == AP_Connected)
 80028fe:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <esp_initialize+0x40>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d00d      	beq.n	8002922 <esp_initialize+0x2e>
		connect_to_server();
	if (esp_status == Server_Connected)
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <esp_initialize+0x40>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d00c      	beq.n	8002928 <esp_initialize+0x34>
		enable_passthrough();
	if (esp_status == Passthrough)
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <esp_initialize+0x40>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b04      	cmp	r3, #4
 8002914:	d00b      	beq.n	800292e <esp_initialize+0x3a>
		pair_device();
	if (esp_status == AP_Disconnected){

	}

}
 8002916:	bd10      	pop	{r4, pc}
		disable_passthrough();
 8002918:	f7ff fec2 	bl	80026a0 <disable_passthrough>
		set_esp_status();
 800291c:	f7ff ff68 	bl	80027f0 <set_esp_status>
 8002920:	e7ed      	b.n	80028fe <esp_initialize+0xa>
		connect_to_server();
 8002922:	f7ff ff39 	bl	8002798 <connect_to_server>
 8002926:	e7ee      	b.n	8002906 <esp_initialize+0x12>
		enable_passthrough();
 8002928:	f7ff ff4a 	bl	80027c0 <enable_passthrough>
 800292c:	e7ef      	b.n	800290e <esp_initialize+0x1a>
		pair_device();
 800292e:	f7ff ff97 	bl	8002860 <pair_device>
}
 8002932:	e7f0      	b.n	8002916 <esp_initialize+0x22>
 8002934:	20000350 	.word	0x20000350

08002938 <esp_wps>:

void esp_wps(){
 8002938:	b510      	push	{r4, lr}
	LD2_GPIO_Port->BSRR = LD2_Pin;
 800293a:	23a0      	movs	r3, #160	; 0xa0
 800293c:	05db      	lsls	r3, r3, #23
 800293e:	2220      	movs	r2, #32
 8002940:	619a      	str	r2, [r3, #24]
	disable_passthrough();
 8002942:	f7ff fead 	bl	80026a0 <disable_passthrough>
	send_command("AT+CWMODE=1");
 8002946:	4808      	ldr	r0, [pc, #32]	; (8002968 <esp_wps+0x30>)
 8002948:	f7ff fed2 	bl	80026f0 <send_command>
	send_command("AT+WPS=1");
 800294c:	4807      	ldr	r0, [pc, #28]	; (800296c <esp_wps+0x34>)
 800294e:	f7ff fecf 	bl	80026f0 <send_command>
	wait_for_response("connecting", 30000);
 8002952:	4907      	ldr	r1, [pc, #28]	; (8002970 <esp_wps+0x38>)
 8002954:	4807      	ldr	r0, [pc, #28]	; (8002974 <esp_wps+0x3c>)
 8002956:	f7ff ff05 	bl	8002764 <wait_for_response>
	esp_status = AP_Connected;
 800295a:	4b07      	ldr	r3, [pc, #28]	; (8002978 <esp_wps+0x40>)
 800295c:	2202      	movs	r2, #2
 800295e:	701a      	strb	r2, [r3, #0]
	esp_initialize();
 8002960:	f7ff ffc8 	bl	80028f4 <esp_initialize>
}
 8002964:	bd10      	pop	{r4, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	08003560 	.word	0x08003560
 800296c:	0800356c 	.word	0x0800356c
 8002970:	00007530 	.word	0x00007530
 8002974:	08003578 	.word	0x08003578
 8002978:	20000350 	.word	0x20000350

0800297c <esp_check_connection>:

void esp_restore(){
	send_command("AT+RESTORE");
}

void esp_check_connection(){
 800297c:	b510      	push	{r4, lr}
	if (search_rx_buffer("Connected"))
 800297e:	4813      	ldr	r0, [pc, #76]	; (80029cc <esp_check_connection+0x50>)
 8002980:	f7ff fee4 	bl	800274c <search_rx_buffer>
 8002984:	2800      	cmp	r0, #0
 8002986:	d10d      	bne.n	80029a4 <esp_check_connection+0x28>
		esp_initialize();
	else if(search_rx_buffer("ERROR")){
 8002988:	4811      	ldr	r0, [pc, #68]	; (80029d0 <esp_check_connection+0x54>)
 800298a:	f7ff fedf 	bl	800274c <search_rx_buffer>
 800298e:	2800      	cmp	r0, #0
 8002990:	d10b      	bne.n	80029aa <esp_check_connection+0x2e>
		esp_status = No_Status;
		esp_initialize();
	}
	else if (esp_status == Passthrough) {
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <esp_check_connection+0x58>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b04      	cmp	r3, #4
 8002998:	d00d      	beq.n	80029b6 <esp_check_connection+0x3a>
		LD2_GPIO_Port->ODR ^= LD2_Pin;
		esp_send_data("OK");
	}
	else
		LD2_GPIO_Port->BRR = LD2_Pin;
 800299a:	23a0      	movs	r3, #160	; 0xa0
 800299c:	05db      	lsls	r3, r3, #23
 800299e:	2220      	movs	r2, #32
 80029a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029a2:	bd10      	pop	{r4, pc}
		esp_initialize();
 80029a4:	f7ff ffa6 	bl	80028f4 <esp_initialize>
 80029a8:	e7fb      	b.n	80029a2 <esp_check_connection+0x26>
		esp_status = No_Status;
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <esp_check_connection+0x58>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	701a      	strb	r2, [r3, #0]
		esp_initialize();
 80029b0:	f7ff ffa0 	bl	80028f4 <esp_initialize>
 80029b4:	e7f5      	b.n	80029a2 <esp_check_connection+0x26>
		LD2_GPIO_Port->ODR ^= LD2_Pin;
 80029b6:	22a0      	movs	r2, #160	; 0xa0
 80029b8:	05d2      	lsls	r2, r2, #23
 80029ba:	6953      	ldr	r3, [r2, #20]
 80029bc:	2120      	movs	r1, #32
 80029be:	404b      	eors	r3, r1
 80029c0:	6153      	str	r3, [r2, #20]
		esp_send_data("OK");
 80029c2:	4805      	ldr	r0, [pc, #20]	; (80029d8 <esp_check_connection+0x5c>)
 80029c4:	f7ff ff74 	bl	80028b0 <esp_send_data>
 80029c8:	e7eb      	b.n	80029a2 <esp_check_connection+0x26>
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	08003590 	.word	0x08003590
 80029d0:	0800359c 	.word	0x0800359c
 80029d4:	20000350 	.word	0x20000350
 80029d8:	080034fc 	.word	0x080034fc

080029dc <esp_parse_value>:

_Bool esp_parse_value(uint32_t *value){
 80029dc:	b570      	push	{r4, r5, r6, lr}
 80029de:	0006      	movs	r6, r0
	static char command[] = "$";
	char* start_string = strstr((const char*) rx_buffer, command);
 80029e0:	4912      	ldr	r1, [pc, #72]	; (8002a2c <esp_parse_value+0x50>)
 80029e2:	4813      	ldr	r0, [pc, #76]	; (8002a30 <esp_parse_value+0x54>)
 80029e4:	f000 fc2a 	bl	800323c <strstr>
 80029e8:	1e04      	subs	r4, r0, #0
	if (NULL != start_string) {
 80029ea:	d019      	beq.n	8002a20 <esp_parse_value+0x44>
		char* end_string = strstr(start_string, "\r\n");
 80029ec:	4911      	ldr	r1, [pc, #68]	; (8002a34 <esp_parse_value+0x58>)
 80029ee:	f000 fc25 	bl	800323c <strstr>
 80029f2:	1e05      	subs	r5, r0, #0
		if (NULL != end_string) {
 80029f4:	d016      	beq.n	8002a24 <esp_parse_value+0x48>
			char *value_start = strchr(start_string, ' ');
 80029f6:	2120      	movs	r1, #32
 80029f8:	0020      	movs	r0, r4
 80029fa:	f000 fc09 	bl	8003210 <strchr>
			if (NULL != value_start) {
 80029fe:	2800      	cmp	r0, #0
 8002a00:	d012      	beq.n	8002a28 <esp_parse_value+0x4c>
				if (NULL != value)
 8002a02:	2e00      	cmp	r6, #0
 8002a04:	d004      	beq.n	8002a10 <esp_parse_value+0x34>
					*value = strtoul(value_start, NULL, 10);
 8002a06:	220a      	movs	r2, #10
 8002a08:	2100      	movs	r1, #0
 8002a0a:	f000 fcb3 	bl	8003374 <strtoul>
 8002a0e:	6030      	str	r0, [r6, #0]
				memset(start_string, '*', end_string-start_string+2);
 8002a10:	1b2a      	subs	r2, r5, r4
 8002a12:	3202      	adds	r2, #2
 8002a14:	212a      	movs	r1, #42	; 0x2a
 8002a16:	0020      	movs	r0, r4
 8002a18:	f000 fb37 	bl	800308a <memset>
				return 1;
 8002a1c:	2001      	movs	r0, #1
			}
		}
	}
	return 0;
}
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
 8002a20:	2000      	movs	r0, #0
 8002a22:	e7fc      	b.n	8002a1e <esp_parse_value+0x42>
 8002a24:	2000      	movs	r0, #0
 8002a26:	e7fa      	b.n	8002a1e <esp_parse_value+0x42>
 8002a28:	2000      	movs	r0, #0
 8002a2a:	e7f8      	b.n	8002a1e <esp_parse_value+0x42>
 8002a2c:	20000000 	.word	0x20000000
 8002a30:	200001f4 	.word	0x200001f4
 8002a34:	080034d0 	.word	0x080034d0

08002a38 <esp_uart_callback>:


void esp_uart_callback(){	//put this in UART rx_callback in main
 8002a38:	b510      	push	{r4, lr}
	HAL_UART_Receive_IT(&huart1, rx_buffer, RX_BUFFER_SIZE);
 8002a3a:	2264      	movs	r2, #100	; 0x64
 8002a3c:	4902      	ldr	r1, [pc, #8]	; (8002a48 <esp_uart_callback+0x10>)
 8002a3e:	4803      	ldr	r0, [pc, #12]	; (8002a4c <esp_uart_callback+0x14>)
 8002a40:	f7ff f832 	bl	8001aa8 <HAL_UART_Receive_IT>
}
 8002a44:	bd10      	pop	{r4, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	200001f4 	.word	0x200001f4
 8002a4c:	20000420 	.word	0x20000420

08002a50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a52:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	2214      	movs	r2, #20
 8002a56:	2100      	movs	r1, #0
 8002a58:	a803      	add	r0, sp, #12
 8002a5a:	f000 fb16 	bl	800308a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a5e:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <MX_GPIO_Init+0x98>)
 8002a60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a62:	2204      	movs	r2, #4
 8002a64:	4311      	orrs	r1, r2
 8002a66:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002a68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	9200      	str	r2, [sp, #0]
 8002a6e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a72:	2780      	movs	r7, #128	; 0x80
 8002a74:	433a      	orrs	r2, r7
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a7a:	403a      	ands	r2, r7
 8002a7c:	9201      	str	r2, [sp, #4]
 8002a7e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a82:	2501      	movs	r5, #1
 8002a84:	432a      	orrs	r2, r5
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8a:	402b      	ands	r3, r5
 8002a8c:	9302      	str	r3, [sp, #8]
 8002a8e:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a90:	2200      	movs	r2, #0
 8002a92:	2120      	movs	r1, #32
 8002a94:	20a0      	movs	r0, #160	; 0xa0
 8002a96:	05c0      	lsls	r0, r0, #23
 8002a98:	f7fe fa43 	bl	8000f22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP_PWR_GPIO_Port, ESP_PWR_Pin, GPIO_PIN_RESET);
 8002a9c:	4e13      	ldr	r6, [pc, #76]	; (8002aec <MX_GPIO_Init+0x9c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2180      	movs	r1, #128	; 0x80
 8002aa2:	0030      	movs	r0, r6
 8002aa4:	f7fe fa3d 	bl	8000f22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	019b      	lsls	r3, r3, #6
 8002aac:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <MX_GPIO_Init+0xa0>)
 8002ab0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2400      	movs	r4, #0
 8002ab4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8002ab6:	a903      	add	r1, sp, #12
 8002ab8:	0030      	movs	r0, r6
 8002aba:	f7fe f95d 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ac2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002ac8:	a903      	add	r1, sp, #12
 8002aca:	20a0      	movs	r0, #160	; 0xa0
 8002acc:	05c0      	lsls	r0, r0, #23
 8002ace:	f7fe f953 	bl	8000d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP_PWR_Pin;
 8002ad2:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(ESP_PWR_GPIO_Port, &GPIO_InitStruct);
 8002ada:	a903      	add	r1, sp, #12
 8002adc:	0030      	movs	r0, r6
 8002ade:	f7fe f94b 	bl	8000d78 <HAL_GPIO_Init>

}
 8002ae2:	b009      	add	sp, #36	; 0x24
 8002ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	50000800 	.word	0x50000800
 8002af0:	10110000 	.word	0x10110000

08002af4 <HAL_UART_RxCpltCallback>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002af4:	b510      	push	{r4, lr}
	if (huart == &ESP_UART){
 8002af6:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <HAL_UART_RxCpltCallback+0x10>)
 8002af8:	4298      	cmp	r0, r3
 8002afa:	d000      	beq.n	8002afe <HAL_UART_RxCpltCallback+0xa>
		esp_uart_callback();
	}
}
 8002afc:	bd10      	pop	{r4, pc}
		esp_uart_callback();
 8002afe:	f7ff ff9b 	bl	8002a38 <esp_uart_callback>
}
 8002b02:	e7fb      	b.n	8002afc <HAL_UART_RxCpltCallback+0x8>
 8002b04:	20000420 	.word	0x20000420

08002b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b08:	b530      	push	{r4, r5, lr}
 8002b0a:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b0c:	2238      	movs	r2, #56	; 0x38
 8002b0e:	2100      	movs	r1, #0
 8002b10:	a810      	add	r0, sp, #64	; 0x40
 8002b12:	f000 faba 	bl	800308a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b16:	2214      	movs	r2, #20
 8002b18:	2100      	movs	r1, #0
 8002b1a:	a80b      	add	r0, sp, #44	; 0x2c
 8002b1c:	f000 fab5 	bl	800308a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b20:	2228      	movs	r2, #40	; 0x28
 8002b22:	2100      	movs	r1, #0
 8002b24:	a801      	add	r0, sp, #4
 8002b26:	f000 fab0 	bl	800308a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b2a:	4912      	ldr	r1, [pc, #72]	; (8002b74 <SystemClock_Config+0x6c>)
 8002b2c:	680b      	ldr	r3, [r1, #0]
 8002b2e:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <SystemClock_Config+0x70>)
 8002b30:	401a      	ands	r2, r3
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	4313      	orrs	r3, r2
 8002b38:	600b      	str	r3, [r1, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b3e:	2501      	movs	r5, #1
 8002b40:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b42:	330e      	adds	r3, #14
 8002b44:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b46:	2400      	movs	r4, #0
 8002b48:	941a      	str	r4, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b4a:	a810      	add	r0, sp, #64	; 0x40
 8002b4c:	f7fe fa48 	bl	8000fe0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b50:	230f      	movs	r3, #15
 8002b52:	930b      	str	r3, [sp, #44]	; 0x2c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002b54:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002b56:	3371      	adds	r3, #113	; 0x71
 8002b58:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b5a:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b5c:	940f      	str	r4, [sp, #60]	; 0x3c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b5e:	2100      	movs	r1, #0
 8002b60:	a80b      	add	r0, sp, #44	; 0x2c
 8002b62:	f7fe fd05 	bl	8001570 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b66:	9501      	str	r5, [sp, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b68:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b6a:	a801      	add	r0, sp, #4
 8002b6c:	f7fe fdfa 	bl	8001764 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8002b70:	b01f      	add	sp, #124	; 0x7c
 8002b72:	bd30      	pop	{r4, r5, pc}
 8002b74:	40007000 	.word	0x40007000
 8002b78:	ffffe7ff 	.word	0xffffe7ff

08002b7c <main>:
{
 8002b7c:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 8002b7e:	f7fd fc7b 	bl	8000478 <HAL_Init>
  SystemClock_Config();
 8002b82:	f7ff ffc1 	bl	8002b08 <SystemClock_Config>
  MX_GPIO_Init();
 8002b86:	f7ff ff63 	bl	8002a50 <MX_GPIO_Init>
  MX_TIM6_Init();
 8002b8a:	f000 f923 	bl	8002dd4 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8002b8e:	f000 f961 	bl	8002e54 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8002b92:	f7ff fd57 	bl	8002644 <MX_DMA_Init>
  MX_ADC_Init();
 8002b96:	f7ff fcc9 	bl	800252c <MX_ADC_Init>
  LD2_GPIO_Port->BSRR = LD2_Pin;
 8002b9a:	23a0      	movs	r3, #160	; 0xa0
 8002b9c:	05db      	lsls	r3, r3, #23
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	619a      	str	r2, [r3, #24]
  esp_power_on();
 8002ba2:	f7ff fe75 	bl	8002890 <esp_power_on>
  Task esp_check_task = task_make(2000, esp_check_connection);
 8002ba6:	20fa      	movs	r0, #250	; 0xfa
 8002ba8:	491d      	ldr	r1, [pc, #116]	; (8002c20 <main+0xa4>)
 8002baa:	00c0      	lsls	r0, r0, #3
 8002bac:	f000 f8d8 	bl	8002d60 <task_make>
 8002bb0:	0006      	movs	r6, r0
  Task wps_task = task_make(5000, esp_wps);
 8002bb2:	491c      	ldr	r1, [pc, #112]	; (8002c24 <main+0xa8>)
 8002bb4:	481c      	ldr	r0, [pc, #112]	; (8002c28 <main+0xac>)
 8002bb6:	f000 f8d3 	bl	8002d60 <task_make>
 8002bba:	0004      	movs	r4, r0
  Task parse_task = task_make(200, NULL);
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	20c8      	movs	r0, #200	; 0xc8
 8002bc0:	f000 f8ce 	bl	8002d60 <task_make>
 8002bc4:	0005      	movs	r5, r0
  sensor_init();
 8002bc6:	f000 f8b5 	bl	8002d34 <sensor_init>
 8002bca:	e014      	b.n	8002bf6 <main+0x7a>
		  task_stop(wps_task);
 8002bcc:	0020      	movs	r0, r4
 8002bce:	f000 f8f1 	bl	8002db4 <task_stop>
	  if (task_state(parse_task, NULL)) {
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	0028      	movs	r0, r5
 8002bd6:	f000 f8d4 	bl	8002d82 <task_state>
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	d116      	bne.n	8002c0c <main+0x90>
	  task_state(wps_task, NULL);
 8002bde:	2100      	movs	r1, #0
 8002be0:	0020      	movs	r0, r4
 8002be2:	f000 f8ce 	bl	8002d82 <task_state>
	  task_state(esp_check_task, NULL);
 8002be6:	2100      	movs	r1, #0
 8002be8:	0030      	movs	r0, r6
 8002bea:	f000 f8ca 	bl	8002d82 <task_state>
	  HAL_Delay(1000);
 8002bee:	20fa      	movs	r0, #250	; 0xfa
 8002bf0:	0080      	lsls	r0, r0, #2
 8002bf2:	f7fd fc63 	bl	80004bc <HAL_Delay>
	  if (!HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin)){
 8002bf6:	2180      	movs	r1, #128	; 0x80
 8002bf8:	0189      	lsls	r1, r1, #6
 8002bfa:	480c      	ldr	r0, [pc, #48]	; (8002c2c <main+0xb0>)
 8002bfc:	f7fe f98a 	bl	8000f14 <HAL_GPIO_ReadPin>
 8002c00:	2800      	cmp	r0, #0
 8002c02:	d1e3      	bne.n	8002bcc <main+0x50>
		  task_start(wps_task);
 8002c04:	0020      	movs	r0, r4
 8002c06:	f000 f8dd 	bl	8002dc4 <task_start>
 8002c0a:	e7e2      	b.n	8002bd2 <main+0x56>
		  if (esp_parse_value(&counter)){
 8002c0c:	4808      	ldr	r0, [pc, #32]	; (8002c30 <main+0xb4>)
 8002c0e:	f7ff fee5 	bl	80029dc <esp_parse_value>
 8002c12:	2800      	cmp	r0, #0
 8002c14:	d0e3      	beq.n	8002bde <main+0x62>
			  HAL_Delay(1);
 8002c16:	2001      	movs	r0, #1
 8002c18:	f7fd fc50 	bl	80004bc <HAL_Delay>
 8002c1c:	e7df      	b.n	8002bde <main+0x62>
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	0800297d 	.word	0x0800297d
 8002c24:	08002939 	.word	0x08002939
 8002c28:	00001388 	.word	0x00001388
 8002c2c:	50000800 	.word	0x50000800
 8002c30:	20000290 	.word	0x20000290

08002c34 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c38:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_MspInit+0x18>)
 8002c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002c44:	2280      	movs	r2, #128	; 0x80
 8002c46:	0552      	lsls	r2, r2, #21
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c4c:	4770      	bx	lr
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	40021000 	.word	0x40021000

08002c54 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c54:	4770      	bx	lr

08002c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c56:	e7fe      	b.n	8002c56 <HardFault_Handler>

08002c58 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c58:	4770      	bx	lr

08002c5a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c5a:	4770      	bx	lr

08002c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c5c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c5e:	f7fd fc1f 	bl	80004a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c62:	bd10      	pop	{r4, pc}

08002c64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c64:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002c66:	4802      	ldr	r0, [pc, #8]	; (8002c70 <DMA1_Channel1_IRQHandler+0xc>)
 8002c68:	f7fe f826 	bl	8000cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c6c:	bd10      	pop	{r4, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	200002ac 	.word	0x200002ac

08002c74 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002c74:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002c76:	4803      	ldr	r0, [pc, #12]	; (8002c84 <DMA1_Channel2_3_IRQHandler+0x10>)
 8002c78:	f7fe f81e 	bl	8000cb8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002c7e:	f7fe f81b 	bl	8000cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002c82:	bd10      	pop	{r4, pc}
 8002c84:	20000390 	.word	0x20000390
 8002c88:	200003d8 	.word	0x200003d8

08002c8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002c8c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c8e:	4802      	ldr	r0, [pc, #8]	; (8002c98 <USART1_IRQHandler+0xc>)
 8002c90:	f7ff f856 	bl	8001d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c94:	bd10      	pop	{r4, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	20000420 	.word	0x20000420

08002c9c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002c9c:	b510      	push	{r4, lr}
 8002c9e:	0003      	movs	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ca0:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <_sbrk+0x34>)
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	2a00      	cmp	r2, #0
 8002ca6:	d008      	beq.n	8002cba <_sbrk+0x1e>
		heap_end = &end;

	prev_heap_end = heap_end;
 8002ca8:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <_sbrk+0x34>)
 8002caa:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002cac:	18c3      	adds	r3, r0, r3
 8002cae:	466a      	mov	r2, sp
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d806      	bhi.n	8002cc2 <_sbrk+0x26>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8002cb4:	4a06      	ldr	r2, [pc, #24]	; (8002cd0 <_sbrk+0x34>)
 8002cb6:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8002cb8:	bd10      	pop	{r4, pc}
		heap_end = &end;
 8002cba:	4a05      	ldr	r2, [pc, #20]	; (8002cd0 <_sbrk+0x34>)
 8002cbc:	4905      	ldr	r1, [pc, #20]	; (8002cd4 <_sbrk+0x38>)
 8002cbe:	6011      	str	r1, [r2, #0]
 8002cc0:	e7f2      	b.n	8002ca8 <_sbrk+0xc>
		errno = ENOMEM;
 8002cc2:	f000 f97f 	bl	8002fc4 <__errno>
 8002cc6:	230c      	movs	r3, #12
 8002cc8:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002cca:	2001      	movs	r0, #1
 8002ccc:	4240      	negs	r0, r0
 8002cce:	e7f3      	b.n	8002cb8 <_sbrk+0x1c>
 8002cd0:	20000294 	.word	0x20000294
 8002cd4:	200004a8 	.word	0x200004a8

08002cd8 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8002cd8:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <SystemInit+0x44>)
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	2280      	movs	r2, #128	; 0x80
 8002cde:	0052      	lsls	r2, r2, #1
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	490e      	ldr	r1, [pc, #56]	; (8002d20 <SystemInit+0x48>)
 8002ce8:	400a      	ands	r2, r1
 8002cea:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	490d      	ldr	r1, [pc, #52]	; (8002d24 <SystemInit+0x4c>)
 8002cf0:	400a      	ands	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	438a      	bics	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	490a      	ldr	r1, [pc, #40]	; (8002d28 <SystemInit+0x50>)
 8002d00:	400a      	ands	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8002d04:	68da      	ldr	r2, [r3, #12]
 8002d06:	4909      	ldr	r1, [pc, #36]	; (8002d2c <SystemInit+0x54>)
 8002d08:	400a      	ands	r2, r1
 8002d0a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <SystemInit+0x58>)
 8002d12:	2280      	movs	r2, #128	; 0x80
 8002d14:	0512      	lsls	r2, r2, #20
 8002d16:	609a      	str	r2, [r3, #8]
#endif
}
 8002d18:	4770      	bx	lr
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	88ff400c 	.word	0x88ff400c
 8002d24:	fef6fff6 	.word	0xfef6fff6
 8002d28:	fffbffff 	.word	0xfffbffff
 8002d2c:	ff02ffff 	.word	0xff02ffff
 8002d30:	e000ed00 	.word	0xe000ed00

08002d34 <sensor_init>:
#define	ADCREF_MV 3300
#define TEMP_LEN 6

static uint32_t adcValue;

void sensor_init() {
 8002d34:	b510      	push	{r4, lr}
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8002d36:	4c07      	ldr	r4, [pc, #28]	; (8002d54 <sensor_init+0x20>)
 8002d38:	2100      	movs	r1, #0
 8002d3a:	0020      	movs	r0, r4
 8002d3c:	f7fd fe28 	bl	8000990 <HAL_ADCEx_Calibration_Start>
	HAL_TIM_Base_Start(&htim6);
 8002d40:	4805      	ldr	r0, [pc, #20]	; (8002d58 <sensor_init+0x24>)
 8002d42:	f7fe fe69 	bl	8001a18 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc, &adcValue, 1);
 8002d46:	2201      	movs	r2, #1
 8002d48:	4904      	ldr	r1, [pc, #16]	; (8002d5c <sensor_init+0x28>)
 8002d4a:	0020      	movs	r0, r4
 8002d4c:	f7fd fd0c 	bl	8000768 <HAL_ADC_Start_DMA>

}
 8002d50:	bd10      	pop	{r4, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	200002f4 	.word	0x200002f4
 8002d58:	20000354 	.word	0x20000354
 8002d5c:	2000029c 	.word	0x2000029c

08002d60 <task_make>:
	uint32_t lastTick;
	taskFuncptr taskFunc;
};


Task task_make(uint32_t interval_ms, taskFuncptr func) {
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	0006      	movs	r6, r0
 8002d64:	000d      	movs	r5, r1
	Task task = malloc( sizeof * task);
 8002d66:	2010      	movs	r0, #16
 8002d68:	f000 f972 	bl	8003050 <malloc>
 8002d6c:	1e04      	subs	r4, r0, #0
	if (NULL != task){
 8002d6e:	d006      	beq.n	8002d7e <task_make+0x1e>
		task->active = RESET;
 8002d70:	2300      	movs	r3, #0
 8002d72:	7003      	strb	r3, [r0, #0]
		task->interval = interval_ms;
 8002d74:	6046      	str	r6, [r0, #4]
		task->taskFunc = func;
 8002d76:	60c5      	str	r5, [r0, #12]
		task->lastTick = HAL_GetTick();
 8002d78:	f7fd fb9a 	bl	80004b0 <HAL_GetTick>
 8002d7c:	60a0      	str	r0, [r4, #8]
	}
	return task;
}
 8002d7e:	0020      	movs	r0, r4
 8002d80:	bd70      	pop	{r4, r5, r6, pc}

08002d82 <task_state>:

void task_change(Task task, uint32_t interval){
	task->interval = interval;
}

_Bool task_state(Task task, void *args) {
 8002d82:	b570      	push	{r4, r5, r6, lr}
 8002d84:	0004      	movs	r4, r0
 8002d86:	000d      	movs	r5, r1
	if ((HAL_GetTick() - task->lastTick >= task->interval) && task->active) {
 8002d88:	f7fd fb92 	bl	80004b0 <HAL_GetTick>
 8002d8c:	68a3      	ldr	r3, [r4, #8]
 8002d8e:	1ac0      	subs	r0, r0, r3
 8002d90:	6863      	ldr	r3, [r4, #4]
 8002d92:	4298      	cmp	r0, r3
 8002d94:	d30b      	bcc.n	8002dae <task_state+0x2c>
 8002d96:	7826      	ldrb	r6, [r4, #0]
 8002d98:	2e00      	cmp	r6, #0
 8002d9a:	d009      	beq.n	8002db0 <task_state+0x2e>
		task->lastTick = HAL_GetTick();
 8002d9c:	f7fd fb88 	bl	80004b0 <HAL_GetTick>
 8002da0:	60a0      	str	r0, [r4, #8]
		if (NULL != task->taskFunc)
 8002da2:	68e3      	ldr	r3, [r4, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <task_state+0x2e>
			task->taskFunc(args);
 8002da8:	0028      	movs	r0, r5
 8002daa:	4798      	blx	r3
 8002dac:	e000      	b.n	8002db0 <task_state+0x2e>
		return SET;
	}
	return RESET;
 8002dae:	2600      	movs	r6, #0
}
 8002db0:	0030      	movs	r0, r6
 8002db2:	bd70      	pop	{r4, r5, r6, pc}

08002db4 <task_stop>:

void task_reset(Task task) {
	task->lastTick = HAL_GetTick();
}

void task_stop(Task task){
 8002db4:	b510      	push	{r4, lr}
 8002db6:	0004      	movs	r4, r0
	task->lastTick = HAL_GetTick();
 8002db8:	f7fd fb7a 	bl	80004b0 <HAL_GetTick>
 8002dbc:	60a0      	str	r0, [r4, #8]
	task->active = RESET;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	7023      	strb	r3, [r4, #0]
}
 8002dc2:	bd10      	pop	{r4, pc}

08002dc4 <task_start>:

void task_start(Task task){
	task->active = SET;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	7003      	strb	r3, [r0, #0]
}
 8002dc8:	4770      	bx	lr

08002dca <task_destroy>:

void task_destroy(Task task){
 8002dca:	b510      	push	{r4, lr}
	free(task);
 8002dcc:	f000 f94a 	bl	8003064 <free>
}
 8002dd0:	bd10      	pop	{r4, pc}
	...

08002dd4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002dd4:	b500      	push	{lr}
 8002dd6:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd8:	2208      	movs	r2, #8
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4668      	mov	r0, sp
 8002dde:	f000 f954 	bl	800308a <memset>

  htim6.Instance = TIM6;
 8002de2:	4810      	ldr	r0, [pc, #64]	; (8002e24 <MX_TIM6_Init+0x50>)
 8002de4:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <MX_TIM6_Init+0x54>)
 8002de6:	6003      	str	r3, [r0, #0]
  htim6.Init.Prescaler = 7999;
 8002de8:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <MX_TIM6_Init+0x58>)
 8002dea:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dec:	2300      	movs	r3, #0
 8002dee:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 999;
 8002df0:	4a0f      	ldr	r2, [pc, #60]	; (8002e30 <MX_TIM6_Init+0x5c>)
 8002df2:	60c2      	str	r2, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002df4:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002df6:	f7fe fdf5 	bl	80019e4 <HAL_TIM_Base_Init>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	d10b      	bne.n	8002e16 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e02:	2300      	movs	r3, #0
 8002e04:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002e06:	4669      	mov	r1, sp
 8002e08:	4806      	ldr	r0, [pc, #24]	; (8002e24 <MX_TIM6_Init+0x50>)
 8002e0a:	f7fe fe17 	bl	8001a3c <HAL_TIMEx_MasterConfigSynchronization>
 8002e0e:	2800      	cmp	r0, #0
 8002e10:	d104      	bne.n	8002e1c <MX_TIM6_Init+0x48>
  {
    Error_Handler();
  }

}
 8002e12:	b003      	add	sp, #12
 8002e14:	bd00      	pop	{pc}
    Error_Handler();
 8002e16:	f7ff ff0d 	bl	8002c34 <Error_Handler>
 8002e1a:	e7f0      	b.n	8002dfe <MX_TIM6_Init+0x2a>
    Error_Handler();
 8002e1c:	f7ff ff0a 	bl	8002c34 <Error_Handler>
}
 8002e20:	e7f7      	b.n	8002e12 <MX_TIM6_Init+0x3e>
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	20000354 	.word	0x20000354
 8002e28:	40001000 	.word	0x40001000
 8002e2c:	00001f3f 	.word	0x00001f3f
 8002e30:	000003e7 	.word	0x000003e7

08002e34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM6)
 8002e34:	6802      	ldr	r2, [r0, #0]
 8002e36:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <HAL_TIM_Base_MspInit+0x18>)
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d000      	beq.n	8002e3e <HAL_TIM_Base_MspInit+0xa>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002e3c:	4770      	bx	lr
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e3e:	4a04      	ldr	r2, [pc, #16]	; (8002e50 <HAL_TIM_Base_MspInit+0x1c>)
 8002e40:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002e42:	2110      	movs	r1, #16
 8002e44:	430b      	orrs	r3, r1
 8002e46:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e48:	e7f8      	b.n	8002e3c <HAL_TIM_Base_MspInit+0x8>
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	40001000 	.word	0x40001000
 8002e50:	40021000 	.word	0x40021000

08002e54 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e54:	b510      	push	{r4, lr}

  huart1.Instance = USART1;
 8002e56:	480c      	ldr	r0, [pc, #48]	; (8002e88 <MX_USART1_UART_Init+0x34>)
 8002e58:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <MX_USART1_UART_Init+0x38>)
 8002e5a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8002e5c:	23e1      	movs	r3, #225	; 0xe1
 8002e5e:	025b      	lsls	r3, r3, #9
 8002e60:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e62:	2300      	movs	r3, #0
 8002e64:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e66:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e68:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e6a:	220c      	movs	r2, #12
 8002e6c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e6e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e70:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e72:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e74:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e76:	f7ff fb21 	bl	80024bc <HAL_UART_Init>
 8002e7a:	2800      	cmp	r0, #0
 8002e7c:	d100      	bne.n	8002e80 <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8002e7e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002e80:	f7ff fed8 	bl	8002c34 <Error_Handler>
}
 8002e84:	e7fb      	b.n	8002e7e <MX_USART1_UART_Init+0x2a>
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	20000420 	.word	0x20000420
 8002e8c:	40013800 	.word	0x40013800

08002e90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e90:	b530      	push	{r4, r5, lr}
 8002e92:	b087      	sub	sp, #28
 8002e94:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e96:	2214      	movs	r2, #20
 8002e98:	2100      	movs	r1, #0
 8002e9a:	a801      	add	r0, sp, #4
 8002e9c:	f000 f8f5 	bl	800308a <memset>
  if(uartHandle->Instance==USART1)
 8002ea0:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <HAL_UART_MspInit+0xc8>)
 8002ea2:	6822      	ldr	r2, [r4, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002ea8:	b007      	add	sp, #28
 8002eaa:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002eac:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <HAL_UART_MspInit+0xcc>)
 8002eae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002eb0:	2280      	movs	r2, #128	; 0x80
 8002eb2:	01d2      	lsls	r2, r2, #7
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eba:	2201      	movs	r2, #1
 8002ebc:	4311      	orrs	r1, r2
 8002ebe:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	9200      	str	r2, [sp, #0]
 8002ec6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ec8:	23c0      	movs	r3, #192	; 0xc0
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed2:	2503      	movs	r5, #3
 8002ed4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eda:	20a0      	movs	r0, #160	; 0xa0
 8002edc:	a901      	add	r1, sp, #4
 8002ede:	05c0      	lsls	r0, r0, #23
 8002ee0:	f7fd ff4a 	bl	8000d78 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8002ee4:	481e      	ldr	r0, [pc, #120]	; (8002f60 <HAL_UART_MspInit+0xd0>)
 8002ee6:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <HAL_UART_MspInit+0xd4>)
 8002ee8:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8002eea:	6045      	str	r5, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eec:	2300      	movs	r3, #0
 8002eee:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef0:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ef6:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ef8:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002efa:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002efc:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002efe:	f7fd fe09 	bl	8000b14 <HAL_DMA_Init>
 8002f02:	2800      	cmp	r0, #0
 8002f04:	d121      	bne.n	8002f4a <HAL_UART_MspInit+0xba>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002f06:	4b16      	ldr	r3, [pc, #88]	; (8002f60 <HAL_UART_MspInit+0xd0>)
 8002f08:	66e3      	str	r3, [r4, #108]	; 0x6c
 8002f0a:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8002f0c:	4816      	ldr	r0, [pc, #88]	; (8002f68 <HAL_UART_MspInit+0xd8>)
 8002f0e:	4b17      	ldr	r3, [pc, #92]	; (8002f6c <HAL_UART_MspInit+0xdc>)
 8002f10:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8002f12:	2303      	movs	r3, #3
 8002f14:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f16:	330d      	adds	r3, #13
 8002f18:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f1e:	2280      	movs	r2, #128	; 0x80
 8002f20:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f22:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f24:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f26:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f28:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f2a:	f7fd fdf3 	bl	8000b14 <HAL_DMA_Init>
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	d10e      	bne.n	8002f50 <HAL_UART_MspInit+0xc0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <HAL_UART_MspInit+0xd8>)
 8002f34:	66a3      	str	r3, [r4, #104]	; 0x68
 8002f36:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	201b      	movs	r0, #27
 8002f3e:	f7fd fd7b 	bl	8000a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f42:	201b      	movs	r0, #27
 8002f44:	f7fd fda8 	bl	8000a98 <HAL_NVIC_EnableIRQ>
}
 8002f48:	e7ae      	b.n	8002ea8 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8002f4a:	f7ff fe73 	bl	8002c34 <Error_Handler>
 8002f4e:	e7da      	b.n	8002f06 <HAL_UART_MspInit+0x76>
      Error_Handler();
 8002f50:	f7ff fe70 	bl	8002c34 <Error_Handler>
 8002f54:	e7ed      	b.n	8002f32 <HAL_UART_MspInit+0xa2>
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	40013800 	.word	0x40013800
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	200003d8 	.word	0x200003d8
 8002f64:	40020030 	.word	0x40020030
 8002f68:	20000390 	.word	0x20000390
 8002f6c:	4002001c 	.word	0x4002001c

08002f70 <Reset_Handler>:
 8002f70:	480d      	ldr	r0, [pc, #52]	; (8002fa8 <LoopForever+0x2>)
 8002f72:	4685      	mov	sp, r0
 8002f74:	2100      	movs	r1, #0
 8002f76:	e003      	b.n	8002f80 <LoopCopyDataInit>

08002f78 <CopyDataInit>:
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <LoopForever+0x6>)
 8002f7a:	585b      	ldr	r3, [r3, r1]
 8002f7c:	5043      	str	r3, [r0, r1]
 8002f7e:	3104      	adds	r1, #4

08002f80 <LoopCopyDataInit>:
 8002f80:	480b      	ldr	r0, [pc, #44]	; (8002fb0 <LoopForever+0xa>)
 8002f82:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <LoopForever+0xe>)
 8002f84:	1842      	adds	r2, r0, r1
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d3f6      	bcc.n	8002f78 <CopyDataInit>
 8002f8a:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <LoopForever+0x12>)
 8002f8c:	e002      	b.n	8002f94 <LoopFillZerobss>

08002f8e <FillZerobss>:
 8002f8e:	2300      	movs	r3, #0
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	3204      	adds	r2, #4

08002f94 <LoopFillZerobss>:
 8002f94:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <LoopForever+0x16>)
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d3f9      	bcc.n	8002f8e <FillZerobss>
 8002f9a:	f7ff fe9d 	bl	8002cd8 <SystemInit>
 8002f9e:	f000 f817 	bl	8002fd0 <__libc_init_array>
 8002fa2:	f7ff fdeb 	bl	8002b7c <main>

08002fa6 <LoopForever>:
 8002fa6:	e7fe      	b.n	8002fa6 <LoopForever>
 8002fa8:	20005000 	.word	0x20005000
 8002fac:	080036e4 	.word	0x080036e4
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	200001d8 	.word	0x200001d8
 8002fb8:	200001d8 	.word	0x200001d8
 8002fbc:	200004a4 	.word	0x200004a4

08002fc0 <ADC1_COMP_IRQHandler>:
 8002fc0:	e7fe      	b.n	8002fc0 <ADC1_COMP_IRQHandler>
	...

08002fc4 <__errno>:
 8002fc4:	4b01      	ldr	r3, [pc, #4]	; (8002fcc <__errno+0x8>)
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	4770      	bx	lr
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	20000008 	.word	0x20000008

08002fd0 <__libc_init_array>:
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	2600      	movs	r6, #0
 8002fd4:	4d0c      	ldr	r5, [pc, #48]	; (8003008 <__libc_init_array+0x38>)
 8002fd6:	4c0d      	ldr	r4, [pc, #52]	; (800300c <__libc_init_array+0x3c>)
 8002fd8:	1b64      	subs	r4, r4, r5
 8002fda:	10a4      	asrs	r4, r4, #2
 8002fdc:	42a6      	cmp	r6, r4
 8002fde:	d109      	bne.n	8002ff4 <__libc_init_array+0x24>
 8002fe0:	2600      	movs	r6, #0
 8002fe2:	f000 fa31 	bl	8003448 <_init>
 8002fe6:	4d0a      	ldr	r5, [pc, #40]	; (8003010 <__libc_init_array+0x40>)
 8002fe8:	4c0a      	ldr	r4, [pc, #40]	; (8003014 <__libc_init_array+0x44>)
 8002fea:	1b64      	subs	r4, r4, r5
 8002fec:	10a4      	asrs	r4, r4, #2
 8002fee:	42a6      	cmp	r6, r4
 8002ff0:	d105      	bne.n	8002ffe <__libc_init_array+0x2e>
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	00b3      	lsls	r3, r6, #2
 8002ff6:	58eb      	ldr	r3, [r5, r3]
 8002ff8:	4798      	blx	r3
 8002ffa:	3601      	adds	r6, #1
 8002ffc:	e7ee      	b.n	8002fdc <__libc_init_array+0xc>
 8002ffe:	00b3      	lsls	r3, r6, #2
 8003000:	58eb      	ldr	r3, [r5, r3]
 8003002:	4798      	blx	r3
 8003004:	3601      	adds	r6, #1
 8003006:	e7f2      	b.n	8002fee <__libc_init_array+0x1e>
 8003008:	080036dc 	.word	0x080036dc
 800300c:	080036dc 	.word	0x080036dc
 8003010:	080036dc 	.word	0x080036dc
 8003014:	080036e0 	.word	0x080036e0

08003018 <__itoa>:
 8003018:	1e93      	subs	r3, r2, #2
 800301a:	b510      	push	{r4, lr}
 800301c:	000c      	movs	r4, r1
 800301e:	2b22      	cmp	r3, #34	; 0x22
 8003020:	d904      	bls.n	800302c <__itoa+0x14>
 8003022:	2300      	movs	r3, #0
 8003024:	001c      	movs	r4, r3
 8003026:	700b      	strb	r3, [r1, #0]
 8003028:	0020      	movs	r0, r4
 800302a:	bd10      	pop	{r4, pc}
 800302c:	2a0a      	cmp	r2, #10
 800302e:	d109      	bne.n	8003044 <__itoa+0x2c>
 8003030:	2800      	cmp	r0, #0
 8003032:	da07      	bge.n	8003044 <__itoa+0x2c>
 8003034:	232d      	movs	r3, #45	; 0x2d
 8003036:	700b      	strb	r3, [r1, #0]
 8003038:	2101      	movs	r1, #1
 800303a:	4240      	negs	r0, r0
 800303c:	1861      	adds	r1, r4, r1
 800303e:	f000 f9ad 	bl	800339c <__utoa>
 8003042:	e7f1      	b.n	8003028 <__itoa+0x10>
 8003044:	2100      	movs	r1, #0
 8003046:	e7f9      	b.n	800303c <__itoa+0x24>

08003048 <itoa>:
 8003048:	b510      	push	{r4, lr}
 800304a:	f7ff ffe5 	bl	8003018 <__itoa>
 800304e:	bd10      	pop	{r4, pc}

08003050 <malloc>:
 8003050:	b510      	push	{r4, lr}
 8003052:	4b03      	ldr	r3, [pc, #12]	; (8003060 <malloc+0x10>)
 8003054:	0001      	movs	r1, r0
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	f000 f86a 	bl	8003130 <_malloc_r>
 800305c:	bd10      	pop	{r4, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	20000008 	.word	0x20000008

08003064 <free>:
 8003064:	b510      	push	{r4, lr}
 8003066:	4b03      	ldr	r3, [pc, #12]	; (8003074 <free+0x10>)
 8003068:	0001      	movs	r1, r0
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	f000 f816 	bl	800309c <_free_r>
 8003070:	bd10      	pop	{r4, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	20000008 	.word	0x20000008

08003078 <memcpy>:
 8003078:	2300      	movs	r3, #0
 800307a:	b510      	push	{r4, lr}
 800307c:	429a      	cmp	r2, r3
 800307e:	d100      	bne.n	8003082 <memcpy+0xa>
 8003080:	bd10      	pop	{r4, pc}
 8003082:	5ccc      	ldrb	r4, [r1, r3]
 8003084:	54c4      	strb	r4, [r0, r3]
 8003086:	3301      	adds	r3, #1
 8003088:	e7f8      	b.n	800307c <memcpy+0x4>

0800308a <memset>:
 800308a:	0003      	movs	r3, r0
 800308c:	1812      	adds	r2, r2, r0
 800308e:	4293      	cmp	r3, r2
 8003090:	d100      	bne.n	8003094 <memset+0xa>
 8003092:	4770      	bx	lr
 8003094:	7019      	strb	r1, [r3, #0]
 8003096:	3301      	adds	r3, #1
 8003098:	e7f9      	b.n	800308e <memset+0x4>
	...

0800309c <_free_r>:
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	0005      	movs	r5, r0
 80030a0:	2900      	cmp	r1, #0
 80030a2:	d010      	beq.n	80030c6 <_free_r+0x2a>
 80030a4:	1f0c      	subs	r4, r1, #4
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	da00      	bge.n	80030ae <_free_r+0x12>
 80030ac:	18e4      	adds	r4, r4, r3
 80030ae:	0028      	movs	r0, r5
 80030b0:	f000 f9bb 	bl	800342a <__malloc_lock>
 80030b4:	4a1d      	ldr	r2, [pc, #116]	; (800312c <_free_r+0x90>)
 80030b6:	6813      	ldr	r3, [r2, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d105      	bne.n	80030c8 <_free_r+0x2c>
 80030bc:	6063      	str	r3, [r4, #4]
 80030be:	6014      	str	r4, [r2, #0]
 80030c0:	0028      	movs	r0, r5
 80030c2:	f000 f9b3 	bl	800342c <__malloc_unlock>
 80030c6:	bd70      	pop	{r4, r5, r6, pc}
 80030c8:	42a3      	cmp	r3, r4
 80030ca:	d909      	bls.n	80030e0 <_free_r+0x44>
 80030cc:	6821      	ldr	r1, [r4, #0]
 80030ce:	1860      	adds	r0, r4, r1
 80030d0:	4283      	cmp	r3, r0
 80030d2:	d1f3      	bne.n	80030bc <_free_r+0x20>
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	1841      	adds	r1, r0, r1
 80030da:	6021      	str	r1, [r4, #0]
 80030dc:	e7ee      	b.n	80030bc <_free_r+0x20>
 80030de:	0013      	movs	r3, r2
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	2a00      	cmp	r2, #0
 80030e4:	d001      	beq.n	80030ea <_free_r+0x4e>
 80030e6:	42a2      	cmp	r2, r4
 80030e8:	d9f9      	bls.n	80030de <_free_r+0x42>
 80030ea:	6819      	ldr	r1, [r3, #0]
 80030ec:	1858      	adds	r0, r3, r1
 80030ee:	42a0      	cmp	r0, r4
 80030f0:	d10b      	bne.n	800310a <_free_r+0x6e>
 80030f2:	6820      	ldr	r0, [r4, #0]
 80030f4:	1809      	adds	r1, r1, r0
 80030f6:	1858      	adds	r0, r3, r1
 80030f8:	6019      	str	r1, [r3, #0]
 80030fa:	4282      	cmp	r2, r0
 80030fc:	d1e0      	bne.n	80030c0 <_free_r+0x24>
 80030fe:	6810      	ldr	r0, [r2, #0]
 8003100:	6852      	ldr	r2, [r2, #4]
 8003102:	1841      	adds	r1, r0, r1
 8003104:	6019      	str	r1, [r3, #0]
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	e7da      	b.n	80030c0 <_free_r+0x24>
 800310a:	42a0      	cmp	r0, r4
 800310c:	d902      	bls.n	8003114 <_free_r+0x78>
 800310e:	230c      	movs	r3, #12
 8003110:	602b      	str	r3, [r5, #0]
 8003112:	e7d5      	b.n	80030c0 <_free_r+0x24>
 8003114:	6821      	ldr	r1, [r4, #0]
 8003116:	1860      	adds	r0, r4, r1
 8003118:	4282      	cmp	r2, r0
 800311a:	d103      	bne.n	8003124 <_free_r+0x88>
 800311c:	6810      	ldr	r0, [r2, #0]
 800311e:	6852      	ldr	r2, [r2, #4]
 8003120:	1841      	adds	r1, r0, r1
 8003122:	6021      	str	r1, [r4, #0]
 8003124:	6062      	str	r2, [r4, #4]
 8003126:	605c      	str	r4, [r3, #4]
 8003128:	e7ca      	b.n	80030c0 <_free_r+0x24>
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	200002a0 	.word	0x200002a0

08003130 <_malloc_r>:
 8003130:	2303      	movs	r3, #3
 8003132:	b570      	push	{r4, r5, r6, lr}
 8003134:	1ccd      	adds	r5, r1, #3
 8003136:	439d      	bics	r5, r3
 8003138:	3508      	adds	r5, #8
 800313a:	0006      	movs	r6, r0
 800313c:	2d0c      	cmp	r5, #12
 800313e:	d21e      	bcs.n	800317e <_malloc_r+0x4e>
 8003140:	250c      	movs	r5, #12
 8003142:	42a9      	cmp	r1, r5
 8003144:	d81d      	bhi.n	8003182 <_malloc_r+0x52>
 8003146:	0030      	movs	r0, r6
 8003148:	f000 f96f 	bl	800342a <__malloc_lock>
 800314c:	4a25      	ldr	r2, [pc, #148]	; (80031e4 <_malloc_r+0xb4>)
 800314e:	6814      	ldr	r4, [r2, #0]
 8003150:	0021      	movs	r1, r4
 8003152:	2900      	cmp	r1, #0
 8003154:	d119      	bne.n	800318a <_malloc_r+0x5a>
 8003156:	4c24      	ldr	r4, [pc, #144]	; (80031e8 <_malloc_r+0xb8>)
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d103      	bne.n	8003166 <_malloc_r+0x36>
 800315e:	0030      	movs	r0, r6
 8003160:	f000 f844 	bl	80031ec <_sbrk_r>
 8003164:	6020      	str	r0, [r4, #0]
 8003166:	0029      	movs	r1, r5
 8003168:	0030      	movs	r0, r6
 800316a:	f000 f83f 	bl	80031ec <_sbrk_r>
 800316e:	1c43      	adds	r3, r0, #1
 8003170:	d12b      	bne.n	80031ca <_malloc_r+0x9a>
 8003172:	230c      	movs	r3, #12
 8003174:	0030      	movs	r0, r6
 8003176:	6033      	str	r3, [r6, #0]
 8003178:	f000 f958 	bl	800342c <__malloc_unlock>
 800317c:	e003      	b.n	8003186 <_malloc_r+0x56>
 800317e:	2d00      	cmp	r5, #0
 8003180:	dadf      	bge.n	8003142 <_malloc_r+0x12>
 8003182:	230c      	movs	r3, #12
 8003184:	6033      	str	r3, [r6, #0]
 8003186:	2000      	movs	r0, #0
 8003188:	bd70      	pop	{r4, r5, r6, pc}
 800318a:	680b      	ldr	r3, [r1, #0]
 800318c:	1b5b      	subs	r3, r3, r5
 800318e:	d419      	bmi.n	80031c4 <_malloc_r+0x94>
 8003190:	2b0b      	cmp	r3, #11
 8003192:	d903      	bls.n	800319c <_malloc_r+0x6c>
 8003194:	600b      	str	r3, [r1, #0]
 8003196:	18cc      	adds	r4, r1, r3
 8003198:	6025      	str	r5, [r4, #0]
 800319a:	e003      	b.n	80031a4 <_malloc_r+0x74>
 800319c:	684b      	ldr	r3, [r1, #4]
 800319e:	428c      	cmp	r4, r1
 80031a0:	d10d      	bne.n	80031be <_malloc_r+0x8e>
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	0030      	movs	r0, r6
 80031a6:	f000 f941 	bl	800342c <__malloc_unlock>
 80031aa:	0020      	movs	r0, r4
 80031ac:	2207      	movs	r2, #7
 80031ae:	300b      	adds	r0, #11
 80031b0:	1d23      	adds	r3, r4, #4
 80031b2:	4390      	bics	r0, r2
 80031b4:	1ac3      	subs	r3, r0, r3
 80031b6:	d0e7      	beq.n	8003188 <_malloc_r+0x58>
 80031b8:	425a      	negs	r2, r3
 80031ba:	50e2      	str	r2, [r4, r3]
 80031bc:	e7e4      	b.n	8003188 <_malloc_r+0x58>
 80031be:	6063      	str	r3, [r4, #4]
 80031c0:	000c      	movs	r4, r1
 80031c2:	e7ef      	b.n	80031a4 <_malloc_r+0x74>
 80031c4:	000c      	movs	r4, r1
 80031c6:	6849      	ldr	r1, [r1, #4]
 80031c8:	e7c3      	b.n	8003152 <_malloc_r+0x22>
 80031ca:	2303      	movs	r3, #3
 80031cc:	1cc4      	adds	r4, r0, #3
 80031ce:	439c      	bics	r4, r3
 80031d0:	42a0      	cmp	r0, r4
 80031d2:	d0e1      	beq.n	8003198 <_malloc_r+0x68>
 80031d4:	1a21      	subs	r1, r4, r0
 80031d6:	0030      	movs	r0, r6
 80031d8:	f000 f808 	bl	80031ec <_sbrk_r>
 80031dc:	1c43      	adds	r3, r0, #1
 80031de:	d1db      	bne.n	8003198 <_malloc_r+0x68>
 80031e0:	e7c7      	b.n	8003172 <_malloc_r+0x42>
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	200002a0 	.word	0x200002a0
 80031e8:	200002a4 	.word	0x200002a4

080031ec <_sbrk_r>:
 80031ec:	2300      	movs	r3, #0
 80031ee:	b570      	push	{r4, r5, r6, lr}
 80031f0:	4c06      	ldr	r4, [pc, #24]	; (800320c <_sbrk_r+0x20>)
 80031f2:	0005      	movs	r5, r0
 80031f4:	0008      	movs	r0, r1
 80031f6:	6023      	str	r3, [r4, #0]
 80031f8:	f7ff fd50 	bl	8002c9c <_sbrk>
 80031fc:	1c43      	adds	r3, r0, #1
 80031fe:	d103      	bne.n	8003208 <_sbrk_r+0x1c>
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d000      	beq.n	8003208 <_sbrk_r+0x1c>
 8003206:	602b      	str	r3, [r5, #0]
 8003208:	bd70      	pop	{r4, r5, r6, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	200004a0 	.word	0x200004a0

08003210 <strchr>:
 8003210:	b2c9      	uxtb	r1, r1
 8003212:	7803      	ldrb	r3, [r0, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d004      	beq.n	8003222 <strchr+0x12>
 8003218:	428b      	cmp	r3, r1
 800321a:	d100      	bne.n	800321e <strchr+0xe>
 800321c:	4770      	bx	lr
 800321e:	3001      	adds	r0, #1
 8003220:	e7f7      	b.n	8003212 <strchr+0x2>
 8003222:	424b      	negs	r3, r1
 8003224:	4159      	adcs	r1, r3
 8003226:	4249      	negs	r1, r1
 8003228:	4008      	ands	r0, r1
 800322a:	e7f7      	b.n	800321c <strchr+0xc>

0800322c <strcpy>:
 800322c:	0003      	movs	r3, r0
 800322e:	780a      	ldrb	r2, [r1, #0]
 8003230:	3101      	adds	r1, #1
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	3301      	adds	r3, #1
 8003236:	2a00      	cmp	r2, #0
 8003238:	d1f9      	bne.n	800322e <strcpy+0x2>
 800323a:	4770      	bx	lr

0800323c <strstr>:
 800323c:	b510      	push	{r4, lr}
 800323e:	7803      	ldrb	r3, [r0, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10f      	bne.n	8003264 <strstr+0x28>
 8003244:	780b      	ldrb	r3, [r1, #0]
 8003246:	425a      	negs	r2, r3
 8003248:	4153      	adcs	r3, r2
 800324a:	425b      	negs	r3, r3
 800324c:	4018      	ands	r0, r3
 800324e:	bd10      	pop	{r4, pc}
 8003250:	2300      	movs	r3, #0
 8003252:	5cca      	ldrb	r2, [r1, r3]
 8003254:	2a00      	cmp	r2, #0
 8003256:	d0fa      	beq.n	800324e <strstr+0x12>
 8003258:	5cc4      	ldrb	r4, [r0, r3]
 800325a:	4294      	cmp	r4, r2
 800325c:	d101      	bne.n	8003262 <strstr+0x26>
 800325e:	3301      	adds	r3, #1
 8003260:	e7f7      	b.n	8003252 <strstr+0x16>
 8003262:	3001      	adds	r0, #1
 8003264:	7803      	ldrb	r3, [r0, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1f2      	bne.n	8003250 <strstr+0x14>
 800326a:	0018      	movs	r0, r3
 800326c:	e7ef      	b.n	800324e <strstr+0x12>

0800326e <_strtoul_l.isra.0>:
 800326e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003270:	001f      	movs	r7, r3
 8003272:	000e      	movs	r6, r1
 8003274:	b085      	sub	sp, #20
 8003276:	9003      	str	r0, [sp, #12]
 8003278:	9101      	str	r1, [sp, #4]
 800327a:	9202      	str	r2, [sp, #8]
 800327c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800327e:	7834      	ldrb	r4, [r6, #0]
 8003280:	f000 f8be 	bl	8003400 <__locale_ctype_ptr_l>
 8003284:	2208      	movs	r2, #8
 8003286:	1900      	adds	r0, r0, r4
 8003288:	7843      	ldrb	r3, [r0, #1]
 800328a:	1c75      	adds	r5, r6, #1
 800328c:	4013      	ands	r3, r2
 800328e:	d138      	bne.n	8003302 <_strtoul_l.isra.0+0x94>
 8003290:	2c2d      	cmp	r4, #45	; 0x2d
 8003292:	d138      	bne.n	8003306 <_strtoul_l.isra.0+0x98>
 8003294:	7874      	ldrb	r4, [r6, #1]
 8003296:	1cb5      	adds	r5, r6, #2
 8003298:	3301      	adds	r3, #1
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	2f00      	cmp	r7, #0
 800329e:	d065      	beq.n	800336c <_strtoul_l.isra.0+0xfe>
 80032a0:	2f10      	cmp	r7, #16
 80032a2:	d109      	bne.n	80032b8 <_strtoul_l.isra.0+0x4a>
 80032a4:	2c30      	cmp	r4, #48	; 0x30
 80032a6:	d107      	bne.n	80032b8 <_strtoul_l.isra.0+0x4a>
 80032a8:	2220      	movs	r2, #32
 80032aa:	782b      	ldrb	r3, [r5, #0]
 80032ac:	4393      	bics	r3, r2
 80032ae:	2b58      	cmp	r3, #88	; 0x58
 80032b0:	d157      	bne.n	8003362 <_strtoul_l.isra.0+0xf4>
 80032b2:	2710      	movs	r7, #16
 80032b4:	786c      	ldrb	r4, [r5, #1]
 80032b6:	3502      	adds	r5, #2
 80032b8:	2001      	movs	r0, #1
 80032ba:	0039      	movs	r1, r7
 80032bc:	4240      	negs	r0, r0
 80032be:	f7fc ff2b 	bl	8000118 <__udivsi3>
 80032c2:	0006      	movs	r6, r0
 80032c4:	2001      	movs	r0, #1
 80032c6:	0039      	movs	r1, r7
 80032c8:	4240      	negs	r0, r0
 80032ca:	f7fc ffab 	bl	8000224 <__aeabi_uidivmod>
 80032ce:	2300      	movs	r3, #0
 80032d0:	2201      	movs	r2, #1
 80032d2:	468c      	mov	ip, r1
 80032d4:	0018      	movs	r0, r3
 80032d6:	4252      	negs	r2, r2
 80032d8:	0021      	movs	r1, r4
 80032da:	3930      	subs	r1, #48	; 0x30
 80032dc:	2909      	cmp	r1, #9
 80032de:	d817      	bhi.n	8003310 <_strtoul_l.isra.0+0xa2>
 80032e0:	000c      	movs	r4, r1
 80032e2:	42a7      	cmp	r7, r4
 80032e4:	dd22      	ble.n	800332c <_strtoul_l.isra.0+0xbe>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	db1e      	blt.n	8003328 <_strtoul_l.isra.0+0xba>
 80032ea:	0013      	movs	r3, r2
 80032ec:	4286      	cmp	r6, r0
 80032ee:	d305      	bcc.n	80032fc <_strtoul_l.isra.0+0x8e>
 80032f0:	d101      	bne.n	80032f6 <_strtoul_l.isra.0+0x88>
 80032f2:	45a4      	cmp	ip, r4
 80032f4:	db02      	blt.n	80032fc <_strtoul_l.isra.0+0x8e>
 80032f6:	2301      	movs	r3, #1
 80032f8:	4378      	muls	r0, r7
 80032fa:	1820      	adds	r0, r4, r0
 80032fc:	782c      	ldrb	r4, [r5, #0]
 80032fe:	3501      	adds	r5, #1
 8003300:	e7ea      	b.n	80032d8 <_strtoul_l.isra.0+0x6a>
 8003302:	002e      	movs	r6, r5
 8003304:	e7ba      	b.n	800327c <_strtoul_l.isra.0+0xe>
 8003306:	2c2b      	cmp	r4, #43	; 0x2b
 8003308:	d1c7      	bne.n	800329a <_strtoul_l.isra.0+0x2c>
 800330a:	1cb5      	adds	r5, r6, #2
 800330c:	7874      	ldrb	r4, [r6, #1]
 800330e:	e7c4      	b.n	800329a <_strtoul_l.isra.0+0x2c>
 8003310:	0021      	movs	r1, r4
 8003312:	3941      	subs	r1, #65	; 0x41
 8003314:	2919      	cmp	r1, #25
 8003316:	d801      	bhi.n	800331c <_strtoul_l.isra.0+0xae>
 8003318:	3c37      	subs	r4, #55	; 0x37
 800331a:	e7e2      	b.n	80032e2 <_strtoul_l.isra.0+0x74>
 800331c:	0021      	movs	r1, r4
 800331e:	3961      	subs	r1, #97	; 0x61
 8003320:	2919      	cmp	r1, #25
 8003322:	d803      	bhi.n	800332c <_strtoul_l.isra.0+0xbe>
 8003324:	3c57      	subs	r4, #87	; 0x57
 8003326:	e7dc      	b.n	80032e2 <_strtoul_l.isra.0+0x74>
 8003328:	0013      	movs	r3, r2
 800332a:	e7e7      	b.n	80032fc <_strtoul_l.isra.0+0x8e>
 800332c:	2b00      	cmp	r3, #0
 800332e:	da09      	bge.n	8003344 <_strtoul_l.isra.0+0xd6>
 8003330:	2322      	movs	r3, #34	; 0x22
 8003332:	2001      	movs	r0, #1
 8003334:	9a03      	ldr	r2, [sp, #12]
 8003336:	4240      	negs	r0, r0
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	9b02      	ldr	r3, [sp, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10a      	bne.n	8003356 <_strtoul_l.isra.0+0xe8>
 8003340:	b005      	add	sp, #20
 8003342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003344:	9a00      	ldr	r2, [sp, #0]
 8003346:	2a00      	cmp	r2, #0
 8003348:	d000      	beq.n	800334c <_strtoul_l.isra.0+0xde>
 800334a:	4240      	negs	r0, r0
 800334c:	9a02      	ldr	r2, [sp, #8]
 800334e:	2a00      	cmp	r2, #0
 8003350:	d0f6      	beq.n	8003340 <_strtoul_l.isra.0+0xd2>
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <_strtoul_l.isra.0+0xec>
 8003356:	1e6b      	subs	r3, r5, #1
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	9b02      	ldr	r3, [sp, #8]
 800335c:	9a01      	ldr	r2, [sp, #4]
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	e7ee      	b.n	8003340 <_strtoul_l.isra.0+0xd2>
 8003362:	2430      	movs	r4, #48	; 0x30
 8003364:	2f00      	cmp	r7, #0
 8003366:	d1a7      	bne.n	80032b8 <_strtoul_l.isra.0+0x4a>
 8003368:	2708      	movs	r7, #8
 800336a:	e7a5      	b.n	80032b8 <_strtoul_l.isra.0+0x4a>
 800336c:	2c30      	cmp	r4, #48	; 0x30
 800336e:	d09b      	beq.n	80032a8 <_strtoul_l.isra.0+0x3a>
 8003370:	270a      	movs	r7, #10
 8003372:	e7a1      	b.n	80032b8 <_strtoul_l.isra.0+0x4a>

08003374 <strtoul>:
 8003374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003376:	0013      	movs	r3, r2
 8003378:	4a06      	ldr	r2, [pc, #24]	; (8003394 <strtoul+0x20>)
 800337a:	0005      	movs	r5, r0
 800337c:	6810      	ldr	r0, [r2, #0]
 800337e:	6a04      	ldr	r4, [r0, #32]
 8003380:	2c00      	cmp	r4, #0
 8003382:	d100      	bne.n	8003386 <strtoul+0x12>
 8003384:	4c04      	ldr	r4, [pc, #16]	; (8003398 <strtoul+0x24>)
 8003386:	000a      	movs	r2, r1
 8003388:	9400      	str	r4, [sp, #0]
 800338a:	0029      	movs	r1, r5
 800338c:	f7ff ff6f 	bl	800326e <_strtoul_l.isra.0>
 8003390:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	20000008 	.word	0x20000008
 8003398:	2000006c 	.word	0x2000006c

0800339c <__utoa>:
 800339c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800339e:	0017      	movs	r7, r2
 80033a0:	b08d      	sub	sp, #52	; 0x34
 80033a2:	2225      	movs	r2, #37	; 0x25
 80033a4:	0006      	movs	r6, r0
 80033a6:	000d      	movs	r5, r1
 80033a8:	a802      	add	r0, sp, #8
 80033aa:	4914      	ldr	r1, [pc, #80]	; (80033fc <__utoa+0x60>)
 80033ac:	f7ff fe64 	bl	8003078 <memcpy>
 80033b0:	aa02      	add	r2, sp, #8
 80033b2:	1ebb      	subs	r3, r7, #2
 80033b4:	2400      	movs	r4, #0
 80033b6:	9201      	str	r2, [sp, #4]
 80033b8:	2b22      	cmp	r3, #34	; 0x22
 80033ba:	d905      	bls.n	80033c8 <__utoa+0x2c>
 80033bc:	702c      	strb	r4, [r5, #0]
 80033be:	0025      	movs	r5, r4
 80033c0:	0028      	movs	r0, r5
 80033c2:	b00d      	add	sp, #52	; 0x34
 80033c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033c6:	0014      	movs	r4, r2
 80033c8:	0030      	movs	r0, r6
 80033ca:	0039      	movs	r1, r7
 80033cc:	f7fc ff2a 	bl	8000224 <__aeabi_uidivmod>
 80033d0:	4684      	mov	ip, r0
 80033d2:	9801      	ldr	r0, [sp, #4]
 80033d4:	1c62      	adds	r2, r4, #1
 80033d6:	18ab      	adds	r3, r5, r2
 80033d8:	5c41      	ldrb	r1, [r0, r1]
 80033da:	1e5e      	subs	r6, r3, #1
 80033dc:	7031      	strb	r1, [r6, #0]
 80033de:	4666      	mov	r6, ip
 80033e0:	2e00      	cmp	r6, #0
 80033e2:	d1f0      	bne.n	80033c6 <__utoa+0x2a>
 80033e4:	701e      	strb	r6, [r3, #0]
 80033e6:	002b      	movs	r3, r5
 80033e8:	1b5a      	subs	r2, r3, r5
 80033ea:	4294      	cmp	r4, r2
 80033ec:	dde8      	ble.n	80033c0 <__utoa+0x24>
 80033ee:	781a      	ldrb	r2, [r3, #0]
 80033f0:	5d29      	ldrb	r1, [r5, r4]
 80033f2:	7019      	strb	r1, [r3, #0]
 80033f4:	552a      	strb	r2, [r5, r4]
 80033f6:	3301      	adds	r3, #1
 80033f8:	3c01      	subs	r4, #1
 80033fa:	e7f5      	b.n	80033e8 <__utoa+0x4c>
 80033fc:	080035a4 	.word	0x080035a4

08003400 <__locale_ctype_ptr_l>:
 8003400:	30ec      	adds	r0, #236	; 0xec
 8003402:	6800      	ldr	r0, [r0, #0]
 8003404:	4770      	bx	lr

08003406 <__ascii_mbtowc>:
 8003406:	b082      	sub	sp, #8
 8003408:	2900      	cmp	r1, #0
 800340a:	d100      	bne.n	800340e <__ascii_mbtowc+0x8>
 800340c:	a901      	add	r1, sp, #4
 800340e:	1e10      	subs	r0, r2, #0
 8003410:	d006      	beq.n	8003420 <__ascii_mbtowc+0x1a>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d006      	beq.n	8003424 <__ascii_mbtowc+0x1e>
 8003416:	7813      	ldrb	r3, [r2, #0]
 8003418:	600b      	str	r3, [r1, #0]
 800341a:	7810      	ldrb	r0, [r2, #0]
 800341c:	1e43      	subs	r3, r0, #1
 800341e:	4198      	sbcs	r0, r3
 8003420:	b002      	add	sp, #8
 8003422:	4770      	bx	lr
 8003424:	2002      	movs	r0, #2
 8003426:	4240      	negs	r0, r0
 8003428:	e7fa      	b.n	8003420 <__ascii_mbtowc+0x1a>

0800342a <__malloc_lock>:
 800342a:	4770      	bx	lr

0800342c <__malloc_unlock>:
 800342c:	4770      	bx	lr

0800342e <__ascii_wctomb>:
 800342e:	1e0b      	subs	r3, r1, #0
 8003430:	d004      	beq.n	800343c <__ascii_wctomb+0xe>
 8003432:	2aff      	cmp	r2, #255	; 0xff
 8003434:	d904      	bls.n	8003440 <__ascii_wctomb+0x12>
 8003436:	238a      	movs	r3, #138	; 0x8a
 8003438:	6003      	str	r3, [r0, #0]
 800343a:	3b8b      	subs	r3, #139	; 0x8b
 800343c:	0018      	movs	r0, r3
 800343e:	4770      	bx	lr
 8003440:	700a      	strb	r2, [r1, #0]
 8003442:	2301      	movs	r3, #1
 8003444:	e7fa      	b.n	800343c <__ascii_wctomb+0xe>
	...

08003448 <_init>:
 8003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344e:	bc08      	pop	{r3}
 8003450:	469e      	mov	lr, r3
 8003452:	4770      	bx	lr

08003454 <_fini>:
 8003454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345a:	bc08      	pop	{r3}
 800345c:	469e      	mov	lr, r3
 800345e:	4770      	bx	lr
